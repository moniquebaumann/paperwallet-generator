{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/ethers/lib.esm/_version.js","../../node_modules/ethers/lib.esm/utils/properties.js","../../node_modules/ethers/lib.esm/utils/errors.js","../../node_modules/ethers/lib.esm/utils/data.js","../../node_modules/ethers/lib.esm/utils/maths.js","../../node_modules/ethers/lib.esm/utils/base58.js","../../node_modules/ethers/lib.esm/utils/utf8.js","../../node_modules/ethers/lib.esm/utils/rlp-decode.js","../../node_modules/ethers/lib.esm/utils/rlp-encode.js","../../node_modules/ethers/lib.esm/utils/uuid.js","../../node_modules/@noble/hashes/esm/_assert.js","../../node_modules/@noble/hashes/esm/crypto.js","../../node_modules/@noble/hashes/esm/utils.js","../../node_modules/@noble/hashes/esm/hmac.js","../../node_modules/@noble/hashes/esm/pbkdf2.js","../../node_modules/@noble/hashes/esm/_sha2.js","../../node_modules/@noble/hashes/esm/sha256.js","../../node_modules/@noble/hashes/esm/_u64.js","../../node_modules/@noble/hashes/esm/sha512.js","../../node_modules/ethers/lib.esm/crypto/crypto-browser.js","../../node_modules/ethers/lib.esm/crypto/hmac.js","../../node_modules/@noble/hashes/esm/sha3.js","../../node_modules/ethers/lib.esm/crypto/keccak.js","../../node_modules/@noble/hashes/esm/ripemd160.js","../../node_modules/ethers/lib.esm/crypto/ripemd160.js","../../node_modules/ethers/lib.esm/crypto/pbkdf2.js","../../node_modules/ethers/lib.esm/crypto/random.js","../../node_modules/@noble/hashes/esm/scrypt.js","../../node_modules/ethers/lib.esm/crypto/scrypt.js","../../node_modules/ethers/lib.esm/crypto/sha2.js","../../node_modules/@noble/curves/esm/abstract/utils.js","../../node_modules/@noble/curves/esm/abstract/modular.js","../../node_modules/@noble/curves/esm/abstract/curve.js","../../node_modules/@noble/curves/esm/abstract/weierstrass.js","../../node_modules/@noble/curves/esm/_shortw_utils.js","../../node_modules/@noble/curves/esm/secp256k1.js","../../node_modules/ethers/lib.esm/constants/hashes.js","../../node_modules/ethers/lib.esm/crypto/signature.js","../../node_modules/ethers/lib.esm/crypto/signing-key.js","../../node_modules/ethers/lib.esm/address/address.js","../../node_modules/ethers/lib.esm/address/checks.js","../../node_modules/ethers/lib.esm/hash/id.js","../../node_modules/ethers/lib.esm/transaction/accesslist.js","../../node_modules/ethers/lib.esm/transaction/address.js","../../node_modules/ethers/lib.esm/transaction/transaction.js","../../node_modules/ethers/lib.esm/hash/typed-data.js","../../node_modules/ethers/lib.esm/providers/abstract-signer.js","../../node_modules/ethers/lib.esm/providers/provider.js","../../node_modules/ethers/lib.esm/wallet/base-wallet.js","../../node_modules/ethers/lib.esm/hash/message.js","../../node_modules/ethers/lib.esm/constants/strings.js","../../node_modules/ethers/lib.esm/wordlists/decode-owl.js","../../node_modules/ethers/lib.esm/wordlists/wordlist.js","../../node_modules/ethers/lib.esm/wordlists/wordlist-owl.js","../../node_modules/ethers/lib.esm/wordlists/lang-en.js","../../node_modules/ethers/lib.esm/wallet/mnemonic.js","../../node_modules/aes-js/lib.esm/aes.js","../../node_modules/aes-js/lib.esm/mode.js","../../node_modules/aes-js/lib.esm/mode-cbc.js","../../node_modules/aes-js/lib.esm/mode-ctr.js","../../node_modules/ethers/lib.esm/wallet/utils.js","../../node_modules/ethers/lib.esm/wallet/json-keystore.js","../../node_modules/ethers/lib.esm/wallet/hdwallet.js","../../node_modules/ethers/lib.esm/wallet/json-crowdsale.js","../../node_modules/aes-js/lib.esm/padding.js","../../node_modules/ethers/lib.esm/wallet/wallet.js","../../node_modules/qrcode/lib/core/utils.js","../../node_modules/qrcode/lib/core/bit-buffer.js","../../node_modules/qrcode/lib/core/error-correction-level.js","../../node_modules/qrcode/lib/core/bit-matrix.js","../../node_modules/qrcode/lib/core/alignment-pattern.js","../../node_modules/qrcode/lib/core/finder-pattern.js","../../node_modules/qrcode/lib/core/mask-pattern.js","../../node_modules/qrcode/lib/core/error-correction-code.js","../../node_modules/qrcode/lib/core/galois-field.js","../../node_modules/qrcode/lib/core/polynomial.js","../../node_modules/qrcode/lib/core/reed-solomon-encoder.js","../../node_modules/qrcode/lib/core/version-check.js","../../node_modules/qrcode/lib/core/regex.js","../../node_modules/qrcode/lib/core/mode.js","../../node_modules/qrcode/lib/core/version.js","../../node_modules/qrcode/lib/core/format-info.js","../../node_modules/qrcode/lib/core/numeric-data.js","../../node_modules/qrcode/lib/core/alphanumeric-data.js","../../node_modules/qrcode/lib/core/byte-data.js","../../node_modules/encode-utf8/index.js","../../node_modules/qrcode/lib/core/kanji-data.js","../../node_modules/dijkstrajs/dijkstra.js","../../node_modules/qrcode/lib/core/segments.js","../../node_modules/qrcode/lib/core/qrcode.js","../../node_modules/qrcode/lib/renderer/utils.js","../../node_modules/qrcode/lib/renderer/canvas.js","../../node_modules/qrcode/lib/renderer/svg-tag.js","../../node_modules/qrcode/lib/browser.js","../../node_modules/qrcode/lib/can-promise.js","../../src/helpers.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */\n/**\n *  The current version of Ethers.\n */\nexport const version = \"6.10.0\";\n//# sourceMappingURL=_version.js.map","/**\n *  Property helper functions.\n *\n *  @_subsection api/utils:Properties  [about-properties]\n */\nfunction checkType(value, type, name) {\n    const types = type.split(\"|\").map(t => t.trim());\n    for (let i = 0; i < types.length; i++) {\n        switch (type) {\n            case \"any\":\n                return;\n            case \"bigint\":\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                if (typeof (value) === type) {\n                    return;\n                }\n        }\n    }\n    const error = new Error(`invalid value for type ${type}`);\n    error.code = \"INVALID_ARGUMENT\";\n    error.argument = `value.${name}`;\n    error.value = value;\n    throw error;\n}\n/**\n *  Resolves to a new object that is a copy of %%value%%, but with all\n *  values resolved.\n */\nexport async function resolveProperties(value) {\n    const keys = Object.keys(value);\n    const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));\n    return results.reduce((accum, v, index) => {\n        accum[keys[index]] = v;\n        return accum;\n    }, {});\n}\n/**\n *  Assigns the %%values%% to %%target%% as read-only values.\n *\n *  It %%types%% is specified, the values are checked.\n */\nexport function defineProperties(target, values, types) {\n    for (let key in values) {\n        let value = values[key];\n        const type = (types ? types[key] : null);\n        if (type) {\n            checkType(value, type, key);\n        }\n        Object.defineProperty(target, key, { enumerable: true, value, writable: false });\n    }\n}\n//# sourceMappingURL=properties.js.map","/**\n *  All errors in ethers include properties to ensure they are both\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\n *\n *  The [[isError]] function can be used to check the error ``code`` and\n *  provide a type guard for the properties present on that error interface.\n *\n *  @_section: api/utils/errors:Errors  [about-errors]\n */\nimport { version } from \"../_version.js\";\nimport { defineProperties } from \"./properties.js\";\nfunction stringify(value) {\n    if (value == null) {\n        return \"null\";\n    }\n    if (Array.isArray(value)) {\n        return \"[ \" + (value.map(stringify)).join(\", \") + \" ]\";\n    }\n    if (value instanceof Uint8Array) {\n        const HEX = \"0123456789abcdef\";\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            result += HEX[value[i] >> 4];\n            result += HEX[value[i] & 0xf];\n        }\n        return result;\n    }\n    if (typeof (value) === \"object\" && typeof (value.toJSON) === \"function\") {\n        return stringify(value.toJSON());\n    }\n    switch (typeof (value)) {\n        case \"boolean\":\n        case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n            return BigInt(value).toString();\n        case \"number\":\n            return (value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{ \" + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(\", \") + \" }\";\n        }\n    }\n    return `[ COULD NOT SERIALIZE ]`;\n}\n/**\n *  Returns true if the %%error%% matches an error thrown by ethers\n *  that matches the error %%code%%.\n *\n *  In TypeScript environments, this can be used to check that %%error%%\n *  matches an EthersError type, which means the expected properties will\n *  be set.\n *\n *  @See [ErrorCodes](api:ErrorCode)\n *  @example\n *    try {\n *      // code....\n *    } catch (e) {\n *      if (isError(e, \"CALL_EXCEPTION\")) {\n *          // The Type Guard has validated this object\n *          console.log(e.data);\n *      }\n *    }\n */\nexport function isError(error, code) {\n    return (error && error.code === code);\n}\n/**\n *  Returns true if %%error%% is a [[CallExceptionError].\n */\nexport function isCallException(error) {\n    return isError(error, \"CALL_EXCEPTION\");\n}\n/**\n *  Returns a new Error configured to the format ethers emits errors, with\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additional properties\n *  for the corresponding EthersError.\n *\n *  Each error in ethers includes the version of ethers, a\n *  machine-readable [[ErrorCode]], and depending on %%code%%, additional\n *  required properties. The error message will also include the %%message%%,\n *  ethers version, %%code%% and all additional properties, serialized.\n */\nexport function makeError(message, code, info) {\n    let shortMessage = message;\n    {\n        const details = [];\n        if (info) {\n            if (\"message\" in info || \"code\" in info || \"name\" in info) {\n                throw new Error(`value will overwrite populated values: ${stringify(info)}`);\n            }\n            for (const key in info) {\n                if (key === \"shortMessage\") {\n                    continue;\n                }\n                const value = (info[key]);\n                //                try {\n                details.push(key + \"=\" + stringify(value));\n                //                } catch (error: any) {\n                //                console.log(\"MMM\", error.message);\n                //                    details.push(key + \"=[could not serialize object]\");\n                //                }\n            }\n        }\n        details.push(`code=${code}`);\n        details.push(`version=${version}`);\n        if (details.length) {\n            message += \" (\" + details.join(\", \") + \")\";\n        }\n    }\n    let error;\n    switch (code) {\n        case \"INVALID_ARGUMENT\":\n            error = new TypeError(message);\n            break;\n        case \"NUMERIC_FAULT\":\n        case \"BUFFER_OVERRUN\":\n            error = new RangeError(message);\n            break;\n        default:\n            error = new Error(message);\n    }\n    defineProperties(error, { code });\n    if (info) {\n        Object.assign(error, info);\n    }\n    if (error.shortMessage == null) {\n        defineProperties(error, { shortMessage });\n    }\n    return error;\n}\n/**\n *  Throws an EthersError with %%message%%, %%code%% and additional error\n *  %%info%% when %%check%% is falsish..\n *\n *  @see [[api:makeError]]\n */\nexport function assert(check, message, code, info) {\n    if (!check) {\n        throw makeError(message, code, info);\n    }\n}\n/**\n *  A simple helper to simply ensuring provided arguments match expected\n *  constraints, throwing if not.\n *\n *  In TypeScript environments, the %%check%% has been asserted true, so\n *  any further code does not need additional compile-time checks.\n */\nexport function assertArgument(check, message, name, value) {\n    assert(check, message, \"INVALID_ARGUMENT\", { argument: name, value: value });\n}\nexport function assertArgumentCount(count, expectedCount, message) {\n    if (message == null) {\n        message = \"\";\n    }\n    if (message) {\n        message = \": \" + message;\n    }\n    assert(count >= expectedCount, \"missing arguemnt\" + message, \"MISSING_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n    assert(count <= expectedCount, \"too many arguemnts\" + message, \"UNEXPECTED_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n}\nconst _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\n    try {\n        // General test for normalize\n        /* c8 ignore start */\n        if (\"test\".normalize(form) !== \"test\") {\n            throw new Error(\"bad\");\n        }\n        ;\n        /* c8 ignore stop */\n        if (form === \"NFD\") {\n            const check = String.fromCharCode(0xe9).normalize(\"NFD\");\n            const expected = String.fromCharCode(0x65, 0x0301);\n            /* c8 ignore start */\n            if (check !== expected) {\n                throw new Error(\"broken\");\n            }\n            /* c8 ignore stop */\n        }\n        accum.push(form);\n    }\n    catch (error) { }\n    return accum;\n}, []);\n/**\n *  Throws if the normalization %%form%% is not supported.\n */\nexport function assertNormalize(form) {\n    assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"String.prototype.normalize\", info: { form }\n    });\n}\n/**\n *  Many classes use file-scoped values to guard the constructor,\n *  making it effectively private. This facilitates that pattern\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\n *  throwing if not, indicating the %%className%% if provided.\n */\nexport function assertPrivate(givenGuard, guard, className) {\n    if (className == null) {\n        className = \"\";\n    }\n    if (givenGuard !== guard) {\n        let method = className, operation = \"new\";\n        if (className) {\n            method += \".\";\n            operation += \" \" + className;\n        }\n        assert(false, `private constructor; use ${method}from* methods`, \"UNSUPPORTED_OPERATION\", {\n            operation\n        });\n    }\n}\n//# sourceMappingURL=errors.js.map","/**\n *  Some data helpers.\n *\n *\n *  @_subsection api/utils:Data Helpers  [about-data]\n */\nimport { assert, assertArgument } from \"./errors.js\";\nfunction _getBytes(value, name, copy) {\n    if (value instanceof Uint8Array) {\n        if (copy) {\n            return new Uint8Array(value);\n        }\n        return value;\n    }\n    if (typeof (value) === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n        const result = new Uint8Array((value.length - 2) / 2);\n        let offset = 2;\n        for (let i = 0; i < result.length; i++) {\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\n            offset += 2;\n        }\n        return result;\n    }\n    assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n/**\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\n *  the original %%value%% is returned; if a copy is required use\n *  [[getBytesCopy]].\n *\n *  @see: getBytesCopy\n */\nexport function getBytes(value, name) {\n    return _getBytes(value, name, false);\n}\n/**\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\n *  to prevent any modifications of the returned value from being\n *  reflected elsewhere.\n *\n *  @see: getBytes\n */\nexport function getBytesCopy(value, name) {\n    return _getBytes(value, name, true);\n}\n/**\n *  Returns true if %%value%% is a valid [[HexString]].\n *\n *  If %%length%% is ``true`` or a //number//, it also checks that\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\n */\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (typeof (length) === \"number\" && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    if (length === true && (value.length % 2) !== 0) {\n        return false;\n    }\n    return true;\n}\n/**\n *  Returns true if %%value%% is a valid representation of arbitrary\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\n */\nexport function isBytesLike(value) {\n    return (isHexString(value, true) || (value instanceof Uint8Array));\n}\nconst HexCharacters = \"0123456789abcdef\";\n/**\n *  Returns a [[DataHexString]] representation of %%data%%.\n */\nexport function hexlify(data) {\n    const bytes = getBytes(data);\n    let result = \"0x\";\n    for (let i = 0; i < bytes.length; i++) {\n        const v = bytes[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n}\n/**\n *  Returns a [[DataHexString]] by concatenating all values\n *  within %%data%%.\n */\nexport function concat(datas) {\n    return \"0x\" + datas.map((d) => hexlify(d).substring(2)).join(\"\");\n}\n/**\n *  Returns the length of %%data%%, in bytes.\n */\nexport function dataLength(data) {\n    if (isHexString(data, true)) {\n        return (data.length - 2) / 2;\n    }\n    return getBytes(data).length;\n}\n/**\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\n *  offset to the %%end%% offset.\n *\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\n */\nexport function dataSlice(data, start, end) {\n    const bytes = getBytes(data);\n    if (end != null && end > bytes.length) {\n        assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n            buffer: bytes, length: bytes.length, offset: end\n        });\n    }\n    return hexlify(bytes.slice((start == null) ? 0 : start, (end == null) ? bytes.length : end));\n}\n/**\n *  Return the [[DataHexString]] result by stripping all **leading**\n ** zero bytes from %%data%%.\n */\nexport function stripZerosLeft(data) {\n    let bytes = hexlify(data).substring(2);\n    while (bytes.startsWith(\"00\")) {\n        bytes = bytes.substring(2);\n    }\n    return \"0x\" + bytes;\n}\nfunction zeroPad(data, length, left) {\n    const bytes = getBytes(data);\n    assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n        buffer: new Uint8Array(bytes),\n        length: length,\n        offset: length + 1\n    });\n    const result = new Uint8Array(length);\n    result.fill(0);\n    if (left) {\n        result.set(bytes, length - bytes.length);\n    }\n    else {\n        result.set(bytes, 0);\n    }\n    return hexlify(result);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **values** are in Solidity\n *  (e.g. ``uint128``).\n */\nexport function zeroPadValue(data, length) {\n    return zeroPad(data, length, true);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **bytes** are in Solidity\n *  (e.g. ``bytes16``).\n */\nexport function zeroPadBytes(data, length) {\n    return zeroPad(data, length, false);\n}\n//# sourceMappingURL=data.js.map","/**\n *  Some mathematic operations.\n *\n *  @_subsection: api/utils:Math Helpers  [about-maths]\n */\nimport { hexlify, isBytesLike } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\n//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;\n// IEEE 754 support 53-bits of mantissa\nconst maxValue = 0x1fffffffffffff;\n/**\n *  Convert %%value%% from a twos-compliment representation of %%width%%\n *  bits to its value.\n *\n *  If the highest bit is ``1``, the result will be negative.\n */\nexport function fromTwos(_value, _width) {\n    const value = getUint(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    assert((value >> width) === BN_0, \"overflow\", \"NUMERIC_FAULT\", {\n        operation: \"fromTwos\", fault: \"overflow\", value: _value\n    });\n    // Top bit set; treat as a negative value\n    if (value >> (width - BN_1)) {\n        const mask = (BN_1 << width) - BN_1;\n        return -(((~value) & mask) + BN_1);\n    }\n    return value;\n}\n/**\n *  Convert %%value%% to a twos-compliment representation of\n *  %%width%% bits.\n *\n *  The result will always be positive.\n */\nexport function toTwos(_value, _width) {\n    let value = getBigInt(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    const limit = (BN_1 << (width - BN_1));\n    if (value < BN_0) {\n        value = -value;\n        assert(value <= limit, \"too low\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\", fault: \"overflow\", value: _value\n        });\n        const mask = (BN_1 << width) - BN_1;\n        return ((~value) & mask) + BN_1;\n    }\n    else {\n        assert(value < limit, \"too high\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\", fault: \"overflow\", value: _value\n        });\n    }\n    return value;\n}\n/**\n *  Mask %%value%% with a bitmask of %%bits%% ones.\n */\nexport function mask(_value, _bits) {\n    const value = getUint(_value, \"value\");\n    const bits = BigInt(getNumber(_bits, \"bits\"));\n    return value & ((BN_1 << bits) - BN_1);\n}\n/**\n *  Gets a BigInt from %%value%%. If it is an invalid value for\n *  a BigInt, then an ArgumentError will be thrown for %%name%%.\n */\nexport function getBigInt(value, name) {\n    switch (typeof (value)) {\n        case \"bigint\": return value;\n        case \"number\":\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return BigInt(value);\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                if (value[0] === \"-\" && value[1] !== \"-\") {\n                    return -BigInt(value.substring(1));\n                }\n                return BigInt(value);\n            }\n            catch (e) {\n                assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || \"value\", value);\n            }\n    }\n    assertArgument(false, \"invalid BigNumberish value\", name || \"value\", value);\n}\n/**\n *  Returns %%value%% as a bigint, validating it is valid as a bigint\n *  value and that it is positive.\n */\nexport function getUint(value, name) {\n    const result = getBigInt(value, name);\n    assert(result >= BN_0, \"unsigned value cannot be negative\", \"NUMERIC_FAULT\", {\n        fault: \"overflow\", operation: \"getUint\", value\n    });\n    return result;\n}\nconst Nibbles = \"0123456789abcdef\";\n/*\n * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it\n * is treated as Big Endian data.\n */\nexport function toBigInt(value) {\n    if (value instanceof Uint8Array) {\n        let result = \"0x0\";\n        for (const v of value) {\n            result += Nibbles[v >> 4];\n            result += Nibbles[v & 0x0f];\n        }\n        return BigInt(result);\n    }\n    return getBigInt(value);\n}\n/**\n *  Gets a //number// from %%value%%. If it is an invalid value for\n *  a //number//, then an ArgumentError will be thrown for %%name%%.\n */\nexport function getNumber(value, name) {\n    switch (typeof (value)) {\n        case \"bigint\":\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return Number(value);\n        case \"number\":\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return value;\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                return getNumber(BigInt(value), name);\n            }\n            catch (e) {\n                assertArgument(false, `invalid numeric string: ${e.message}`, name || \"value\", value);\n            }\n    }\n    assertArgument(false, \"invalid numeric value\", name || \"value\", value);\n}\n/**\n *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it\n *  is treated as Big Endian data. Throws if the value is not safe.\n */\nexport function toNumber(value) {\n    return getNumber(toBigInt(value));\n}\n/**\n *  Converts %%value%% to a Big Endian hexstring, optionally padded to\n *  %%width%% bytes.\n */\nexport function toBeHex(_value, _width) {\n    const value = getUint(_value, \"value\");\n    let result = value.toString(16);\n    if (_width == null) {\n        // Ensure the value is of even length\n        if (result.length % 2) {\n            result = \"0\" + result;\n        }\n    }\n    else {\n        const width = getNumber(_width, \"width\");\n        assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, \"NUMERIC_FAULT\", {\n            operation: \"toBeHex\",\n            fault: \"overflow\",\n            value: _value\n        });\n        // Pad the value to the required width\n        while (result.length < (width * 2)) {\n            result = \"0\" + result;\n        }\n    }\n    return \"0x\" + result;\n}\n/**\n *  Converts %%value%% to a Big Endian Uint8Array.\n */\nexport function toBeArray(_value) {\n    const value = getUint(_value, \"value\");\n    if (value === BN_0) {\n        return new Uint8Array([]);\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2) {\n        hex = \"0\" + hex;\n    }\n    const result = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < result.length; i++) {\n        const offset = i * 2;\n        result[i] = parseInt(hex.substring(offset, offset + 2), 16);\n    }\n    return result;\n}\n/**\n *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.\n *\n *  A //Quantity// does not have and leading 0 values unless the value is\n *  the literal value `0x0`. This is most commonly used for JSSON-RPC\n *  numeric values.\n */\nexport function toQuantity(value) {\n    let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);\n    while (result.startsWith(\"0\")) {\n        result = result.substring(1);\n    }\n    if (result === \"\") {\n        result = \"0\";\n    }\n    return \"0x\" + result;\n}\n//# sourceMappingURL=maths.js.map","/**\n *  The [Base58 Encoding](link-base58) scheme allows a **numeric** value\n *  to be encoded as a compact string using a radix of 58 using only\n *  alpha-numeric characters. Confusingly similar characters are omitted\n *  (i.e. ``\"l0O\"``).\n *\n *  Note that Base58 encodes a **numeric** value, not arbitrary bytes,\n *  since any zero-bytes on the left would get removed. To mitigate this\n *  issue most schemes that use Base58 choose specific high-order values\n *  to ensure non-zero prefixes.\n *\n *  @_subsection: api/utils:Base58 Encoding [about-base58]\n */\nimport { getBytes } from \"./data.js\";\nimport { assertArgument } from \"./errors.js\";\nimport { toBigInt } from \"./maths.js\";\nconst Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nlet Lookup = null;\nfunction getAlpha(letter) {\n    if (Lookup == null) {\n        Lookup = {};\n        for (let i = 0; i < Alphabet.length; i++) {\n            Lookup[Alphabet[i]] = BigInt(i);\n        }\n    }\n    const result = Lookup[letter];\n    assertArgument(result != null, `invalid base58 value`, \"letter\", letter);\n    return result;\n}\nconst BN_0 = BigInt(0);\nconst BN_58 = BigInt(58);\n/**\n *  Encode %%value%% as a Base58-encoded string.\n */\nexport function encodeBase58(_value) {\n    const bytes = getBytes(_value);\n    let value = toBigInt(bytes);\n    let result = \"\";\n    while (value) {\n        result = Alphabet[Number(value % BN_58)] + result;\n        value /= BN_58;\n    }\n    // Account for leading padding zeros\n    for (let i = 0; i < bytes.length; i++) {\n        if (bytes[i]) {\n            break;\n        }\n        result = Alphabet[0] + result;\n    }\n    return result;\n}\n/**\n *  Decode the Base58-encoded %%value%%.\n */\nexport function decodeBase58(value) {\n    let result = BN_0;\n    for (let i = 0; i < value.length; i++) {\n        result *= BN_58;\n        result += getAlpha(value[i]);\n    }\n    return result;\n}\n//# sourceMappingURL=base58.js.map","/**\n *  Using strings in Ethereum (or any security-basd system) requires\n *  additional care. These utilities attempt to mitigate some of the\n *  safety issues as well as provide the ability to recover and analyse\n *  strings.\n *\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\n */\nimport { getBytes } from \"./data.js\";\nimport { assertArgument, assertNormalize } from \"./errors.js\";\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === \"OVERRUN\") {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === \"OVERLONG\") {\n        assertArgument(typeof (badCodepoint) === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n/**\n *  A handful of popular, built-in UTF-8 error handling strategies.\n *\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\n *  non-canonical (overlong) codepoints (this is the default)\n *\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\n *  and accepts non-canonical (overlong) codepoints\n *\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\n *  non-canonical (overlong) codepoints\n *\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\n */\nexport const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(_bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    const bytes = getBytes(_bytes, \"bytes\");\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n            }\n            else {\n                i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(\"OVERRUN\", i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n/**\n *  Returns the UTF-8 byte representation of %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8Bytes(str, form) {\n    if (form != null) {\n        assertNormalize(form);\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            assertArgument(i < str.length && ((c2 & 0xfc00) === 0xdc00), \"invalid surrogate pair\", \"str\", str);\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return new Uint8Array(result);\n}\n;\n//export \nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\n/**\n *  Returns the string represented by the UTF-8 data %%bytes%%.\n *\n *  When %%onError%% function is specified, it is called on UTF-8\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\n *  (default: [error](Utf8ErrorFuncs))\n */\nexport function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n/**\n *  Returns the UTF-8 code-points for %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8CodePoints(str, form) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n//# sourceMappingURL=utf8.js.map","//See: https://github.com/ethereum/wiki/wiki/RLP\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { getBytes } from \"./data.js\";\nfunction hexlifyByte(value) {\n    let result = value.toString(16);\n    while (result.length < 2) {\n        result = \"0\" + result;\n    }\n    return \"0x\" + result;\n}\nfunction unarrayifyInteger(data, offset, length) {\n    let result = 0;\n    for (let i = 0; i < length; i++) {\n        result = (result * 256) + data[offset + i];\n    }\n    return result;\n}\nfunction _decodeChildren(data, offset, childOffset, length) {\n    const result = [];\n    while (childOffset < offset + 1 + length) {\n        const decoded = _decode(data, childOffset);\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n        assert(childOffset <= offset + 1 + length, \"child data too short\", \"BUFFER_OVERRUN\", {\n            buffer: data, length, offset\n        });\n    }\n    return { consumed: (1 + length), result: result };\n}\n// returns { consumed: number, result: Object }\nfunction _decode(data, offset) {\n    assert(data.length !== 0, \"data too short\", \"BUFFER_OVERRUN\", {\n        buffer: data, length: 0, offset: 1\n    });\n    const checkOffset = (offset) => {\n        assert(offset <= data.length, \"data short segment too short\", \"BUFFER_OVERRUN\", {\n            buffer: data, length: data.length, offset\n        });\n    };\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        const lengthLength = data[offset] - 0xf7;\n        checkOffset(offset + 1 + lengthLength);\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        checkOffset(offset + 1 + lengthLength + length);\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    }\n    else if (data[offset] >= 0xc0) {\n        const length = data[offset] - 0xc0;\n        checkOffset(offset + 1 + length);\n        return _decodeChildren(data, offset, offset + 1, length);\n    }\n    else if (data[offset] >= 0xb8) {\n        const lengthLength = data[offset] - 0xb7;\n        checkOffset(offset + 1 + lengthLength);\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        checkOffset(offset + 1 + lengthLength + length);\n        const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return { consumed: (1 + lengthLength + length), result: result };\n    }\n    else if (data[offset] >= 0x80) {\n        const length = data[offset] - 0x80;\n        checkOffset(offset + 1 + length);\n        const result = hexlify(data.slice(offset + 1, offset + 1 + length));\n        return { consumed: (1 + length), result: result };\n    }\n    return { consumed: 1, result: hexlifyByte(data[offset]) };\n}\n/**\n *  Decodes %%data%% into the structured data it represents.\n */\nexport function decodeRlp(_data) {\n    const data = getBytes(_data, \"data\");\n    const decoded = _decode(data, 0);\n    assertArgument(decoded.consumed === data.length, \"unexpected junk after rlp payload\", \"data\", _data);\n    return decoded.result;\n}\n//# sourceMappingURL=rlp-decode.js.map","//See: https://github.com/ethereum/wiki/wiki/RLP\nimport { getBytes } from \"./data.js\";\nfunction arrayifyInteger(value) {\n    const result = [];\n    while (value) {\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        let payload = [];\n        object.forEach(function (child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    const data = Array.prototype.slice.call(getBytes(object, \"object\"));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    }\n    else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nconst nibbles = \"0123456789abcdef\";\n/**\n *  Encodes %%object%% as an RLP-encoded [[DataHexString]].\n */\nexport function encodeRlp(object) {\n    let result = \"0x\";\n    for (const v of _encode(object)) {\n        result += nibbles[v >> 4];\n        result += nibbles[v & 0xf];\n    }\n    return result;\n}\n//# sourceMappingURL=rlp-encode.js.map","/**\n *  Explain UUID and link to RFC here.\n *\n *  @_subsection: api/utils:UUID  [about-uuid]\n */\nimport { getBytes, hexlify } from \"./data.js\";\n/**\n *  Returns the version 4 [[link-uuid]] for the %%randomBytes%%.\n *\n *  @see: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n */\nexport function uuidV4(randomBytes) {\n    const bytes = getBytes(randomBytes, \"randomBytes\");\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    const value = hexlify(bytes);\n    return [\n        value.substring(2, 10),\n        value.substring(10, 14),\n        value.substring(14, 18),\n        value.substring(18, 22),\n        value.substring(22, 34),\n    ].join(\"-\");\n}\n//# sourceMappingURL=uuid.js.map","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","import { hash as assertHash, number as assertNumber } from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    assertHash(hash);\n    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    assertNumber(c);\n    assertNumber(dkLen);\n    assertNumber(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = toBytes(_password);\n    const salt = toBytes(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexport async function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = createView(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await asyncLoop(c - 1, asyncTick, () => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n//# sourceMappingURL=pbkdf2.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","/* Browser Crypto Shims */\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { pbkdf2 } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { assert, assertArgument } from \"../utils/index.js\";\nfunction getGlobal() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('unable to locate global object');\n}\n;\nconst anyGlobal = getGlobal();\nconst crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nexport function createHash(algo) {\n    switch (algo) {\n        case \"sha256\": return sha256.create();\n        case \"sha512\": return sha512.create();\n    }\n    assertArgument(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\n}\nexport function createHmac(_algo, key) {\n    const algo = ({ sha256, sha512 }[_algo]);\n    assertArgument(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\n    return hmac.create(algo, key);\n}\nexport function pbkdf2Sync(password, salt, iterations, keylen, _algo) {\n    const algo = ({ sha256, sha512 }[_algo]);\n    assertArgument(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\n    return pbkdf2(algo, password, salt, { c: iterations, dkLen: keylen });\n}\nexport function randomBytes(length) {\n    assert(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"randomBytes\"\n    });\n    assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return result;\n}\n//# sourceMappingURL=crypto-browser.js.map","/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _computeHmac = function (algorithm, key, data) {\n    return createHmac(algorithm, key).update(data).digest();\n};\nlet __computeHmac = _computeHmac;\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */\nexport function computeHmac(algorithm, _key, _data) {\n    const key = getBytes(_key, \"key\");\n    const data = getBytes(_data, \"data\");\n    return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock = function () { locked = true; };\ncomputeHmac.register = function (func) {\n    if (locked) {\n        throw new Error(\"computeHmac is locked\");\n    }\n    __computeHmac = func;\n};\nObject.freeze(computeHmac);\n//# sourceMappingURL=hmac.js.map","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        exists(this, false);\n        bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */\nimport { keccak_256 } from \"@noble/hashes/sha3\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _keccak256 = function (data) {\n    return keccak_256(data);\n};\nlet __keccak256 = _keccak256;\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */\nexport function keccak256(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__keccak256(data));\n}\nkeccak256._ = _keccak256;\nkeccak256.lock = function () { locked = true; };\nkeccak256.register = function (func) {\n    if (locked) {\n        throw new TypeError(\"keccak256 is locked\");\n    }\n    __keccak256 = func;\n};\nObject.freeze(keccak256);\n//# sourceMappingURL=keccak.js.map","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = /* @__PURE__ */ [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n//# sourceMappingURL=ripemd160.js.map","import { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _ripemd160 = function (data) {\n    return noble_ripemd160(data);\n};\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function ripemd160(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__ripemd160(data));\n}\nripemd160._ = _ripemd160;\nripemd160.lock = function () { locked = true; };\nripemd160.register = function (func) {\n    if (locked) {\n        throw new TypeError(\"ripemd160 is locked\");\n    }\n    __ripemd160 = func;\n};\nObject.freeze(ripemd160);\n//# sourceMappingURL=ripemd160.js.map","/**\n *  A **Password-Based Key-Derivation Function** is designed to create\n *  a sequence of bytes suitible as a **key** from a human-rememberable\n *  password.\n *\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\n */\nimport { pbkdf2Sync } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _pbkdf2 = function (password, salt, iterations, keylen, algo) {\n    return pbkdf2Sync(password, salt, iterations, keylen, algo);\n};\nlet __pbkdf2 = _pbkdf2;\n/**\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\n *  the %%salt%% and using %%iterations%% of %%algo%%.\n *\n *  This PBKDF is outdated and should not be used in new projects, but is\n *  required to decrypt older files.\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the PBKDF2\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\n *    //_result:\n */\nexport function pbkdf2(_password, _salt, iterations, keylen, algo) {\n    const password = getBytes(_password, \"password\");\n    const salt = getBytes(_salt, \"salt\");\n    return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));\n}\npbkdf2._ = _pbkdf2;\npbkdf2.lock = function () { locked = true; };\npbkdf2.register = function (func) {\n    if (locked) {\n        throw new Error(\"pbkdf2 is locked\");\n    }\n    __pbkdf2 = func;\n};\nObject.freeze(pbkdf2);\n//# sourceMappingURL=pbkdf2.js.map","/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */\nimport { randomBytes as crypto_random } from \"./crypto.js\";\nlet locked = false;\nconst _randomBytes = function (length) {\n    return new Uint8Array(crypto_random(length));\n};\nlet __randomBytes = _randomBytes;\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */\nexport function randomBytes(length) {\n    return __randomBytes(length);\n}\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function () { locked = true; };\nrandomBytes.register = function (func) {\n    if (locked) {\n        throw new Error(\"randomBytes is locked\");\n    }\n    __randomBytes = func;\n};\nObject.freeze(randomBytes);\n//# sourceMappingURL=random.js.map","import { number as assertNumber } from './_assert.js';\nimport { sha256 } from './sha256.js';\nimport { pbkdf2 } from './pbkdf2.js';\nimport { asyncLoop, checkOpts, u32 } from './utils.js';\n// RFC 7914 Scrypt KDF\n// Left rotate for uint32\nconst rotl = (a, b) => (a << b) | (a >>> (32 - b));\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n    // Based on https://cr.yp.to/salsa20.html\n    // Xor blocks\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n    // Save state to temporary variables (salsa)\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    // Main loop (salsa)\n    for (let i = 0; i < 8; i += 2) {\n        x04 ^= rotl(x00 + x12 | 0, 7);\n        x08 ^= rotl(x04 + x00 | 0, 9);\n        x12 ^= rotl(x08 + x04 | 0, 13);\n        x00 ^= rotl(x12 + x08 | 0, 18);\n        x09 ^= rotl(x05 + x01 | 0, 7);\n        x13 ^= rotl(x09 + x05 | 0, 9);\n        x01 ^= rotl(x13 + x09 | 0, 13);\n        x05 ^= rotl(x01 + x13 | 0, 18);\n        x14 ^= rotl(x10 + x06 | 0, 7);\n        x02 ^= rotl(x14 + x10 | 0, 9);\n        x06 ^= rotl(x02 + x14 | 0, 13);\n        x10 ^= rotl(x06 + x02 | 0, 18);\n        x03 ^= rotl(x15 + x11 | 0, 7);\n        x07 ^= rotl(x03 + x15 | 0, 9);\n        x11 ^= rotl(x07 + x03 | 0, 13);\n        x15 ^= rotl(x11 + x07 | 0, 18);\n        x01 ^= rotl(x00 + x03 | 0, 7);\n        x02 ^= rotl(x01 + x00 | 0, 9);\n        x03 ^= rotl(x02 + x01 | 0, 13);\n        x00 ^= rotl(x03 + x02 | 0, 18);\n        x06 ^= rotl(x05 + x04 | 0, 7);\n        x07 ^= rotl(x06 + x05 | 0, 9);\n        x04 ^= rotl(x07 + x06 | 0, 13);\n        x05 ^= rotl(x04 + x07 | 0, 18);\n        x11 ^= rotl(x10 + x09 | 0, 7);\n        x08 ^= rotl(x11 + x10 | 0, 9);\n        x09 ^= rotl(x08 + x11 | 0, 13);\n        x10 ^= rotl(x09 + x08 | 0, 18);\n        x12 ^= rotl(x15 + x14 | 0, 7);\n        x13 ^= rotl(x12 + x15 | 0, 9);\n        x14 ^= rotl(x13 + x12 | 0, 13);\n        x15 ^= rotl(x14 + x13 | 0, 18);\n    }\n    // Write output (salsa)\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\nfunction BlockMix(input, ii, out, oi, r) {\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n    let head = oi + 0;\n    let tail = oi + 16 * r;\n    for (let i = 0; i < 16; i++)\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n        if (i > 0)\n            tail += 16; // First iteration overwrites tmp value in tail\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n    }\n}\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n    // Maxmem - 1GB+1KB by default\n    const opts = checkOpts({\n        dkLen: 32,\n        asyncTick: 10,\n        maxmem: 1024 ** 3 + 1024,\n    }, _opts);\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n    assertNumber(N);\n    assertNumber(r);\n    assertNumber(p);\n    assertNumber(dkLen);\n    assertNumber(asyncTick);\n    assertNumber(maxmem);\n    if (onProgress !== undefined && typeof onProgress !== 'function')\n        throw new Error('progressCb should be function');\n    const blockSize = 128 * r;\n    const blockSize32 = blockSize / 4;\n    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\n    }\n    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n    }\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n    }\n    const memUsed = blockSize * (N + p);\n    if (memUsed > maxmem) {\n        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n    }\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n    // Since it has only one iteration there is no reason to use async variant\n    const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\n    const B32 = u32(B);\n    // Re-used between parallel iterations. Array(iterations) of B\n    const V = u32(new Uint8Array(blockSize * N));\n    const tmp = u32(new Uint8Array(blockSize));\n    let blockMixCb = () => { };\n    if (onProgress) {\n        const totalBlockMix = 2 * N * p;\n        // Invoke callback if progress changes from 10.01 to 10.02\n        // Allows to draw smooth progress bar on up to 8K screen\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n        let blockMixCnt = 0;\n        blockMixCb = () => {\n            blockMixCnt++;\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n                onProgress(blockMixCnt / totalBlockMix);\n        };\n    }\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n    const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\n    B.fill(0);\n    V.fill(0);\n    tmp.fill(0);\n    return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nexport function scrypt(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        for (let i = 0, pos = 0; i < N - 1; i++) {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        }\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        for (let i = 0; i < N; i++) {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        }\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\n/**\n * Scrypt KDF from RFC 7914.\n */\nexport async function scryptAsync(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        let pos = 0;\n        await asyncLoop(N - 1, asyncTick, () => {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        });\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        await asyncLoop(N, asyncTick, () => {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        });\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\n//# sourceMappingURL=scrypt.js.map","import { scrypt as _nobleSync, scryptAsync as _nobleAsync } from \"@noble/hashes/scrypt\";\nimport { getBytes, hexlify as H } from \"../utils/index.js\";\nlet lockedSync = false, lockedAsync = false;\nconst _scryptAsync = async function (passwd, salt, N, r, p, dkLen, onProgress) {\n    return await _nobleAsync(passwd, salt, { N, r, p, dkLen, onProgress });\n};\nconst _scryptSync = function (passwd, salt, N, r, p, dkLen) {\n    return _nobleSync(passwd, salt, { N, r, p, dkLen });\n};\nlet __scryptAsync = _scryptAsync;\nlet __scryptSync = _scryptSync;\n/**\n *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of\n *  derivation to increase the resource cost to brute-force a password\n *  for a given key.\n *\n *  This means this algorithm is intentionally slow, and can be tuned to\n *  become slower. As computation and memory speed improve over time,\n *  increasing the difficulty maintains the cost of an attacker.\n *\n *  For example, if a target time of 5 seconds is used, a legitimate user\n *  which knows their password requires only 5 seconds to unlock their\n *  account. A 6 character password has 68 billion possibilities, which\n *  would require an attacker to invest over 10,000 years of CPU time. This\n *  is of course a crude example (as password generally aren't random),\n *  but demonstrates to value of imposing large costs to decryption.\n *\n *  For this reason, if building a UI which involved decrypting or\n *  encrypting datsa using scrypt, it is recommended to use a\n *  [[ProgressCallback]] (as event short periods can seem lik an eternity\n *  if the UI freezes). Including the phrase //\"decrypting\"// in the UI\n *  can also help, assuring the user their waiting is for a good reason.\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\nexport async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {\n    const passwd = getBytes(_passwd, \"passwd\");\n    const salt = getBytes(_salt, \"salt\");\n    return H(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));\n}\nscrypt._ = _scryptAsync;\nscrypt.lock = function () { lockedAsync = true; };\nscrypt.register = function (func) {\n    if (lockedAsync) {\n        throw new Error(\"scrypt is locked\");\n    }\n    __scryptAsync = func;\n};\nObject.freeze(scrypt);\n/**\n *  Provides a synchronous variant of [[scrypt]].\n *\n *  This will completely lock up and freeze the UI in a browser and will\n *  prevent any event loop from progressing. For this reason, it is\n *  preferred to use the [async variant](scrypt).\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\nexport function scryptSync(_passwd, _salt, N, r, p, dkLen) {\n    const passwd = getBytes(_passwd, \"passwd\");\n    const salt = getBytes(_salt, \"salt\");\n    return H(__scryptSync(passwd, salt, N, r, p, dkLen));\n}\nscryptSync._ = _scryptSync;\nscryptSync.lock = function () { lockedSync = true; };\nscryptSync.register = function (func) {\n    if (lockedSync) {\n        throw new Error(\"scryptSync is locked\");\n    }\n    __scryptSync = func;\n};\nObject.freeze(scryptSync);\n//# sourceMappingURL=scrypt.js.map","import { createHash } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nconst _sha256 = function (data) {\n    return createHash(\"sha256\").update(data).digest();\n};\nconst _sha512 = function (data) {\n    return createHash(\"sha512\").update(data).digest();\n};\nlet __sha256 = _sha256;\nlet __sha512 = _sha512;\nlet locked256 = false, locked512 = false;\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function sha256(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha256(data));\n}\nsha256._ = _sha256;\nsha256.lock = function () { locked256 = true; };\nsha256.register = function (func) {\n    if (locked256) {\n        throw new Error(\"sha256 is locked\");\n    }\n    __sha256 = func;\n};\nObject.freeze(sha256);\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */\nexport function sha512(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha512(data));\n}\nsha512._ = _sha512;\nsha512.lock = function () { locked512 = true; };\nsha512.register = function (func) {\n    if (locked512) {\n        throw new Error(\"sha512 is locked\");\n    }\n    __sha512 = func;\n};\nObject.freeze(sha256);\n//# sourceMappingURL=sha2.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexport function equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","/**\n *  A constant for the zero hash.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000000000000000000000000000\"``)\n */\nexport const ZeroHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n//# sourceMappingURL=hashes.js.map","import { ZeroHash } from \"../constants/index.js\";\nimport { concat, dataLength, getBigInt, getBytes, getNumber, hexlify, toBeArray, isHexString, zeroPadValue, assertArgument, assertPrivate } from \"../utils/index.js\";\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst _guard = {};\nfunction toUint256(value) {\n    return zeroPadValue(toBeArray(value), 32);\n}\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nexport class Signature {\n    #r;\n    #s;\n    #v;\n    #networkV;\n    /**\n     *  The ``r`` value for a signautre.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */\n    get r() { return this.#r; }\n    set r(value) {\n        assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n        this.#r = hexlify(value);\n    }\n    /**\n     *  The ``s`` value for a signature.\n     */\n    get s() { return this.#s; }\n    set s(_value) {\n        assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n        const value = hexlify(_value);\n        assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n        this.#s = value;\n    }\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */\n    get v() { return this.#v; }\n    set v(value) {\n        const v = getNumber(value, \"value\");\n        assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n        this.#v = v;\n    }\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get networkV() { return this.#networkV; }\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get legacyChainId() {\n        const v = this.networkV;\n        if (v == null) {\n            return null;\n        }\n        return Signature.getChainId(v);\n    }\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */\n    get yParity() {\n        return (this.v === 27) ? 0 : 1;\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */\n    get yParityAndS() {\n        // The EIP-2098 compact representation\n        const yParityAndS = getBytes(this.s);\n        if (this.yParity) {\n            yParityAndS[0] |= 0x80;\n        }\n        return hexlify(yParityAndS);\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */\n    get compactSerialized() {\n        return concat([this.r, this.yParityAndS]);\n    }\n    /**\n     *  The serialized representation.\n     */\n    get serialized() {\n        return concat([this.r, this.s, (this.yParity ? \"0x1c\" : \"0x1b\")]);\n    }\n    /**\n     *  @private\n     */\n    constructor(guard, r, s, v) {\n        assertPrivate(guard, _guard, \"Signature\");\n        this.#r = r;\n        this.#s = s;\n        this.#v = v;\n        this.#networkV = null;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return `Signature { r: \"${this.r}\", s: \"${this.s}\", yParity: ${this.yParity}, networkV: ${this.networkV} }`;\n    }\n    /**\n     *  Returns a new identical [[Signature]].\n     */\n    clone() {\n        const clone = new Signature(_guard, this.r, this.s, this.v);\n        if (this.networkV) {\n            clone.#networkV = this.networkV;\n        }\n        return clone;\n    }\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */\n    toJSON() {\n        const networkV = this.networkV;\n        return {\n            _type: \"signature\",\n            networkV: ((networkV != null) ? networkV.toString() : null),\n            r: this.r, s: this.s, v: this.v,\n        };\n    }\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */\n    static getChainId(v) {\n        const bv = getBigInt(v, \"v\");\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\n        if ((bv == BN_27) || (bv == BN_28)) {\n            return BN_0;\n        }\n        // Bad value for an EIP-155 v\n        assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n        return (bv - BN_35) / BN_2;\n    }\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */\n    static getChainIdV(chainId, v) {\n        return (getBigInt(chainId) * BN_2) + BigInt(35 + v - 27);\n    }\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */\n    static getNormalizedV(v) {\n        const bv = getBigInt(v);\n        if (bv === BN_0 || bv === BN_27) {\n            return 27;\n        }\n        if (bv === BN_1 || bv === BN_28) {\n            return 28;\n        }\n        assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\n        return (bv & BN_1) ? 27 : 28;\n    }\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */\n    static from(sig) {\n        function assertError(check, message) {\n            assertArgument(check, message, \"signature\", sig);\n        }\n        ;\n        if (sig == null) {\n            return new Signature(_guard, ZeroHash, ZeroHash, 27);\n        }\n        if (typeof (sig) === \"string\") {\n            const bytes = getBytes(sig, \"signature\");\n            if (bytes.length === 64) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                const v = (s[0] & 0x80) ? 28 : 27;\n                s[0] &= 0x7f;\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n            if (bytes.length === 65) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n                const v = Signature.getNormalizedV(bytes[64]);\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n            assertError(false, \"invalid raw signature length\");\n        }\n        if (sig instanceof Signature) {\n            return sig.clone();\n        }\n        // Get r\n        const _r = sig.r;\n        assertError(_r != null, \"missing r\");\n        const r = toUint256(_r);\n        // Get s; by any means necessary (we check consistency below)\n        const s = (function (s, yParityAndS) {\n            if (s != null) {\n                return toUint256(s);\n            }\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                const bytes = getBytes(yParityAndS);\n                bytes[0] &= 0x7f;\n                return hexlify(bytes);\n            }\n            assertError(false, \"missing s\");\n        })(sig.s, sig.yParityAndS);\n        assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n        // Get v; by any means necessary (we check consistency below)\n        const { networkV, v } = (function (_v, yParityAndS, yParity) {\n            if (_v != null) {\n                const v = getBigInt(_v);\n                return {\n                    networkV: ((v >= BN_35) ? v : undefined),\n                    v: Signature.getNormalizedV(v)\n                };\n            }\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                return { v: ((getBytes(yParityAndS)[0] & 0x80) ? 28 : 27) };\n            }\n            if (yParity != null) {\n                switch (getNumber(yParity, \"sig.yParity\")) {\n                    case 0: return { v: 27 };\n                    case 1: return { v: 28 };\n                }\n                assertError(false, \"invalid yParity\");\n            }\n            assertError(false, \"missing v\");\n        })(sig.v, sig.yParityAndS, sig.yParity);\n        const result = new Signature(_guard, r, s, v);\n        if (networkV) {\n            result.#networkV = networkV;\n        }\n        // If multiple of v, yParity, yParityAndS we given, check they match\n        assertError(sig.yParity == null || getNumber(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n        return result;\n    }\n}\n//# sourceMappingURL=signature.js.map","/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex, assertArgument } from \"../utils/index.js\";\nimport { Signature } from \"./signature.js\";\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nexport class SigningKey {\n    #privateKey;\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */\n    constructor(privateKey) {\n        assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        this.#privateKey = hexlify(privateKey);\n    }\n    /**\n     *  The private key.\n     */\n    get privateKey() { return this.#privateKey; }\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n    get publicKey() { return SigningKey.computePublicKey(this.#privateKey); }\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n    get compressedPublicKey() { return SigningKey.computePublicKey(this.#privateKey, true); }\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n    sign(digest) {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n            lowS: true\n        });\n        return Signature.from({\n            r: toBeHex(sig.r, 32),\n            s: toBeHex(sig.s, 32),\n            v: (sig.recovery ? 0x1c : 0x1b)\n        });\n    }\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n    computeSharedSecret(other) {\n        const pubKey = SigningKey.computePublicKey(other);\n        return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey), false));\n    }\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n    static computePublicKey(key, compressed) {\n        let bytes = getBytes(key, \"key\");\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n            return hexlify(pubKey);\n        }\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n        const point = secp256k1.ProjectivePoint.fromHex(bytes);\n        return hexlify(point.toRawBytes(compressed));\n    }\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n    static recoverPublicKey(digest, signature) {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = Signature.from(signature);\n        let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s])));\n        secpSig = secpSig.addRecoveryBit(sig.yParity);\n        const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));\n        assertArgument(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n        return \"0x\" + pubKey.toHex(false);\n    }\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n    static addPoints(p0, p1, compressed) {\n        const pub0 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n    }\n}\n//# sourceMappingURL=signing-key.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\nconst BN_0 = BigInt(0);\nconst BN_36 = BigInt(36);\nfunction getChecksumAddress(address) {\n    //    if (!isHexString(address, 20)) {\n    //        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    //    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = getBytes(keccak256(expanded));\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor (let i = 0; i < 10; i++) {\n    ibanLookup[String(i)] = String(i);\n}\nfor (let i = 0; i < 26; i++) {\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\n// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));\nconst safeDigits = 15;\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits) {\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) {\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nconst Base36 = (function () {\n    ;\n    const result = {};\n    for (let i = 0; i < 36; i++) {\n        const key = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\n        result[key] = BigInt(i);\n    }\n    return result;\n})();\nfunction fromBase36(value) {\n    value = value.toLowerCase();\n    let result = BN_0;\n    for (let i = 0; i < value.length; i++) {\n        result = result * BN_36 + Base36[value[i]];\n    }\n    return result;\n}\n/**\n *  Returns a normalized and checksumed address for %%address%%.\n *  This accepts non-checksum addresses, checksum addresses and\n *  [[getIcapAddress]] formats.\n *\n *  The checksum in Ethereum uses the capitalization (upper-case\n *  vs lower-case) of the characters within an address to encode\n *  its checksum, which offers, on average, a checksum of 15-bits.\n *\n *  If %%address%% contains both upper-case and lower-case, it is\n *  assumed to already be a checksum address and its checksum is\n *  validated, and if the address fails its expected checksum an\n *  error is thrown.\n *\n *  If you wish the checksum of %%address%% to be ignore, it should\n *  be converted to lower-case (i.e. ``.toLowercase()``) before\n *  being passed in. This should be a very rare situation though,\n *  that you wish to bypass the safegaurds in place to protect\n *  against an address that has been incorrectly copied from another\n *  source.\n *\n *  @example:\n *    // Adds the checksum (via upper-casing specific letters)\n *    getAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\")\n *    //_result:\n *\n *    // Converts ICAP address and adds checksum\n *    getAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if an address contains mixed case,\n *    // but the checksum fails\n *    getAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_error:\n */\nexport function getAddress(address) {\n    assertArgument(typeof (address) === \"string\", \"invalid address\", \"address\", address);\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (!address.startsWith(\"0x\")) {\n            address = \"0x\" + address;\n        }\n        const result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, \"bad address checksum\", \"address\", address);\n        return result;\n    }\n    // Maybe ICAP? (we only support direct mode)\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        assertArgument(address.substring(2, 4) === ibanChecksum(address), \"bad icap checksum\", \"address\", address);\n        let result = fromBase36(address.substring(4)).toString(16);\n        while (result.length < 40) {\n            result = \"0\" + result;\n        }\n        return getChecksumAddress(\"0x\" + result);\n    }\n    assertArgument(false, \"invalid address\", \"address\", address);\n}\n/**\n *  The [ICAP Address format](link-icap) format is an early checksum\n *  format which attempts to be compatible with the banking\n *  industry [IBAN format](link-wiki-iban) for bank accounts.\n *\n *  It is no longer common or a recommended format.\n *\n *  @example:\n *    getIcapAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\");\n *    //_result:\n *\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if the ICAP checksum is wrong\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37\");\n *    //_error:\n */\nexport function getIcapAddress(address) {\n    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();\n    while (base36.length < 30) {\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n//# sourceMappingURL=address.js.map","import { assert, assertArgument } from \"../utils/index.js\";\nimport { getAddress } from \"./address.js\";\n/**\n *  Returns true if %%value%% is an object which implements the\n *  [[Addressable]] interface.\n *\n *  @example:\n *    // Wallets and AbstractSigner sub-classes\n *    isAddressable(Wallet.createRandom())\n *    //_result:\n *\n *    // Contracts\n *    contract = new Contract(\"dai.tokens.ethers.eth\", [ ], provider)\n *    isAddressable(contract)\n *    //_result:\n */\nexport function isAddressable(value) {\n    return (value && typeof (value.getAddress) === \"function\");\n}\n/**\n *  Returns true if %%value%% is a valid address.\n *\n *  @example:\n *    // Valid address\n *    isAddress(\"0x8ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Valid ICAP address\n *    isAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\")\n *    //_result:\n *\n *    // Invalid checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBa72\")\n *    //_result:\n *\n *    // Invalid ICAP checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Not an address (an ENS name requires a provided and an\n *    // asynchronous API to access)\n *    isAddress(\"ricmoo.eth\")\n *    //_result:\n */\nexport function isAddress(value) {\n    try {\n        getAddress(value);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nasync function checkAddress(target, promise) {\n    const result = await promise;\n    if (result == null || result === \"0x0000000000000000000000000000000000000000\") {\n        assert(typeof (target) !== \"string\", \"unconfigured name\", \"UNCONFIGURED_NAME\", { value: target });\n        assertArgument(false, \"invalid AddressLike value; did not resolve to a value address\", \"target\", target);\n    }\n    return getAddress(result);\n}\n/**\n *  Resolves to an address for the %%target%%, which may be any\n *  supported address type, an [[Addressable]] or a Promise which\n *  resolves to an address.\n *\n *  If an ENS name is provided, but that name has not been correctly\n *  configured a [[UnconfiguredNameError]] is thrown.\n *\n *  @example:\n *    addr = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n *\n *    // Addresses are return synchronously\n *    resolveAddress(addr, provider)\n *    //_result:\n *\n *    // Address promises are resolved asynchronously\n *    resolveAddress(Promise.resolve(addr))\n *    //_result:\n *\n *    // ENS names are resolved asynchronously\n *    resolveAddress(\"dai.tokens.ethers.eth\", provider)\n *    //_result:\n *\n *    // Addressable objects are resolved asynchronously\n *    contract = new Contract(addr, [ ])\n *    resolveAddress(contract, provider)\n *    //_result:\n *\n *    // Unconfigured ENS names reject\n *    resolveAddress(\"nothing-here.ricmoo.eth\", provider)\n *    //_error:\n *\n *    // ENS names require a NameResolver object passed in\n *    // (notice the provider was omitted)\n *    resolveAddress(\"nothing-here.ricmoo.eth\")\n *    //_error:\n */\nexport function resolveAddress(target, resolver) {\n    if (typeof (target) === \"string\") {\n        if (target.match(/^0x[0-9a-f]{40}$/i)) {\n            return getAddress(target);\n        }\n        assert(resolver != null, \"ENS resolution requires a provider\", \"UNSUPPORTED_OPERATION\", { operation: \"resolveName\" });\n        return checkAddress(target, resolver.resolveName(target));\n    }\n    else if (isAddressable(target)) {\n        return checkAddress(target, target.getAddress());\n    }\n    else if (target && typeof (target.then) === \"function\") {\n        return checkAddress(target, target);\n    }\n    assertArgument(false, \"unsupported addressable value\", \"target\", target);\n}\n//# sourceMappingURL=checks.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { toUtf8Bytes } from \"../utils/index.js\";\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nexport function id(value) {\n    return keccak256(toUtf8Bytes(value));\n}\n//# sourceMappingURL=id.js.map","import { getAddress } from \"../address/index.js\";\nimport { assertArgument, isHexString } from \"../utils/index.js\";\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: getAddress(addr),\n        storageKeys: storageKeys.map((storageKey, index) => {\n            assertArgument(isHexString(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\n            return storageKey.toLowerCase();\n        })\n    };\n}\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */\nexport function accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index) => {\n            if (Array.isArray(set)) {\n                assertArgument(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\n                return accessSetify(set[0], set[1]);\n            }\n            assertArgument(set != null && typeof (set) === \"object\", \"invalid address-slot set\", \"value\", value);\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    assertArgument(value != null && typeof (value) === \"object\", \"invalid access list\", \"value\", value);\n    const result = Object.keys(value).map((addr) => {\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\n//# sourceMappingURL=accesslist.js.map","import { getAddress } from \"../address/index.js\";\nimport { keccak256, SigningKey } from \"../crypto/index.js\";\n/**\n *  Returns the address for the %%key%%.\n *\n *  The key may be any standard form of public key or a private key.\n */\nexport function computeAddress(key) {\n    let pubkey;\n    if (typeof (key) === \"string\") {\n        pubkey = SigningKey.computePublicKey(key, false);\n    }\n    else {\n        pubkey = key.publicKey;\n    }\n    return getAddress(keccak256(\"0x\" + pubkey.substring(4)).substring(26));\n}\n/**\n *  Returns the recovered address for the private key that was\n *  used to sign %%digest%% that resulted in %%signature%%.\n */\nexport function recoverAddress(digest, signature) {\n    return computeAddress(SigningKey.recoverPublicKey(digest, signature));\n}\n//# sourceMappingURL=address.js.map","import { getAddress } from \"../address/index.js\";\nimport { keccak256, Signature, SigningKey } from \"../crypto/index.js\";\nimport { concat, decodeRlp, encodeRlp, getBytes, getBigInt, getNumber, hexlify, assert, assertArgument, toBeArray, zeroPadValue } from \"../utils/index.js\";\nimport { accessListify } from \"./accesslist.js\";\nimport { recoverAddress } from \"./address.js\";\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return getAddress(value);\n}\nfunction handleAccessList(value, param) {\n    try {\n        return accessListify(value);\n    }\n    catch (error) {\n        assertArgument(false, error.message, param, value);\n    }\n}\nfunction handleNumber(_value, param) {\n    if (_value === \"0x\") {\n        return 0;\n    }\n    return getNumber(_value, param);\n}\nfunction handleUint(_value, param) {\n    if (_value === \"0x\") {\n        return BN_0;\n    }\n    const value = getBigInt(_value, param);\n    assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n    return value;\n}\nfunction formatNumber(_value, name) {\n    const value = getBigInt(_value, \"value\");\n    const result = toBeArray(value);\n    assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\n}\nfunction _parseLegacy(data) {\n    const fields = decodeRlp(data);\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n    const tx = {\n        type: 0,\n        nonce: handleNumber(fields[0], \"nonce\"),\n        gasPrice: handleUint(fields[1], \"gasPrice\"),\n        gasLimit: handleUint(fields[2], \"gasLimit\"),\n        to: handleAddress(fields[3]),\n        value: handleUint(fields[4], \"value\"),\n        data: hexlify(fields[5]),\n        chainId: BN_0\n    };\n    // Legacy unsigned transaction\n    if (fields.length === 6) {\n        return tx;\n    }\n    const v = handleUint(fields[6], \"v\");\n    const r = handleUint(fields[7], \"r\");\n    const s = handleUint(fields[8], \"s\");\n    if (r === BN_0 && s === BN_0) {\n        // EIP-155 unsigned transaction\n        tx.chainId = v;\n    }\n    else {\n        // Compute the EIP-155 chain ID (or 0 for legacy)\n        let chainId = (v - BN_35) / BN_2;\n        if (chainId < BN_0) {\n            chainId = BN_0;\n        }\n        tx.chainId = chainId;\n        // Signed Legacy Transaction\n        assertArgument(chainId !== BN_0 || (v === BN_27 || v === BN_28), \"non-canonical legacy v\", \"v\", fields[6]);\n        tx.signature = Signature.from({\n            r: zeroPadValue(fields[7], 32),\n            s: zeroPadValue(fields[8], 32),\n            v\n        });\n        tx.hash = keccak256(data);\n    }\n    return tx;\n}\nfunction _serializeLegacy(tx, sig) {\n    const fields = [\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to) : \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n    ];\n    let chainId = BN_0;\n    if (tx.chainId != BN_0) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = getBigInt(tx.chainId, \"tx.chainId\");\n        // We have a chainId in the tx and an EIP-155 v in the signature,\n        // make sure they agree with each other\n        assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    else if (tx.signature) {\n        // No explicit chainId, but EIP-155 have a derived implicit chainId\n        const legacy = tx.signature.legacyChainId;\n        if (legacy != null) {\n            chainId = legacy;\n        }\n    }\n    // Requesting an unsigned transaction\n    if (!sig) {\n        // We have an EIP-155 transaction (chainId was specified and non-zero)\n        if (chainId !== BN_0) {\n            fields.push(toBeArray(chainId));\n            fields.push(\"0x\");\n            fields.push(\"0x\");\n        }\n        return encodeRlp(fields);\n    }\n    // @TODO: We should probably check that tx.signature, chainId, and sig\n    //        match but that logic could break existing code, so schedule\n    //        this for the next major bump.\n    // Compute the EIP-155 v\n    let v = BigInt(27 + sig.yParity);\n    if (chainId !== BN_0) {\n        v = Signature.getChainIdV(chainId, sig.v);\n    }\n    else if (BigInt(sig.v) !== v) {\n        assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    // Add the signature\n    fields.push(toBeArray(v));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n    return encodeRlp(fields);\n}\nfunction _parseEipSignature(tx, fields) {\n    let yParity;\n    try {\n        yParity = handleNumber(fields[0], \"yParity\");\n        if (yParity !== 0 && yParity !== 1) {\n            throw new Error(\"bad yParity\");\n        }\n    }\n    catch (error) {\n        assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\n    }\n    const r = zeroPadValue(fields[1], 32);\n    const s = zeroPadValue(fields[2], 32);\n    const signature = Signature.from({ r, s, yParity });\n    tx.signature = signature;\n}\nfunction _parseEip1559(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", hexlify(data));\n    const maxPriorityFeePerGas = handleUint(fields[2], \"maxPriorityFeePerGas\");\n    const maxFeePerGas = handleUint(fields[3], \"maxFeePerGas\");\n    const tx = {\n        type: 2,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasPrice: null,\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\n        to: handleAddress(fields[5]),\n        value: handleUint(fields[6], \"value\"),\n        data: hexlify(fields[7]),\n        accessList: handleAccessList(fields[8], \"accessList\"),\n    };\n    // Unsigned EIP-1559 Transaction\n    if (fields.length === 9) {\n        return tx;\n    }\n    tx.hash = keccak256(data);\n    _parseEipSignature(tx, fields.slice(9));\n    return tx;\n}\nfunction _serializeEip1559(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId || 0, \"chainId\"),\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to) : \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n        (formatAccessList(tx.accessList || []))\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n    return concat([\"0x02\", encodeRlp(fields)]);\n}\nfunction _parseEip2930(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", hexlify(data));\n    const tx = {\n        type: 1,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        gasPrice: handleUint(fields[2], \"gasPrice\"),\n        gasLimit: handleUint(fields[3], \"gasLimit\"),\n        to: handleAddress(fields[4]),\n        value: handleUint(fields[5], \"value\"),\n        data: hexlify(fields[6]),\n        accessList: handleAccessList(fields[7], \"accessList\")\n    };\n    // Unsigned EIP-2930 Transaction\n    if (fields.length === 8) {\n        return tx;\n    }\n    tx.hash = keccak256(data);\n    _parseEipSignature(tx, fields.slice(8));\n    return tx;\n}\nfunction _serializeEip2930(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId || 0, \"chainId\"),\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to) : \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n        (formatAccessList(tx.accessList || []))\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n    return concat([\"0x01\", encodeRlp(fields)]);\n}\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\nexport class Transaction {\n    #type;\n    #to;\n    #data;\n    #nonce;\n    #gasLimit;\n    #gasPrice;\n    #maxPriorityFeePerGas;\n    #maxFeePerGas;\n    #value;\n    #chainId;\n    #sig;\n    #accessList;\n    /**\n     *  The transaction type.\n     *\n     *  If null, the type will be automatically inferred based on\n     *  explicit properties.\n     */\n    get type() { return this.#type; }\n    set type(value) {\n        switch (value) {\n            case null:\n                this.#type = null;\n                break;\n            case 0:\n            case \"legacy\":\n                this.#type = 0;\n                break;\n            case 1:\n            case \"berlin\":\n            case \"eip-2930\":\n                this.#type = 1;\n                break;\n            case 2:\n            case \"london\":\n            case \"eip-1559\":\n                this.#type = 2;\n                break;\n            default:\n                assertArgument(false, \"unsupported transaction type\", \"type\", value);\n        }\n    }\n    /**\n     *  The name of the transaction type.\n     */\n    get typeName() {\n        switch (this.type) {\n            case 0: return \"legacy\";\n            case 1: return \"eip-2930\";\n            case 2: return \"eip-1559\";\n        }\n        return null;\n    }\n    /**\n     *  The ``to`` address for the transaction or ``null`` if the\n     *  transaction is an ``init`` transaction.\n     */\n    get to() { return this.#to; }\n    set to(value) {\n        this.#to = (value == null) ? null : getAddress(value);\n    }\n    /**\n     *  The transaction nonce.\n     */\n    get nonce() { return this.#nonce; }\n    set nonce(value) { this.#nonce = getNumber(value, \"value\"); }\n    /**\n     *  The gas limit.\n     */\n    get gasLimit() { return this.#gasLimit; }\n    set gasLimit(value) { this.#gasLimit = getBigInt(value); }\n    /**\n     *  The gas price.\n     *\n     *  On legacy networks this defines the fee that will be paid. On\n     *  EIP-1559 networks, this should be ``null``.\n     */\n    get gasPrice() {\n        const value = this.#gasPrice;\n        if (value == null && (this.type === 0 || this.type === 1)) {\n            return BN_0;\n        }\n        return value;\n    }\n    set gasPrice(value) {\n        this.#gasPrice = (value == null) ? null : getBigInt(value, \"gasPrice\");\n    }\n    /**\n     *  The maximum priority fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxPriorityFeePerGas() {\n        const value = this.#maxPriorityFeePerGas;\n        if (value == null) {\n            if (this.type === 2) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxPriorityFeePerGas(value) {\n        this.#maxPriorityFeePerGas = (value == null) ? null : getBigInt(value, \"maxPriorityFeePerGas\");\n    }\n    /**\n     *  The maximum total fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxFeePerGas() {\n        const value = this.#maxFeePerGas;\n        if (value == null) {\n            if (this.type === 2) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxFeePerGas(value) {\n        this.#maxFeePerGas = (value == null) ? null : getBigInt(value, \"maxFeePerGas\");\n    }\n    /**\n     *  The transaction data. For ``init`` transactions this is the\n     *  deployment code.\n     */\n    get data() { return this.#data; }\n    set data(value) { this.#data = hexlify(value); }\n    /**\n     *  The amount of ether (in wei) to send in this transactions.\n     */\n    get value() { return this.#value; }\n    set value(value) {\n        this.#value = getBigInt(value, \"value\");\n    }\n    /**\n     *  The chain ID this transaction is valid on.\n     */\n    get chainId() { return this.#chainId; }\n    set chainId(value) { this.#chainId = getBigInt(value); }\n    /**\n     *  If signed, the signature for this transaction.\n     */\n    get signature() { return this.#sig || null; }\n    set signature(value) {\n        this.#sig = (value == null) ? null : Signature.from(value);\n    }\n    /**\n     *  The access list.\n     *\n     *  An access list permits discounted (but pre-paid) access to\n     *  bytecode and state variable access within contract execution.\n     */\n    get accessList() {\n        const value = this.#accessList || null;\n        if (value == null) {\n            if (this.type === 1 || this.type === 2) {\n                return [];\n            }\n            return null;\n        }\n        return value;\n    }\n    set accessList(value) {\n        this.#accessList = (value == null) ? null : accessListify(value);\n    }\n    /**\n     *  Creates a new Transaction with default values.\n     */\n    constructor() {\n        this.#type = null;\n        this.#to = null;\n        this.#nonce = 0;\n        this.#gasLimit = BigInt(0);\n        this.#gasPrice = null;\n        this.#maxPriorityFeePerGas = null;\n        this.#maxFeePerGas = null;\n        this.#data = \"0x\";\n        this.#value = BigInt(0);\n        this.#chainId = BigInt(0);\n        this.#sig = null;\n        this.#accessList = null;\n    }\n    /**\n     *  The transaction hash, if signed. Otherwise, ``null``.\n     */\n    get hash() {\n        if (this.signature == null) {\n            return null;\n        }\n        return keccak256(this.serialized);\n    }\n    /**\n     *  The pre-image hash of this transaction.\n     *\n     *  This is the digest that a [[Signer]] must sign to authorize\n     *  this transaction.\n     */\n    get unsignedHash() {\n        return keccak256(this.unsignedSerialized);\n    }\n    /**\n     *  The sending address, if signed. Otherwise, ``null``.\n     */\n    get from() {\n        if (this.signature == null) {\n            return null;\n        }\n        return recoverAddress(this.unsignedHash, this.signature);\n    }\n    /**\n     *  The public key of the sender, if signed. Otherwise, ``null``.\n     */\n    get fromPublicKey() {\n        if (this.signature == null) {\n            return null;\n        }\n        return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n    }\n    /**\n     *  Returns true if signed.\n     *\n     *  This provides a Type Guard that properties requiring a signed\n     *  transaction are non-null.\n     */\n    isSigned() {\n        //isSigned(): this is SignedTransaction {\n        return this.signature != null;\n    }\n    /**\n     *  The serialized transaction.\n     *\n     *  This throws if the transaction is unsigned. For the pre-image,\n     *  use [[unsignedSerialized]].\n     */\n    get serialized() {\n        assert(this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n        switch (this.inferType()) {\n            case 0:\n                return _serializeLegacy(this, this.signature);\n            case 1:\n                return _serializeEip2930(this, this.signature);\n            case 2:\n                return _serializeEip1559(this, this.signature);\n        }\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n    }\n    /**\n     *  The transaction pre-image.\n     *\n     *  The hash of this is the digest which needs to be signed to\n     *  authorize this transaction.\n     */\n    get unsignedSerialized() {\n        switch (this.inferType()) {\n            case 0:\n                return _serializeLegacy(this);\n            case 1:\n                return _serializeEip2930(this);\n            case 2:\n                return _serializeEip1559(this);\n        }\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".unsignedSerialized\" });\n    }\n    /**\n     *  Return the most \"likely\" type; currently the highest\n     *  supported transaction type.\n     */\n    inferType() {\n        return (this.inferTypes().pop());\n    }\n    /**\n     *  Validates the explicit properties and returns a list of compatible\n     *  transaction types.\n     */\n    inferTypes() {\n        // Checks that there are no conflicting properties set\n        const hasGasPrice = this.gasPrice != null;\n        const hasFee = (this.maxFeePerGas != null || this.maxPriorityFeePerGas != null);\n        const hasAccessList = (this.accessList != null);\n        //if (hasGasPrice && hasFee) {\n        //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n        //}\n        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n            assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", { value: this });\n        }\n        //if (this.type === 2 && hasGasPrice) {\n        //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n        //}\n        assert(!hasFee || (this.type !== 0 && this.type !== 1), \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", { value: this });\n        assert(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", { value: this });\n        const types = [];\n        // Explicit type\n        if (this.type != null) {\n            types.push(this.type);\n        }\n        else {\n            if (hasFee) {\n                types.push(2);\n            }\n            else if (hasGasPrice) {\n                types.push(1);\n                if (!hasAccessList) {\n                    types.push(0);\n                }\n            }\n            else if (hasAccessList) {\n                types.push(1);\n                types.push(2);\n            }\n            else {\n                types.push(0);\n                types.push(1);\n                types.push(2);\n            }\n        }\n        types.sort();\n        return types;\n    }\n    /**\n     *  Returns true if this transaction is a legacy transaction (i.e.\n     *  ``type === 0``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLegacy() {\n        return (this.type === 0);\n    }\n    /**\n     *  Returns true if this transaction is berlin hardform transaction (i.e.\n     *  ``type === 1``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isBerlin() {\n        return (this.type === 1);\n    }\n    /**\n     *  Returns true if this transaction is london hardform transaction (i.e.\n     *  ``type === 2``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLondon() {\n        return (this.type === 2);\n    }\n    /**\n     *  Create a copy of this transaciton.\n     */\n    clone() {\n        return Transaction.from(this);\n    }\n    /**\n     *  Return a JSON-friendly object.\n     */\n    toJSON() {\n        const s = (v) => {\n            if (v == null) {\n                return null;\n            }\n            return v.toString();\n        };\n        return {\n            type: this.type,\n            to: this.to,\n            //            from: this.from,\n            data: this.data,\n            nonce: this.nonce,\n            gasLimit: s(this.gasLimit),\n            gasPrice: s(this.gasPrice),\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n            maxFeePerGas: s(this.maxFeePerGas),\n            value: s(this.value),\n            chainId: s(this.chainId),\n            sig: this.signature ? this.signature.toJSON() : null,\n            accessList: this.accessList\n        };\n    }\n    /**\n     *  Create a **Transaction** from a serialized transaction or a\n     *  Transaction-like object.\n     */\n    static from(tx) {\n        if (tx == null) {\n            return new Transaction();\n        }\n        if (typeof (tx) === \"string\") {\n            const payload = getBytes(tx);\n            if (payload[0] >= 0x7f) { // @TODO: > vs >= ??\n                return Transaction.from(_parseLegacy(payload));\n            }\n            switch (payload[0]) {\n                case 1: return Transaction.from(_parseEip2930(payload));\n                case 2: return Transaction.from(_parseEip1559(payload));\n            }\n            assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \"from\" });\n        }\n        const result = new Transaction();\n        if (tx.type != null) {\n            result.type = tx.type;\n        }\n        if (tx.to != null) {\n            result.to = tx.to;\n        }\n        if (tx.nonce != null) {\n            result.nonce = tx.nonce;\n        }\n        if (tx.gasLimit != null) {\n            result.gasLimit = tx.gasLimit;\n        }\n        if (tx.gasPrice != null) {\n            result.gasPrice = tx.gasPrice;\n        }\n        if (tx.maxPriorityFeePerGas != null) {\n            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n        }\n        if (tx.maxFeePerGas != null) {\n            result.maxFeePerGas = tx.maxFeePerGas;\n        }\n        if (tx.data != null) {\n            result.data = tx.data;\n        }\n        if (tx.value != null) {\n            result.value = tx.value;\n        }\n        if (tx.chainId != null) {\n            result.chainId = tx.chainId;\n        }\n        if (tx.signature != null) {\n            result.signature = Signature.from(tx.signature);\n        }\n        if (tx.accessList != null) {\n            result.accessList = tx.accessList;\n        }\n        if (tx.hash != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define hash\", \"tx\", tx);\n            assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n        }\n        if (tx.from != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define from\", \"tx\", tx);\n            assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=transaction.js.map","//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue, assertArgument } from \"../utils/index.js\";\nimport { id } from \"./id.js\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n;\n;\nfunction hexPadRight(value) {\n    const bytes = getBytes(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return concat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\nfunction checkString(key) {\n    return function (value) {\n        assertArgument(typeof (value) === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function (_value) {\n        const value = getBigInt(_value, \"domain.chainId\");\n        assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n        if (Number.isSafeInteger(value)) {\n            return Number(value);\n        }\n        return toQuantity(value);\n    },\n    verifyingContract: function (value) {\n        try {\n            return getAddress(value).toLowerCase();\n        }\n        catch (error) { }\n        assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function (value) {\n        const bytes = getBytes(value, \"domain.salt\");\n        assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n        return hexlify(bytes);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n            const width = parseInt(match[2] || \"256\");\n            assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && (match[2] == null || match[2] === String(width)), \"invalid numeric width\", \"type\", type);\n            const boundsUpper = mask(BN_MAX_UINT256, signed ? (width - 1) : width);\n            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1) : BN_0;\n            return function (_value) {\n                const value = getBigInt(_value, \"value\");\n                assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\n                return toBeHex(signed ? toTwos(value, 256) : value, 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n            return function (value) {\n                const bytes = getBytes(value);\n                assertArgument(bytes.length === width, `invalid length for ${type}`, \"value\", value);\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch (type) {\n        case \"address\": return function (value) {\n            return zeroPadValue(getAddress(value), 32);\n        };\n        case \"bool\": return function (value) {\n            return ((!value) ? hexFalse : hexTrue);\n        };\n        case \"bytes\": return function (value) {\n            return keccak256(value);\n        };\n        case \"string\": return function (value) {\n            return id(value);\n        };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\n}\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nexport class TypedDataEncoder {\n    /**\n     *  The primary type for the structured [[types]].\n     *\n     *  This is derived automatically from the [[types]], since no\n     *  recursion is possible, once the DAG for the types is consturcted\n     *  internally, the primary type must be the only remaining type with\n     *  no parent nodes.\n     */\n    primaryType;\n    #types;\n    /**\n     *  The types.\n     */\n    get types() {\n        return JSON.parse(this.#types);\n    }\n    #fullTypes;\n    #encoderCache;\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     *\n     *  This performs all necessary checking that types are valid and\n     *  do not violate the [[link-eip-712]] structural constraints as\n     *  well as computes the [[primaryType]].\n     */\n    constructor(types) {\n        this.#types = JSON.stringify(types);\n        this.#fullTypes = new Map();\n        this.#encoderCache = new Map();\n        // Link struct types to their direct child structs\n        const links = new Map();\n        // Link structs to structs which contain them as a child\n        const parents = new Map();\n        // Link all subtypes within a given struct\n        const subtypes = new Map();\n        Object.keys(types).forEach((type) => {\n            links.set(type, new Set());\n            parents.set(type, []);\n            subtypes.set(type, new Set());\n        });\n        for (const name in types) {\n            const uniqueNames = new Set();\n            for (const field of types[name]) {\n                // Check each field has a unique name\n                assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n                uniqueNames.add(field.name);\n                // Get the base type (drop any array specifiers)\n                const baseType = (field.type.match(/^([^\\x5b]*)(\\x5b|$)/))[1] || null;\n                assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    continue;\n                }\n                assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n                // Add linkage\n                parents.get(baseType).push(name);\n                links.get(name).add(baseType);\n            }\n        }\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n) => (parents.get(n).length === 0));\n        assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", types);\n        assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", types);\n        defineProperties(this, { primaryType: primaryTypes[0] });\n        // Check for circular type references\n        function checkCircular(type, found) {\n            assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            found.add(type);\n            for (const child of links.get(type)) {\n                if (!parents.has(child)) {\n                    continue;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                for (const subtype of found) {\n                    subtypes.get(subtype).add(child);\n                }\n            }\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n        // Compute each fully describe type\n        for (const [name, set] of subtypes) {\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\"));\n        }\n    }\n    /**\n     *  Returnthe encoder for the specific %%type%%.\n     */\n    getEncoder(type) {\n        let encoder = this.#encoderCache.get(type);\n        if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n        }\n        return encoder;\n    }\n    #getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            return (value) => {\n                assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n                let result = value.map(subEncoder);\n                if (this.#fullTypes.has(subtype)) {\n                    result = result.map(keccak256);\n                }\n                return keccak256(concat(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this.#fullTypes.get(type));\n            return (value) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this.#fullTypes.has(type)) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return concat(values);\n            };\n        }\n        assertArgument(false, `unknown type: ${type}`, \"type\", type);\n    }\n    /**\n     *  Return the full type for %%name%%.\n     */\n    encodeType(name) {\n        const result = this.#fullTypes.get(name);\n        assertArgument(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        return result;\n    }\n    /**\n     *  Return the encoded %%value%% for the %%type%%.\n     */\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    /**\n     *  Returns the hash of %%value%% for the type of %%name%%.\n     */\n    hashStruct(name, value) {\n        return keccak256(this.encodeData(name, value));\n    }\n    /**\n     *  Return the fulled encoded %%value%% for the [[types]].\n     */\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    /**\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\n     */\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    /**\n     *  @_ignore:\n     */\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            assertArgument(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, \"value\", value);\n            return value.map((v) => this._visit(match[1], v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        assertArgument(false, `unknown type: ${type}`, \"type\", type);\n    }\n    /**\n     *  Call %%calback%% for each value in %%value%%, passing the type and\n     *  component within %%value%%.\n     *\n     *  This is useful for replacing addresses or other transformation that\n     *  may be desired on each component, based on its type.\n     */\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     */\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    /**\n     *  Return the primary type for %%types%%.\n     */\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    /**\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n     */\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    /**\n     *  Return the domain hash for %%domain%%.\n     */\n    static hashDomain(domain) {\n        const domainFields = [];\n        for (const name in domain) {\n            if (domain[name] == null) {\n                continue;\n            }\n            const type = domainFieldTypes[name];\n            assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            domainFields.push({ name, type });\n        }\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n    /**\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static encode(domain, types, value) {\n        return concat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    /**\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static hash(domain, types, value) {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    /**\n     * Resolves to the value from resolving all addresses in %%value%% for\n     * %%types%% and the %%domain%%.\n     */\n    static async resolveNames(domain, types, value, resolveName) {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({}, domain);\n        // Allow passing null to ignore value\n        for (const key in domain) {\n            if (domain[key] == null) {\n                delete domain[key];\n            }\n        }\n        // Look up all ENS names\n        const ensCache = {};\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n        // Get a list of all the addresses\n        encoder.visit(value, (type, value) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type, value) => {\n            if (type === \"address\" && ensCache[value]) {\n                return ensCache[value];\n            }\n            return value;\n        });\n        return { domain, value };\n    }\n    /**\n     *  Returns the JSON-encoded payload expected by nodes which implement\n     *  the JSON-RPC [[link-eip-712]] method.\n     */\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name) => {\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = Object.assign({}, types);\n        assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        typesWithDomain.EIP712Domain = domainTypes;\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(getBytes(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return getBigInt(value).toString();\n                }\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        assertArgument(typeof (value) === \"string\", \"invalid string\", \"value\", value);\n                        return value;\n                }\n                assertArgument(false, \"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain, types, value, signature) {\n    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}\n//# sourceMappingURL=typed-data.js.map","/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\nimport { copyRequest } from \"./provider.js\";\nfunction checkProvider(signer, operation) {\n    if (signer.provider) {\n        return signer.provider;\n    }\n    assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\n}\nasync function populate(signer, tx) {\n    let pop = copyRequest(tx);\n    if (pop.to != null) {\n        pop.to = resolveAddress(pop.to, signer);\n    }\n    if (pop.from != null) {\n        const from = pop.from;\n        pop.from = Promise.all([\n            signer.getAddress(),\n            resolveAddress(from, signer)\n        ]).then(([address, from]) => {\n            assertArgument(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\n            return address;\n        });\n    }\n    else {\n        pop.from = signer.getAddress();\n    }\n    return await resolveProperties(pop);\n}\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */\nexport class AbstractSigner {\n    /**\n     *  The provider this signer is connected to.\n     */\n    provider;\n    /**\n     *  Creates a new Signer connected to %%provider%%.\n     */\n    constructor(provider) {\n        defineProperties(this, { provider: (provider || null) });\n    }\n    async getNonce(blockTag) {\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n    }\n    async populateCall(tx) {\n        const pop = await populate(this, tx);\n        return pop;\n    }\n    async populateTransaction(tx) {\n        const provider = checkProvider(this, \"populateTransaction\");\n        const pop = await populate(this, tx);\n        if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n        }\n        if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n        }\n        // Populate the chain ID\n        const network = await (this.provider).getNetwork();\n        if (pop.chainId != null) {\n            const chainId = getBigInt(pop.chainId);\n            assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n        }\n        else {\n            pop.chainId = network.chainId;\n        }\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n        }\n        else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n        }\n        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            pop.type = 2;\n        }\n        else if (pop.type === 0 || pop.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n            assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\"\n            });\n            // Populate missing gasPrice\n            if (pop.gasPrice == null) {\n                pop.gasPrice = feeData.gasPrice;\n            }\n        }\n        else {\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n            if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n                    // Upgrade transaction from null to eip-1559\n                    pop.type = 2;\n                    if (pop.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = pop.gasPrice;\n                        delete pop.gasPrice;\n                        pop.maxFeePerGas = gasPrice;\n                        pop.maxPriorityFeePerGas = gasPrice;\n                    }\n                    else {\n                        // Populate missing fee data\n                        if (pop.maxFeePerGas == null) {\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\n                        }\n                        if (pop.maxPriorityFeePerGas == null) {\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                        }\n                    }\n                }\n                else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n                    // ...but they are trying to use EIP-1559 properties\n                    assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"populateTransaction\"\n                    });\n                    // Populate missing fee data\n                    if (pop.gasPrice == null) {\n                        pop.gasPrice = feeData.gasPrice;\n                    }\n                    // Explicitly set untyped transaction to legacy\n                    // @TODO: Maybe this shold allow type 1?\n                    pop.type = 0;\n                }\n                else {\n                    // getFeeData has failed us.\n                    assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"signer.getFeeData\"\n                    });\n                }\n            }\n            else if (pop.type === 2) {\n                // Explicitly using EIP-1559\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                }\n                if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n            }\n        }\n        //@TOOD: Don't await all over the place; save them up for\n        // the end for better batching\n        return await resolveProperties(pop);\n    }\n    async estimateGas(tx) {\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n    }\n    async call(tx) {\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\n    }\n    async resolveName(name) {\n        const provider = checkProvider(this, \"resolveName\");\n        return await provider.resolveName(name);\n    }\n    async sendTransaction(tx) {\n        const provider = checkProvider(this, \"sendTransaction\");\n        const pop = await this.populateTransaction(tx);\n        delete pop.from;\n        const txObj = Transaction.from(pop);\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\n    }\n}\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */\nexport class VoidSigner extends AbstractSigner {\n    /**\n     *  The signer address.\n     */\n    address;\n    /**\n     *  Creates a new **VoidSigner** with %%address%% attached to\n     *  %%provider%%.\n     */\n    constructor(address, provider) {\n        super(provider);\n        defineProperties(this, { address });\n    }\n    async getAddress() { return this.address; }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n    #throwUnsupported(suffix, operation) {\n        assert(false, `VoidSigner cannot sign ${suffix}`, \"UNSUPPORTED_OPERATION\", { operation });\n    }\n    async signTransaction(tx) {\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\n    }\n    async signMessage(message) {\n        this.#throwUnsupported(\"messages\", \"signMessage\");\n    }\n    async signTypedData(domain, types, value) {\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n    }\n}\n//# sourceMappingURL=abstract-signer.js.map","//import { resolveAddress } from \"@ethersproject/address\";\nimport { defineProperties, getBigInt, getNumber, hexlify, resolveProperties, assert, assertArgument, isError, makeError } from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nconst BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n    if (value == null) {\n        return null;\n    }\n    return value;\n}\nfunction toJson(value) {\n    if (value == null) {\n        return null;\n    }\n    return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport class FeeData {\n    /**\n     *  The gas price for legacy networks.\n     */\n    gasPrice;\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    maxFeePerGas;\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    maxPriorityFeePerGas;\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */\n    constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n        defineProperties(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON() {\n        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\n        };\n    }\n}\n;\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */\nexport function copyRequest(req) {\n    const result = {};\n    // These could be addresses, ENS names or Addressables\n    if (req.to) {\n        result.to = req.to;\n    }\n    if (req.from) {\n        result.from = req.from;\n    }\n    if (req.data) {\n        result.data = hexlify(req.data);\n    }\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys) {\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = getBigInt(req[key], `request.${key}`);\n    }\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys) {\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = getNumber(req[key], `request.${key}`);\n    }\n    if (req.accessList) {\n        result.accessList = accessListify(req.accessList);\n    }\n    if (\"blockTag\" in req) {\n        result.blockTag = req.blockTag;\n    }\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipRead = !!req.enableCcipRead;\n    }\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n    return result;\n}\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nexport class Block {\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    number;\n    /**\n     *  The block hash.\n     *\n     *  This hash includes all properties, so can be safely used to identify\n     *  an exact set of block properties.\n     */\n    hash;\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    timestamp;\n    /**\n     *  The block hash of the parent block.\n     */\n    parentHash;\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    nonce;\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    difficulty;\n    /**\n     *  The total gas limit for this block.\n     */\n    gasLimit;\n    /**\n     *  The total gas used in this block.\n     */\n    gasUsed;\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    miner;\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    extraData;\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    baseFeePerGas;\n    #transactions;\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */\n    constructor(block, provider) {\n        this.#transactions = block.transactions.map((tx) => {\n            if (typeof (tx) !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        });\n        defineProperties(this, {\n            provider,\n            hash: getValue(block.hash),\n            number: block.number,\n            timestamp: block.timestamp,\n            parentHash: block.parentHash,\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            miner: block.miner,\n            extraData: block.extraData,\n            baseFeePerGas: getValue(block.baseFeePerGas)\n        });\n    }\n    /**\n     *  Returns the list of transaction hashes, in the order\n     *  they were executed within the block.\n     */\n    get transactions() {\n        return this.#transactions.map((tx) => {\n            if (typeof (tx) === \"string\") {\n                return tx;\n            }\n            return tx.hash;\n        });\n    }\n    /**\n     *  Returns the complete transactions, in the order they\n     *  were executed within the block.\n     *\n     *  This is only available for blocks which prefetched\n     *  transactions, by passing ``true`` to %%prefetchTxs%%\n     *  into [[Provider-getBlock]].\n     */\n    get prefetchedTransactions() {\n        const txs = this.#transactions.slice();\n        // Doesn't matter...\n        if (txs.length === 0) {\n            return [];\n        }\n        // Make sure we prefetched the transactions\n        assert(typeof (txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n        return txs;\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON() {\n        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, nonce, number, parentHash, timestamp, transactions } = this;\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            hash, miner, nonce, number, parentHash, timestamp,\n            transactions,\n        };\n    }\n    [Symbol.iterator]() {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return {\n                        value: txs[index++], done: false\n                    };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    /**\n     *  The number of transactions in this block.\n     */\n    get length() { return this.#transactions.length; }\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n    get date() {\n        if (this.timestamp == null) {\n            return null;\n        }\n        return new Date(this.timestamp * 1000);\n    }\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n    async getTransaction(indexOrHash) {\n        // Find the internal value by its index or hash\n        let tx = undefined;\n        if (typeof (indexOrHash) === \"number\") {\n            tx = this.#transactions[indexOrHash];\n        }\n        else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of this.#transactions) {\n                if (typeof (v) === \"string\") {\n                    if (v !== hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                }\n                else {\n                    if (v.hash === hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) {\n            throw new Error(\"no such tx\");\n        }\n        if (typeof (tx) === \"string\") {\n            return (await this.provider.getTransaction(tx));\n        }\n        else {\n            return tx;\n        }\n    }\n    /**\n     *  If a **Block** was fetched with a request to include the transactions\n     *  this will allow synchronous access to those transactions.\n     *\n     *  If the transactions were not prefetched, this will throw.\n     */\n    getPrefetchedTransaction(indexOrHash) {\n        const txs = this.prefetchedTransactions;\n        if (typeof (indexOrHash) === \"number\") {\n            return txs[indexOrHash];\n        }\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs) {\n            if (tx.hash === indexOrHash) {\n                return tx;\n            }\n        }\n        assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n    /**\n     *  Returns true if this block been mined. This provides a type guard\n     *  for all properties on a [[MinedBlock]].\n     */\n    isMined() { return !!this.hash; }\n    /**\n     *  Returns true if this block is an [[link-eip-2930]] block.\n     */\n    isLondon() {\n        return !!this.baseFeePerGas;\n    }\n    /**\n     *  @_ignore:\n     */\n    orphanedEvent() {\n        if (!this.isMined()) {\n            throw new Error(\"\");\n        }\n        return createOrphanedBlockFilter(this);\n    }\n}\n//////////////////////\n// Log\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */\nexport class Log {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The transaction hash of the transaction this log occurred in. Use the\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n     */\n    transactionHash;\n    /**\n     *  The block hash of the block this log occurred in. Use the\n     *  [[Log-getBlock]] to get the [[Block]].\n     */\n    blockHash;\n    /**\n     *  The block number of the block this log occurred in. It is preferred\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\n     *  since in the case of an orphaned block, the block at that height may\n     *  have changed.\n     */\n    blockNumber;\n    /**\n     *  If the **Log** represents a block that was removed due to an orphaned\n     *  block, this will be true.\n     *\n     *  This can only happen within an orphan event listener.\n     */\n    removed;\n    /**\n     *  The address of the contract that emitted this log.\n     */\n    address;\n    /**\n     *  The data included in this log when it was emitted.\n     */\n    data;\n    /**\n     *  The indexed topics included in this log when it was emitted.\n     *\n     *  All topics are included in the bloom filters, so they can be\n     *  efficiently filtered using the [[Provider-getLogs]] method.\n     */\n    topics;\n    /**\n     *  The index within the block this log occurred at. This is generally\n     *  not useful to developers, but can be used with the various roots\n     *  to proof inclusion within a block.\n     */\n    index;\n    /**\n     *  The index within the transaction of this log.\n     */\n    transactionIndex;\n    /**\n     *  @_ignore:\n     */\n    constructor(log, provider) {\n        this.provider = provider;\n        const topics = Object.freeze(log.topics.slice());\n        defineProperties(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            removed: log.removed,\n            address: log.address,\n            data: log.data,\n            topics,\n            index: log.index,\n            transactionIndex: log.transactionIndex,\n        });\n    }\n    /**\n     *  Returns a JSON-compatible object.\n     */\n    toJSON() {\n        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;\n        return {\n            _type: \"log\",\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        };\n    }\n    /**\n     *  Returns the block that this log occurred in.\n     */\n    async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return block;\n    }\n    /**\n     *  Returns the transaction that this log occurred in.\n     */\n    async getTransaction() {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return tx;\n    }\n    /**\n     *  Returns the transaction receipt fot the transaction that this\n     *  log occurred in.\n     */\n    async getTransactionReceipt() {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n        return receipt;\n    }\n    /**\n     *  @_ignore:\n     */\n    removedEvent() {\n        return createRemovedLogFilter(this);\n    }\n}\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n/**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */\nexport class TransactionReceipt {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The address the transaction was sent to.\n     */\n    to;\n    /**\n     *  The sender of the transaction.\n     */\n    from;\n    /**\n     *  The address of the contract if the transaction was directly\n     *  responsible for deploying one.\n     *\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\n     *  was successfully executed as initcode.\n     */\n    contractAddress;\n    /**\n     *  The transaction hash.\n     */\n    hash;\n    /**\n     *  The index of this transaction within the block transactions.\n     */\n    index;\n    /**\n     *  The block hash of the [[Block]] this transaction was included in.\n     */\n    blockHash;\n    /**\n     *  The block number of the [[Block]] this transaction was included in.\n     */\n    blockNumber;\n    /**\n     *  The bloom filter bytes that represent all logs that occurred within\n     *  this transaction. This is generally not useful for most developers,\n     *  but can be used to validate the included logs.\n     */\n    logsBloom;\n    /**\n     *  The actual amount of gas used by this transaction.\n     *\n     *  When creating a transaction, the amount of gas that will be used can\n     *  only be approximated, but the sender must pay the gas fee for the\n     *  entire gas limit. After the transaction, the difference is refunded.\n     */\n    gasUsed;\n    /**\n     *  The amount of gas used by all transactions within the block for this\n     *  and all transactions with a lower ``index``.\n     *\n     *  This is generally not useful for developers but can be used to\n     *  validate certain aspects of execution.\n     */\n    cumulativeGasUsed;\n    /**\n     *  The actual gas price used during execution.\n     *\n     *  Due to the complexity of [[link-eip-1559]] this value can only\n     *  be caluclated after the transaction has been mined, snce the base\n     *  fee is protocol-enforced.\n     */\n    gasPrice;\n    /**\n     *  The [[link-eip-2718]] transaction type.\n     */\n    type;\n    //readonly byzantium!: boolean;\n    /**\n     *  The status of this transaction, indicating success (i.e. ``1``) or\n     *  a revert (i.e. ``0``).\n     *\n     *  This is available in post-byzantium blocks, but some backends may\n     *  backfill this value.\n     */\n    status;\n    /**\n     *  The root hash of this transaction.\n     *\n     *  This is no present and was only included in pre-byzantium blocks, but\n     *  could be used to validate certain parts of the receipt.\n     */\n    root;\n    #logs;\n    /**\n     *  @_ignore:\n     */\n    constructor(tx, provider) {\n        this.#logs = Object.freeze(tx.logs.map((log) => {\n            return new Log(log, provider);\n        }));\n        let gasPrice = BN_0;\n        if (tx.effectiveGasPrice != null) {\n            gasPrice = tx.effectiveGasPrice;\n        }\n        else if (tx.gasPrice != null) {\n            gasPrice = tx.gasPrice;\n        }\n        defineProperties(this, {\n            provider,\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n            hash: tx.hash,\n            index: tx.index,\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n            logsBloom: tx.logsBloom,\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            gasPrice,\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n    /**\n     *  The logs for this transaction.\n     */\n    get logs() { return this.#logs; }\n    /**\n     *  Returns a JSON-compatible representation.\n     */\n    toJSON() {\n        const { to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom, logs, //byzantium, \n        status, root } = this;\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash, blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash, index, logs, logsBloom, root, status, to\n        };\n    }\n    /**\n     *  @_ignore:\n     */\n    get length() { return this.logs.length; }\n    [Symbol.iterator]() {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return { value: this.logs[index++], done: false };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    /**\n     *  The total fee for this transaction, in wei.\n     */\n    get fee() {\n        return this.gasUsed * this.gasPrice;\n    }\n    /**\n     *  Resolves to the block this transaction occurred in.\n     */\n    async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to the transaction this transaction occurred in.\n     */\n    async getTransaction() {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) {\n            throw new Error(\"TODO\");\n        }\n        return tx;\n    }\n    /**\n     *  Resolves to the return value of the execution of this transaction.\n     *\n     *  Support for this feature is limited, as it requires an archive node\n     *  with the ``debug_`` or ``trace_`` API enabled.\n     */\n    async getResult() {\n        return (await this.provider.getTransactionResult(this.hash));\n    }\n    /**\n     *  Resolves to the number of confirmations this transaction has.\n     */\n    async confirmations() {\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n    }\n    /**\n     *  @_ignore:\n     */\n    removedEvent() {\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  @_ignore:\n     */\n    reorderedEvent(other) {\n        assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n}\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */\nexport class TransactionResponse {\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    provider;\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    blockNumber;\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    blockHash;\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    index;\n    /**\n     *  The transaction hash.\n     */\n    hash;\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    type;\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    to;\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    from;\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    nonce;\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    gasLimit;\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    gasPrice;\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    maxPriorityFeePerGas;\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    maxFeePerGas;\n    /**\n     *  The data.\n     */\n    data;\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    value;\n    /**\n     *  The chain ID.\n     */\n    chainId;\n    /**\n     *  The signature.\n     */\n    signature;\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    accessList;\n    #startBlock;\n    /**\n     *  @_ignore:\n     */\n    constructor(tx, provider) {\n        this.provider = provider;\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber : null;\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash : null;\n        this.hash = tx.hash;\n        this.index = tx.index;\n        this.type = tx.type;\n        this.from = tx.from;\n        this.to = tx.to || null;\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas : null;\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas : null;\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n        this.accessList = (tx.accessList != null) ? tx.accessList : null;\n        this.#startBlock = -1;\n    }\n    /**\n     *  Returns a JSON-compatible representation of this transaction.\n     */\n    toJSON() {\n        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList } = this;\n        return {\n            _type: \"TransactionReceipt\",\n            accessList, blockNumber, blockHash,\n            chainId: toJson(this.chainId),\n            data, from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            nonce, signature, to, index, type,\n            value: toJson(this.value),\n        };\n    }\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */\n    async getBlock() {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) {\n                blockNumber = tx.blockNumber;\n            }\n        }\n        if (blockNumber == null) {\n            return null;\n        }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */\n    async getTransaction() {\n        return this.provider.getTransaction(this.hash);\n    }\n    /**\n     *  Resolve to the number of confirmations this transaction has.\n     */\n    async confirmations() {\n        if (this.blockNumber == null) {\n            const { tx, blockNumber } = await resolveProperties({\n                tx: this.getTransaction(),\n                blockNumber: this.provider.getBlockNumber()\n            });\n            // Not mined yet...\n            if (tx == null || tx.blockNumber == null) {\n                return 0;\n            }\n            return blockNumber - tx.blockNumber + 1;\n        }\n        const blockNumber = await this.provider.getBlockNumber();\n        return blockNumber - this.blockNumber + 1;\n    }\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(_confirms, _timeout) {\n        const confirms = (_confirms == null) ? 1 : _confirms;\n        const timeout = (_timeout == null) ? 0 : _timeout;\n        let startBlock = this.#startBlock;\n        let nextScan = -1;\n        let stopScanning = (startBlock === -1) ? true : false;\n        const checkReplacement = async () => {\n            // Get the current transaction count for this sender\n            if (stopScanning) {\n                return null;\n            }\n            const { blockNumber, nonce } = await resolveProperties({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n            // We were mined; no replacement\n            if (stopScanning) {\n                return null;\n            }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) {\n                return;\n            }\n            // We were replaced; start scanning for that transaction\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < this.#startBlock) {\n                    nextScan = this.#startBlock;\n                }\n            }\n            while (nextScan <= blockNumber) {\n                // Get the next block to scan\n                if (stopScanning) {\n                    return null;\n                }\n                const block = await this.provider.getBlock(nextScan, true);\n                // This should not happen; but we'll try again shortly\n                if (block == null) {\n                    return;\n                }\n                // We were mined; no replacement\n                for (const hash of block) {\n                    if (hash === this.hash) {\n                        return;\n                    }\n                }\n                // Search for the transaction that replaced us\n                for (let i = 0; i < block.length; i++) {\n                    const tx = await block.getTransaction(i);\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) {\n                            return null;\n                        }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) {\n                            return;\n                        }\n                        // We will retry this on the next block (this case could be optimized)\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) {\n                            return;\n                        }\n                        // The reason we were replaced\n                        let reason = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        }\n                        else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\";\n                        }\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n                nextScan++;\n            }\n            return;\n        };\n        const checkReceipt = (receipt) => {\n            if (receipt == null || receipt.status !== 0) {\n                return receipt;\n            }\n            assert(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\n                action: \"sendTransaction\",\n                data: null, reason: null, invocation: null, revert: null,\n                transaction: {\n                    to: receipt.to,\n                    from: receipt.from,\n                    data: \"\" // @TODO: in v7, split out sendTransaction properties\n                }, receipt\n            });\n        };\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n        if (confirms === 0) {\n            return checkReceipt(receipt);\n        }\n        if (receipt) {\n            if ((await receipt.confirmations()) >= confirms) {\n                return checkReceipt(receipt);\n            }\n        }\n        else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n            // Allow null only when the confirms is 0\n            if (confirms === 0) {\n                return null;\n            }\n        }\n        const waiter = new Promise((resolve, reject) => {\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers = [];\n            const cancel = () => { cancellers.forEach((c) => c()); };\n            // On cancel, stop scanning for replacements\n            cancellers.push(() => { stopScanning = true; });\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(() => {\n                    cancel();\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(() => { clearTimeout(timer); });\n            }\n            const txListener = async (receipt) => {\n                // Done; return it!\n                if ((await receipt.confirmations()) >= confirms) {\n                    cancel();\n                    try {\n                        resolve(checkReceipt(receipt));\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                }\n            };\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async () => {\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n                    }\n                    catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if (isError(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n        return await waiter;\n    }\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */\n    isMined() {\n        return (this.blockHash != null);\n    }\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLegacy() {\n        return (this.type === 0);\n    }\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isBerlin() {\n        return (this.type === 1);\n    }\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLondon() {\n        return (this.type === 2);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */\n    removedEvent() {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */\n    reorderedEvent(other) {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n    replaceableTransaction(startBlock) {\n        assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        tx.#startBlock = startBlock;\n        return tx;\n    }\n}\nfunction createOrphanedBlockFilter(block) {\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n    return { orphan: \"reorder-transaction\", tx, other };\n}\nfunction createRemovedTransactionFilter(tx) {\n    return { orphan: \"drop-transaction\", tx };\n}\nfunction createRemovedLogFilter(log) {\n    return { orphan: \"drop-log\", log: {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            address: log.address,\n            data: log.data,\n            topics: Object.freeze(log.topics.slice()),\n            index: log.index\n        } };\n}\n//# sourceMappingURL=provider.js.map","import { getAddress, resolveAddress } from \"../address/index.js\";\nimport { hashMessage, TypedDataEncoder } from \"../hash/index.js\";\nimport { AbstractSigner } from \"../providers/index.js\";\nimport { computeAddress, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */\nexport class BaseWallet extends AbstractSigner {\n    /**\n     *  The wallet address.\n     */\n    address;\n    #signingKey;\n    /**\n     *  Creates a new BaseWallet for %%privateKey%%, optionally\n     *  connected to %%provider%%.\n     *\n     *  If %%provider%% is not specified, only offline methods can\n     *  be used.\n     */\n    constructor(privateKey, provider) {\n        super(provider);\n        assertArgument(privateKey && typeof (privateKey.sign) === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n        this.#signingKey = privateKey;\n        const address = computeAddress(this.signingKey.publicKey);\n        defineProperties(this, { address });\n    }\n    // Store private values behind getters to reduce visibility\n    // in console.log\n    /**\n     *  The [[SigningKey]] used for signing payloads.\n     */\n    get signingKey() { return this.#signingKey; }\n    /**\n     *  The private key for this wallet.\n     */\n    get privateKey() { return this.signingKey.privateKey; }\n    async getAddress() { return this.address; }\n    connect(provider) {\n        return new BaseWallet(this.#signingKey, provider);\n    }\n    async signTransaction(tx) {\n        // Replace any Addressable or ENS name with an address\n        const { to, from } = await resolveProperties({\n            to: (tx.to ? resolveAddress(tx.to, this.provider) : undefined),\n            from: (tx.from ? resolveAddress(tx.from, this.provider) : undefined)\n        });\n        if (to != null) {\n            tx.to = to;\n        }\n        if (from != null) {\n            tx.from = from;\n        }\n        if (tx.from != null) {\n            assertArgument(getAddress((tx.from)) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\n            delete tx.from;\n        }\n        // Build the transaction\n        const btx = Transaction.from(tx);\n        btx.signature = this.signingKey.sign(btx.unsignedHash);\n        return btx.serialized;\n    }\n    async signMessage(message) {\n        return this.signMessageSync(message);\n    }\n    // @TODO: Add a secialized signTx and signTyped sync that enforces\n    // all parameters are known?\n    /**\n     *  Returns the signature for %%message%% signed with this wallet.\n     */\n    signMessageSync(message) {\n        return this.signingKey.sign(hashMessage(message)).serialized;\n    }\n    async signTypedData(domain, types, value) {\n        // Populate any ENS names\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name) => {\n            // @TODO: this should use resolveName; addresses don't\n            //        need a provider\n            assert(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"resolveName\",\n                info: { name }\n            });\n            const address = await this.provider.resolveName(name);\n            assert(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n                value: name\n            });\n            return address;\n        });\n        return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n    }\n}\n//# sourceMappingURL=base-wallet.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { MessagePrefix } from \"../constants/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, toUtf8Bytes } from \"../utils/index.js\";\n/**\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\n *\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\n *  of %%message%% and computes the [[keccak256]] digest.\n *\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\n *  first. To compute the digest of a [[DataHexString]], it must be converted\n *  to [bytes](getBytes).\n *\n *  @example:\n *    hashMessage(\"Hello World\")\n *    //_result:\n *\n *    // Hashes the SIX (6) string characters, i.e.\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\n *    hashMessage(\"0x4243\")\n *    //_result:\n *\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\n *    hashMessage(getBytes(\"0x4243\"))\n *    //_result:\n *\n *    // ...which is equal to using data\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\n *    //_result:\n *\n */\nexport function hashMessage(message) {\n    if (typeof (message) === \"string\") {\n        message = toUtf8Bytes(message);\n    }\n    return keccak256(concat([\n        toUtf8Bytes(MessagePrefix),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */\nexport function verifyMessage(message, sig) {\n    const digest = hashMessage(message);\n    return recoverAddress(digest, sig);\n}\n//# sourceMappingURL=message.js.map","// NFKC (composed)             // (decomposed)\n/**\n *  A constant for the ether symbol (normalized using NFKC).\n *\n *  (**i.e.** ``\"\\\\u039e\"``)\n */\nexport const EtherSymbol = \"\\u039e\"; // \"\\uD835\\uDF63\";\n/**\n *  A constant for the [[link-eip-191]] personal message prefix.\n *\n *  (**i.e.** ``\"\\\\x19Ethereum Signed Message:\\\\n\"``)\n */\nexport const MessagePrefix = \"\\x19Ethereum Signed Message:\\n\";\n//# sourceMappingURL=strings.js.map","import { assertArgument } from \"../utils/index.js\";\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\nconst Word = /^[a-z]*$/i;\nfunction unfold(words, sep) {\n    let initial = 97;\n    return words.reduce((accum, word) => {\n        if (word === sep) {\n            initial++;\n        }\n        else if (word.match(Word)) {\n            accum.push(String.fromCharCode(initial) + word);\n        }\n        else {\n            initial = 97;\n            accum.push(word);\n        }\n        return accum;\n    }, []);\n}\n/**\n *  @_ignore\n */\nexport function decode(data, subs) {\n    // Replace all the substitutions with their expanded form\n    for (let i = subsChrs.length - 1; i >= 0; i--) {\n        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\n    }\n    // Get all tle clumps; each suffix, first-increment and second-increment\n    const clumps = [];\n    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {\n        if (semi) {\n            for (let i = parseInt(semi); i >= 0; i--) {\n                clumps.push(\";\");\n            }\n        }\n        else {\n            clumps.push(item.toLowerCase());\n        }\n        return \"\";\n    });\n    /* c8 ignore start */\n    if (leftover) {\n        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);\n    }\n    /* c8 ignore stop */\n    return unfold(unfold(clumps, \";\"), \":\");\n}\n/**\n *  @_ignore\n */\nexport function decodeOwl(data) {\n    assertArgument(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\n    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\n}\n//# sourceMappingURL=decode-owl.js.map","import { defineProperties } from \"../utils/index.js\";\n/**\n *  A Wordlist represents a collection of language-specific\n *  words used to encode and devoce [[link-bip-39]] encoded data\n *  by mapping words to 11-bit values and vice versa.\n */\nexport class Wordlist {\n    locale;\n    /**\n     *  Creates a new Wordlist instance.\n     *\n     *  Sub-classes MUST call this if they provide their own constructor,\n     *  passing in the locale string of the language.\n     *\n     *  Generally there is no need to create instances of a Wordlist,\n     *  since each language-specific Wordlist creates an instance and\n     *  there is no state kept internally, so they are safe to share.\n     */\n    constructor(locale) {\n        defineProperties(this, { locale });\n    }\n    /**\n     *  Sub-classes may override this to provide a language-specific\n     *  method for spliting %%phrase%% into individual words.\n     *\n     *  By default, %%phrase%% is split using any sequences of\n     *  white-space as defined by regular expressions (i.e. ``/\\s+/``).\n     */\n    split(phrase) {\n        return phrase.toLowerCase().split(/\\s+/g);\n    }\n    /**\n     *  Sub-classes may override this to provider a language-specific\n     *  method for joining %%words%% into a phrase.\n     *\n     *  By default, %%words%% are joined by a single space.\n     */\n    join(words) {\n        return words.join(\" \");\n    }\n}\n//# sourceMappingURL=wordlist.js.map","// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */\nexport class WordlistOwl extends Wordlist {\n    #data;\n    #checksum;\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n     *  and validated against the %%checksum%%.\n     */\n    constructor(locale, data, checksum) {\n        super(locale);\n        this.#data = data;\n        this.#checksum = checksum;\n        this.#words = null;\n    }\n    /**\n     *  The OWL-encoded data.\n     */\n    get _data() { return this.#data; }\n    /**\n     *  Decode all the words for the wordlist.\n     */\n    _decodeWords() {\n        return decodeOwl(this.#data);\n    }\n    #words;\n    #loadWords() {\n        if (this.#words == null) {\n            const words = this._decodeWords();\n            // Verify the computed list matches the official list\n            const checksum = id(words.join(\"\\n\") + \"\\n\");\n            /* c8 ignore start */\n            if (checksum !== this.#checksum) {\n                throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\n            }\n            /* c8 ignore stop */\n            this.#words = words;\n        }\n        return this.#words;\n    }\n    getWord(index) {\n        const words = this.#loadWords();\n        assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n        return words[index];\n    }\n    getWordIndex(word) {\n        return this.#loadWords().indexOf(word);\n    }\n}\n//# sourceMappingURL=wordlist-owl.js.map","import { WordlistOwl } from \"./wordlist-owl.js\";\nconst words = \"0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO\";\nconst checksum = \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\";\nlet wordlist = null;\n/**\n *  The [[link-bip39-en]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */\nexport class LangEn extends WordlistOwl {\n    /**\n     *  Creates a new instance of the English language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langEn]] should suffice.\n     *\n     *  @_ignore:\n     */\n    constructor() { super(\"en\", words, checksum); }\n    /**\n     *  Returns a singleton instance of a ``LangEn``, creating it\n     *  if this is the first time being called.\n     */\n    static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangEn();\n        }\n        return wordlist;\n    }\n}\n//# sourceMappingURL=lang-en.js.map","import { pbkdf2, sha256 } from \"../crypto/index.js\";\nimport { defineProperties, getBytes, hexlify, assertNormalize, assertPrivate, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return ((1 << bits) - 1) << (8 - bits) & 0xff;\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return ((1 << bits) - 1) & 0xff;\n}\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    assertNormalize(\"NFKD\");\n    if (wordlist == null) {\n        wordlist = LangEn.wordlist();\n    }\n    const words = wordlist.split(mnemonic);\n    assertArgument((words.length % 3) === 0 && words.length >= 12 && words.length <= 24, \"invalid mnemonic length\", \"mnemonic\", \"[ REDACTED ]\");\n    const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        assertArgument(index >= 0, `invalid mnemonic word at index ${i}`, \"mnemonic\", \"[ REDACTED ]\");\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n    const entropyBits = 32 * words.length / 3;\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n    const checksum = getBytes(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    assertArgument(checksum === (entropy[entropy.length - 1] & checksumMask), \"invalid mnemonic checksum\", \"mnemonic\", \"[ REDACTED ]\");\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\nfunction entropyToMnemonic(entropy, wordlist) {\n    assertArgument((entropy.length % 4) === 0 && entropy.length >= 16 && entropy.length <= 32, \"invalid entropy size\", \"entropy\", \"[ REDACTED ]\");\n    if (wordlist == null) {\n        wordlist = LangEn.wordlist();\n    }\n    const indices = [0];\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n            // This byte will complete an 11-bit index\n        }\n        else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = parseInt(sha256(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n    return wordlist.join(indices.map((index) => wordlist.getWord(index)));\n}\nconst _guard = {};\n/**\n *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]\n *  seeds and convert between phrases and entropy.\n */\nexport class Mnemonic {\n    /**\n     *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.\n     *\n     *  Use the [[wordlist]] ``split`` method to get the individual words.\n     */\n    phrase;\n    /**\n     *  The password used for this mnemonic. If no password is used this\n     *  is the empty string (i.e. ``\"\"``) as per the specification.\n     */\n    password;\n    /**\n     *  The wordlist for this mnemonic.\n     */\n    wordlist;\n    /**\n     *  The underlying entropy which the mnemonic encodes.\n     */\n    entropy;\n    /**\n     *  @private\n     */\n    constructor(guard, entropy, phrase, password, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (wordlist == null) {\n            wordlist = LangEn.wordlist();\n        }\n        assertPrivate(guard, _guard, \"Mnemonic\");\n        defineProperties(this, { phrase, password, wordlist, entropy });\n    }\n    /**\n     *  Returns the seed for the mnemonic.\n     */\n    computeSeed() {\n        const salt = toUtf8Bytes(\"mnemonic\" + this.password, \"NFKD\");\n        return pbkdf2(toUtf8Bytes(this.phrase, \"NFKD\"), salt, 2048, 64, \"sha512\");\n    }\n    /**\n     *  Creates a new Mnemonic for the %%phrase%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */\n    static fromPhrase(phrase, password, wordlist) {\n        // Normalize the case and space; throws if invalid\n        const entropy = mnemonicToEntropy(phrase, wordlist);\n        phrase = entropyToMnemonic(getBytes(entropy), wordlist);\n        return new Mnemonic(_guard, entropy, phrase, password, wordlist);\n    }\n    /**\n     *  Create a new **Mnemonic** from the %%entropy%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */\n    static fromEntropy(_entropy, password, wordlist) {\n        const entropy = getBytes(_entropy, \"entropy\");\n        const phrase = entropyToMnemonic(entropy, wordlist);\n        return new Mnemonic(_guard, hexlify(entropy), phrase, password, wordlist);\n    }\n    /**\n     *  Returns the phrase for %%mnemonic%%.\n     */\n    static entropyToPhrase(_entropy, wordlist) {\n        const entropy = getBytes(_entropy, \"entropy\");\n        return entropyToMnemonic(entropy, wordlist);\n    }\n    /**\n     *  Returns the entropy for %%phrase%%.\n     */\n    static phraseToEntropy(phrase, wordlist) {\n        return mnemonicToEntropy(phrase, wordlist);\n    }\n    /**\n     *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.\n     *\n     *  This checks all the provided words belong to the %%wordlist%%,\n     *  that the length is valid and the checksum is correct.\n     */\n    static isValidMnemonic(phrase, wordlist) {\n        try {\n            mnemonicToEntropy(phrase, wordlist);\n            return true;\n        }\n        catch (error) { }\n        return false;\n    }\n}\n//# sourceMappingURL=mnemonic.js.map","/*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _AES_key, _AES_Kd, _AES_Ke;\n// Number of rounds by keysize\nconst numberOfRounds = { 16: 10, 24: 12, 32: 14 };\n// Round constant words\nconst rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n// S-box and Inverse S-box (S is for Substitution)\nconst S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\nconst Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n// Transformations for encryption\nconst T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\nconst T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\nconst T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\nconst T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n// Transformations for decryption\nconst T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\nconst T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\nconst T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\nconst T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n// Transformations for decryption key expansion\nconst U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\nconst U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\nconst U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\nconst U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\nfunction convertToInt32(bytes) {\n    const result = [];\n    for (let i = 0; i < bytes.length; i += 4) {\n        result.push((bytes[i] << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | bytes[i + 3]);\n    }\n    return result;\n}\nexport class AES {\n    get key() { return __classPrivateFieldGet(this, _AES_key, \"f\").slice(); }\n    constructor(key) {\n        _AES_key.set(this, void 0);\n        _AES_Kd.set(this, void 0);\n        _AES_Ke.set(this, void 0);\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n        __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), \"f\");\n        const rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new TypeError('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n        // encryption round keys\n        __classPrivateFieldSet(this, _AES_Ke, [], \"f\");\n        // decryption round keys\n        __classPrivateFieldSet(this, _AES_Kd, [], \"f\");\n        for (let i = 0; i <= rounds; i++) {\n            __classPrivateFieldGet(this, _AES_Ke, \"f\").push([0, 0, 0, 0]);\n            __classPrivateFieldGet(this, _AES_Kd, \"f\").push([0, 0, 0, 0]);\n        }\n        const roundKeyCount = (rounds + 1) * 4;\n        const KC = this.key.length / 4;\n        // convert the key into ints\n        const tk = convertToInt32(this.key);\n        // copy values into round key arrays\n        let index;\n        for (let i = 0; i < KC; i++) {\n            index = i >> 2;\n            __classPrivateFieldGet(this, _AES_Ke, \"f\")[index][i % 4] = tk[i];\n            __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - index][i % 4] = tk[i];\n        }\n        // key expansion (fips-197 section 5.2)\n        let rconpointer = 0;\n        let t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                (S[(tt >> 8) & 0xFF] << 16) ^\n                (S[tt & 0xFF] << 8) ^\n                S[(tt >> 24) & 0xFF] ^\n                (rcon[rconpointer] << 24));\n            rconpointer += 1;\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (let i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            }\n            else {\n                for (let i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n                tk[KC / 2] ^= (S[tt & 0xFF] ^\n                    (S[(tt >> 8) & 0xFF] << 8) ^\n                    (S[(tt >> 16) & 0xFF] << 16) ^\n                    (S[(tt >> 24) & 0xFF] << 24));\n                for (let i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n            // copy values into round key arrays\n            let i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][c] = tk[i];\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (let r = 1; r < rounds; r++) {\n            for (let c = 0; c < 4; c++) {\n                tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c];\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                    U2[(tt >> 16) & 0xFF] ^\n                    U3[(tt >> 8) & 0xFF] ^\n                    U4[tt & 0xFF]);\n            }\n        }\n    }\n    encrypt(plaintext) {\n        if (plaintext.length != 16) {\n            throw new TypeError('invalid plaintext size (must be 16 bytes)');\n        }\n        const rounds = __classPrivateFieldGet(this, _AES_Ke, \"f\").length - 1;\n        const a = [0, 0, 0, 0];\n        // convert plaintext to (ints ^ key)\n        let t = convertToInt32(plaintext);\n        for (let i = 0; i < 4; i++) {\n            t[i] ^= __classPrivateFieldGet(this, _AES_Ke, \"f\")[0][i];\n        }\n        // apply round transforms\n        for (let r = 1; r < rounds; r++) {\n            for (let i = 0; i < 4; i++) {\n                a[i] = (T1[(t[i] >> 24) & 0xff] ^\n                    T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                    T3[(t[(i + 2) % 4] >> 8) & 0xff] ^\n                    T4[t[(i + 3) % 4] & 0xff] ^\n                    __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][i]);\n            }\n            t = a.slice();\n        }\n        // the last round is special\n        const result = new Uint8Array(16);\n        let tt = 0;\n        for (let i = 0; i < 4; i++) {\n            tt = __classPrivateFieldGet(this, _AES_Ke, \"f\")[rounds][i];\n            result[4 * i] = (S[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;\n            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;\n        }\n        return result;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new TypeError('invalid ciphertext size (must be 16 bytes)');\n        }\n        const rounds = __classPrivateFieldGet(this, _AES_Kd, \"f\").length - 1;\n        const a = [0, 0, 0, 0];\n        // convert plaintext to (ints ^ key)\n        let t = convertToInt32(ciphertext);\n        for (let i = 0; i < 4; i++) {\n            t[i] ^= __classPrivateFieldGet(this, _AES_Kd, \"f\")[0][i];\n        }\n        // apply round transforms\n        for (let r = 1; r < rounds; r++) {\n            for (let i = 0; i < 4; i++) {\n                a[i] = (T5[(t[i] >> 24) & 0xff] ^\n                    T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                    T7[(t[(i + 2) % 4] >> 8) & 0xff] ^\n                    T8[t[(i + 1) % 4] & 0xff] ^\n                    __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][i]);\n            }\n            t = a.slice();\n        }\n        // the last round is special\n        const result = new Uint8Array(16);\n        let tt = 0;\n        for (let i = 0; i < 4; i++) {\n            tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds][i];\n            result[4 * i] = (Si[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;\n            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;\n        }\n        return result;\n    }\n}\n_AES_key = new WeakMap(), _AES_Kd = new WeakMap(), _AES_Ke = new WeakMap();\n//# sourceMappingURL=aes.js.map","import { AES } from \"./aes.js\";\nexport class ModeOfOperation {\n    constructor(name, key, cls) {\n        if (cls && !(this instanceof cls)) {\n            throw new Error(`${name} must be instantiated with \"new\"`);\n        }\n        Object.defineProperties(this, {\n            aes: { enumerable: true, value: new AES(key) },\n            name: { enumerable: true, value: name }\n        });\n    }\n}\n//# sourceMappingURL=mode.js.map","// Cipher Block Chaining\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CBC_iv, _CBC_lastBlock;\nimport { ModeOfOperation } from \"./mode.js\";\nexport class CBC extends ModeOfOperation {\n    constructor(key, iv) {\n        super(\"ECC\", key, CBC);\n        _CBC_iv.set(this, void 0);\n        _CBC_lastBlock.set(this, void 0);\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), \"f\");\n        }\n        else {\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, \"f\");\n    }\n    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, \"f\")); }\n    encrypt(plaintext) {\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const ciphertext = new Uint8Array(plaintext.length);\n        for (let i = 0; i < plaintext.length; i += 16) {\n            for (let j = 0; j < 16; j++) {\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] ^= plaintext[i + j];\n            }\n            __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\")), \"f\");\n            ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\"), i);\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        const plaintext = new Uint8Array(ciphertext.length);\n        for (let i = 0; i < ciphertext.length; i += 16) {\n            const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));\n            for (let j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j];\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] = ciphertext[i + j];\n            }\n        }\n        return plaintext;\n    }\n}\n_CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap();\n//# sourceMappingURL=mode-cbc.js.map","// Counter Mode\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CTR_remaining, _CTR_remainingIndex, _CTR_counter;\nimport { ModeOfOperation } from \"./mode.js\";\nexport class CTR extends ModeOfOperation {\n    constructor(key, initialValue) {\n        super(\"CTR\", key, CTR);\n        // Remaining bytes for the one-time pad\n        _CTR_remaining.set(this, void 0);\n        _CTR_remainingIndex.set(this, void 0);\n        // The current counter\n        _CTR_counter.set(this, void 0);\n        __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), \"f\");\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").fill(0);\n        __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, \"f\"), \"f\"); // This will be discarded immediately\n        __classPrivateFieldSet(this, _CTR_remainingIndex, 16, \"f\");\n        if (initialValue == null) {\n            initialValue = 1;\n        }\n        if (typeof (initialValue) === \"number\") {\n            this.setCounterValue(initialValue);\n        }\n        else {\n            this.setCounterBytes(initialValue);\n        }\n    }\n    get counter() { return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, \"f\")); }\n    setCounterValue(value) {\n        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n            throw new TypeError(\"invalid counter initial integer value\");\n        }\n        for (let index = 15; index >= 0; --index) {\n            __classPrivateFieldGet(this, _CTR_counter, \"f\")[index] = value % 256;\n            value = Math.floor(value / 256);\n        }\n    }\n    setCounterBytes(value) {\n        if (value.length !== 16) {\n            throw new TypeError(\"invalid counter initial Uint8Array value length\");\n        }\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").set(value);\n    }\n    increment() {\n        for (let i = 15; i >= 0; i--) {\n            if (__classPrivateFieldGet(this, _CTR_counter, \"f\")[i] === 255) {\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i] = 0;\n            }\n            else {\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i]++;\n                break;\n            }\n        }\n    }\n    encrypt(plaintext) {\n        var _a, _b;\n        const crypttext = new Uint8Array(plaintext);\n        for (let i = 0; i < crypttext.length; i++) {\n            if (__classPrivateFieldGet(this, _CTR_remainingIndex, \"f\") === 16) {\n                __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, \"f\")), \"f\");\n                __classPrivateFieldSet(this, _CTR_remainingIndex, 0, \"f\");\n                this.increment();\n            }\n            crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, \"f\")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, \"f\"), _a = _b++, _b), \"f\"), _a];\n        }\n        return crypttext;\n    }\n    decrypt(ciphertext) {\n        return this.encrypt(ciphertext);\n    }\n}\n_CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap();\n//# sourceMappingURL=mode-ctr.js.map","/**\n *  @_ignore\n */\nimport { getBytesCopy, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nexport function looseArrayify(hexString) {\n    if (typeof (hexString) === \"string\" && !hexString.startsWith(\"0x\")) {\n        hexString = \"0x\" + hexString;\n    }\n    return getBytesCopy(hexString);\n}\nexport function zpad(value, length) {\n    value = String(value);\n    while (value.length < length) {\n        value = '0' + value;\n    }\n    return value;\n}\nexport function getPassword(password) {\n    if (typeof (password) === 'string') {\n        return toUtf8Bytes(password, \"NFKC\");\n    }\n    return getBytesCopy(password);\n}\nexport function spelunk(object, _path) {\n    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);\n    assertArgument(match != null, \"invalid path\", \"path\", _path);\n    const path = match[1];\n    const type = match[3];\n    const reqd = (match[4] === \"!\");\n    let cur = object;\n    for (const comp of path.toLowerCase().split('.')) {\n        // Search for a child object with a case-insensitive matching key\n        if (Array.isArray(cur)) {\n            if (!comp.match(/^[0-9]+$/)) {\n                break;\n            }\n            cur = cur[parseInt(comp)];\n        }\n        else if (typeof (cur) === \"object\") {\n            let found = null;\n            for (const key in cur) {\n                if (key.toLowerCase() === comp) {\n                    found = cur[key];\n                    break;\n                }\n            }\n            cur = found;\n        }\n        else {\n            cur = null;\n        }\n        if (cur == null) {\n            break;\n        }\n    }\n    assertArgument(!reqd || cur != null, \"missing required value\", \"path\", path);\n    if (type && cur != null) {\n        if (type === \"int\") {\n            if (typeof (cur) === \"string\" && cur.match(/^-?[0-9]+$/)) {\n                return parseInt(cur);\n            }\n            else if (Number.isSafeInteger(cur)) {\n                return cur;\n            }\n        }\n        if (type === \"number\") {\n            if (typeof (cur) === \"string\" && cur.match(/^-?[0-9.]*$/)) {\n                return parseFloat(cur);\n            }\n        }\n        if (type === \"data\") {\n            if (typeof (cur) === \"string\") {\n                return looseArrayify(cur);\n            }\n        }\n        if (type === \"array\" && Array.isArray(cur)) {\n            return cur;\n        }\n        if (type === typeof (cur)) {\n            return cur;\n        }\n        assertArgument(false, `wrong type found for ${type} `, \"path\", path);\n    }\n    return cur;\n}\n/*\nexport function follow(object: any, path: string): null | string {\n    let currentChild = object;\n\n    for (const comp of path.toLowerCase().split('/')) {\n\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n             if (key.toLowerCase() === comp) {\n                 matchingChild = currentChild[key];\n                 break;\n             }\n        }\n\n        if (matchingChild === null) { return null; }\n\n        currentChild = matchingChild;\n    }\n\n    return currentChild;\n}\n\n// \"path/to/something:type!\"\nexport function followRequired(data: any, path: string): string {\n    const value = follow(data, path);\n    if (value != null) { return value; }\n    return logger.throwArgumentError(\"invalid value\", `data:${ path }`,\n    JSON.stringify(data));\n}\n*/\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n/*\nexport function uuidV4(randomBytes: BytesLike): string {\n    const bytes = getBytes(randomBytes, \"randomBytes\");\n\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    const value = hexlify(bytes);\n\n    return [\n       value.substring(2, 10),\n       value.substring(10, 14),\n       value.substring(14, 18),\n       value.substring(18, 22),\n       value.substring(22, 34),\n    ].join(\"-\");\n}\n*/\n//# sourceMappingURL=utils.js.map","/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CTR } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256, pbkdf2, randomBytes, scrypt, scryptSync } from \"../crypto/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, getBytes, hexlify, uuidV4, assert, assertArgument } from \"../utils/index.js\";\nimport { getPassword, spelunk, zpad } from \"./utils.js\";\nimport { version } from \"../_version.js\";\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */\nexport function isKeystoreJson(json) {\n    try {\n        const data = JSON.parse(json);\n        const version = ((data.version != null) ? parseInt(data.version) : 0);\n        if (version === 3) {\n            return true;\n        }\n    }\n    catch (error) { }\n    return false;\n}\nfunction decrypt(data, key, ciphertext) {\n    const cipher = spelunk(data, \"crypto.cipher:string\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = spelunk(data, \"crypto.cipherparams.iv:data!\");\n        const aesCtr = new CTR(key, iv);\n        return hexlify(aesCtr.decrypt(ciphertext));\n    }\n    assert(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"decrypt\"\n    });\n}\nfunction getAccount(data, _key) {\n    const key = getBytes(_key);\n    const ciphertext = spelunk(data, \"crypto.ciphertext:data!\");\n    const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n    assertArgument(computedMAC === spelunk(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\n    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n    const address = computeAddress(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (!check.startsWith(\"0x\")) {\n            check = \"0x\" + check;\n        }\n        assertArgument(getAddress(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n    }\n    const account = { address, privateKey };\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    const version = spelunk(data, \"x-ethers.version:string\");\n    if (version === \"0.1\") {\n        const mnemonicKey = key.slice(32, 64);\n        const mnemonicCiphertext = spelunk(data, \"x-ethers.mnemonicCiphertext:data!\");\n        const mnemonicIv = spelunk(data, \"x-ethers.mnemonicCounter:data!\");\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n        account.mnemonic = {\n            path: (spelunk(data, \"x-ethers.path:string\") || defaultPath),\n            locale: (spelunk(data, \"x-ethers.locale:string\") || \"en\"),\n            entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n        };\n    }\n    return account;\n}\nfunction getDecryptKdfParams(data) {\n    const kdf = spelunk(data, \"crypto.kdf:string\");\n    if (kdf && typeof (kdf) === \"string\") {\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n            const N = spelunk(data, \"crypto.kdfparams.n:int!\");\n            const r = spelunk(data, \"crypto.kdfparams.r:int!\");\n            const p = spelunk(data, \"crypto.kdfparams.p:int!\");\n            // Make sure N is a power of 2\n            assertArgument(N > 0 && (N & (N - 1)) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n            assertArgument(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n            const dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n            return { name: \"scrypt\", salt, N, r, p, dkLen: 64 };\n        }\n        else if (kdf.toLowerCase() === \"pbkdf2\") {\n            const salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n            const prf = spelunk(data, \"crypto.kdfparams.prf:string!\");\n            const algorithm = prf.split(\"-\").pop();\n            assertArgument(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n            const count = spelunk(data, \"crypto.kdfparams.c:int!\");\n            const dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\n            return { name: \"pbkdf2\", salt, count, dkLen, algorithm };\n        }\n    }\n    assertArgument(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */\nexport function decryptKeystoreJsonSync(json, _password) {\n    const data = JSON.parse(json);\n    const password = getPassword(_password);\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        const { salt, count, dkLen, algorithm } = params;\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\n        return getAccount(data, key);\n    }\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params });\n    const { salt, N, r, p, dkLen } = params;\n    const key = scryptSync(password, salt, N, r, p, dkLen);\n    return getAccount(data, key);\n}\nfunction stall(duration) {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */\nexport async function decryptKeystoreJson(json, _password, progress) {\n    const data = JSON.parse(json);\n    const password = getPassword(_password);\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        if (progress) {\n            progress(0);\n            await stall(0);\n        }\n        const { salt, count, dkLen, algorithm } = params;\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\n        if (progress) {\n            progress(1);\n            await stall(0);\n        }\n        return getAccount(data, key);\n    }\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params });\n    const { salt, N, r, p, dkLen } = params;\n    const key = await scrypt(password, salt, N, r, p, dkLen, progress);\n    return getAccount(data, key);\n}\nfunction getEncryptKdfParams(options) {\n    // Check/generate the salt\n    const salt = (options.salt != null) ? getBytes(options.salt, \"options.salt\") : randomBytes(32);\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) {\n            N = options.scrypt.N;\n        }\n        if (options.scrypt.r) {\n            r = options.scrypt.r;\n        }\n        if (options.scrypt.p) {\n            p = options.scrypt.p;\n        }\n    }\n    assertArgument(typeof (N) === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n    assertArgument(typeof (r) === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n    assertArgument(typeof (p) === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n    return { name: \"scrypt\", dkLen: 32, salt, N, r, p };\n}\nfunction _encryptKeystore(key, kdf, account, options) {\n    const privateKey = getBytes(account.privateKey, \"privateKey\");\n    // Override initialization vector\n    const iv = (options.iv != null) ? getBytes(options.iv, \"options.iv\") : randomBytes(16);\n    assertArgument(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n    // Override the uuid\n    const uuidRandom = (options.uuid != null) ? getBytes(options.uuid, \"options.uuid\") : randomBytes(16);\n    assertArgument(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n    // This will be used to encrypt the wallet (as per Web3 secret storage)\n    // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    const derivedKey = key.slice(0, 16);\n    const macPrefix = key.slice(16, 32);\n    // Encrypt the private key\n    const aesCtr = new CTR(derivedKey, iv);\n    const ciphertext = getBytes(aesCtr.encrypt(privateKey));\n    // Compute the message authentication code, used to check the password\n    const mac = keccak256(concat([macPrefix, ciphertext]));\n    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n    const data = {\n        address: account.address.substring(2).toLowerCase(),\n        id: uuidV4(uuidRandom),\n        version: 3,\n        Crypto: {\n            cipher: \"aes-128-ctr\",\n            cipherparams: {\n                iv: hexlify(iv).substring(2),\n            },\n            ciphertext: hexlify(ciphertext).substring(2),\n            kdf: \"scrypt\",\n            kdfparams: {\n                salt: hexlify(kdf.salt).substring(2),\n                n: kdf.N,\n                dklen: 32,\n                p: kdf.p,\n                r: kdf.r\n            },\n            mac: mac.substring(2)\n        }\n    };\n    // If we have a mnemonic, encrypt it into the JSON wallet\n    if (account.mnemonic) {\n        const client = (options.client != null) ? options.client : `ethers/${version}`;\n        const path = account.mnemonic.path || defaultPath;\n        const locale = account.mnemonic.locale || \"en\";\n        const mnemonicKey = key.slice(32, 64);\n        const entropy = getBytes(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n        const mnemonicIv = randomBytes(16);\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n        const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));\n        const now = new Date();\n        const timestamp = (now.getUTCFullYear() + \"-\" +\n            zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n            zpad(now.getUTCDate(), 2) + \"T\" +\n            zpad(now.getUTCHours(), 2) + \"-\" +\n            zpad(now.getUTCMinutes(), 2) + \"-\" +\n            zpad(now.getUTCSeconds(), 2) + \".0Z\");\n        const gethFilename = (\"UTC--\" + timestamp + \"--\" + data.address);\n        data[\"x-ethers\"] = {\n            client, gethFilename, path, locale,\n            mnemonicCounter: hexlify(mnemonicIv).substring(2),\n            mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n            version: \"0.1\"\n        };\n    }\n    return JSON.stringify(data);\n}\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */\nexport function encryptKeystoreJsonSync(account, password, options) {\n    if (options == null) {\n        options = {};\n    }\n    const passwordBytes = getPassword(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n    return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */\nexport async function encryptKeystoreJson(account, password, options) {\n    if (options == null) {\n        options = {};\n    }\n    const passwordBytes = getPassword(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = await scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n    return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n//# sourceMappingURL=json-keystore.js.map","/**\n *  Explain HD Wallets..\n *\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\n */\nimport { computeHmac, randomBytes, ripemd160, SigningKey, sha256 } from \"../crypto/index.js\";\nimport { VoidSigner } from \"../providers/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, dataSlice, decodeBase58, defineProperties, encodeBase58, getBytes, hexlify, isBytesLike, getNumber, toBeArray, toBigInt, toBeHex, assertPrivate, assert, assertArgument } from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nimport { encryptKeystoreJson, encryptKeystoreJsonSync, } from \"./json-keystore.js\";\n/**\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\n */\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n// \"Bitcoin seed\"\nconst MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);\nconst HardenedBit = 0x80000000;\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nconst Nibbles = \"0123456789abcdef\";\nfunction zpad(value, length) {\n    let result = \"\";\n    while (value) {\n        result = Nibbles[value % 16] + result;\n        value = Math.trunc(value / 16);\n    }\n    while (result.length < length * 2) {\n        result = \"0\" + result;\n    }\n    return \"0x\" + result;\n}\nfunction encodeBase58Check(_value) {\n    const value = getBytes(_value);\n    const check = dataSlice(sha256(sha256(value)), 0, 4);\n    const bytes = concat([value, check]);\n    return encodeBase58(bytes);\n}\nconst _guard = {};\nfunction ser_I(index, chainCode, publicKey, privateKey) {\n    const data = new Uint8Array(37);\n    if (index & HardenedBit) {\n        assert(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"deriveChild\"\n        });\n        // Data = 0x00 || ser_256(k_par)\n        data.set(getBytes(privateKey), 1);\n    }\n    else {\n        // Data = ser_p(point(k_par))\n        data.set(getBytes(publicKey));\n    }\n    // Data += ser_32(i)\n    for (let i = 24; i >= 0; i -= 8) {\n        data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\n    }\n    const I = getBytes(computeHmac(\"sha512\", chainCode, data));\n    return { IL: I.slice(0, 32), IR: I.slice(32) };\n}\nfunction derivePath(node, path) {\n    const components = path.split(\"/\");\n    assertArgument(components.length > 0 && (components[0] === \"m\" || node.depth > 0), \"invalid path\", \"path\", path);\n    if (components[0] === \"m\") {\n        components.shift();\n    }\n    let result = node;\n    for (let i = 0; i < components.length; i++) {\n        const component = components[i];\n        if (component.match(/^[0-9]+'$/)) {\n            const index = parseInt(component.substring(0, component.length - 1));\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\n            result = result.deriveChild(HardenedBit + index);\n        }\n        else if (component.match(/^[0-9]+$/)) {\n            const index = parseInt(component);\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\n            result = result.deriveChild(index);\n        }\n        else {\n            assertArgument(false, \"invalid path component\", `path[${i}]`, component);\n        }\n    }\n    return result;\n}\n/**\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\n *  from an HD Node using the [[link-bip-32]] stantard.\n *\n *  An HD Node forms a hierarchal structure with each HD Node having a\n *  private key and the ability to derive child HD Nodes, defined by\n *  a path indicating the index of each child.\n */\nexport class HDNodeWallet extends BaseWallet {\n    /**\n     *  The compressed public key.\n     */\n    publicKey;\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    fingerprint;\n    /**\n     *  The parent fingerprint.\n     */\n    parentFingerprint;\n    /**\n     *  The mnemonic used to create this HD Node, if available.\n     *\n     *  Sources such as extended keys do not encode the mnemonic, in\n     *  which case this will be ``null``.\n     */\n    mnemonic;\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    chainCode;\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    path;\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    index;\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    depth;\n    /**\n     *  @private\n     */\n    constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {\n        super(signingKey, provider);\n        assertPrivate(guard, _guard, \"HDNodeWallet\");\n        defineProperties(this, { publicKey: signingKey.compressedPublicKey });\n        const fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n        defineProperties(this, {\n            parentFingerprint, fingerprint,\n            chainCode, path, index, depth\n        });\n        defineProperties(this, { mnemonic });\n    }\n    connect(provider) {\n        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\n    }\n    #account() {\n        const account = { address: this.address, privateKey: this.privateKey };\n        const m = this.mnemonic;\n        if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\n            account.mnemonic = {\n                path: this.path,\n                locale: \"en\",\n                entropy: m.entropy\n            };\n        }\n        return account;\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password, progressCallback) {\n        return await encryptKeystoreJson(this.#account(), password, { progressCallback });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password) {\n        return encryptKeystoreJsonSync(this.#account(), password);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpriv`` and can be used to\n     *  reconstruct this HD Node to derive its children.\n     */\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\n        return encodeBase58Check(concat([\n            \"0x0488ADE4\", zpad(this.depth, 1), this.parentFingerprint,\n            zpad(this.index, 4), this.chainCode,\n            concat([\"0x00\", this.privateKey])\n        ]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n    hasPath() { return (this.path != null); }\n    /**\n     *  Returns a neutered HD Node, which removes the private details\n     *  of an HD Node.\n     *\n     *  A neutered node has no private key, but can be used to derive\n     *  child addresses and other public data about the HD Node.\n     */\n    neuter() {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);\n    }\n    /**\n     *  Return the child for %%index%%.\n     */\n    deriveChild(_index) {\n        const index = getNumber(_index, \"index\");\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) {\n                path += \"'\";\n            }\n        }\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);\n        const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N, 32));\n        return new HDNodeWallet(_guard, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);\n    }\n    /**\n     *  Return the HDNode for %%path%% from this node.\n     */\n    derivePath(path) {\n        return derivePath(this, path);\n    }\n    static #fromSeed(_seed, mnemonic) {\n        assertArgument(isBytesLike(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\n        const seed = getBytes(_seed, \"seed\");\n        assertArgument(seed.length >= 16 && seed.length <= 64, \"invalid seed\", \"seed\", \"[REDACTED]\");\n        const I = getBytes(computeHmac(\"sha512\", MasterSecret, seed));\n        const signingKey = new SigningKey(hexlify(I.slice(0, 32)));\n        return new HDNodeWallet(_guard, signingKey, \"0x00000000\", hexlify(I.slice(32)), \"m\", 0, 0, mnemonic, null);\n    }\n    /**\n     *  Creates a new HD Node from %%extendedKey%%.\n     *\n     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\n     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\n     *  or full HD Node ([[HDNodeWallet) respectively.\n     */\n    static fromExtendedKey(extendedKey) {\n        const bytes = toBeArray(decodeBase58(extendedKey)); // @TODO: redact\n        assertArgument(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\": {\n                const publicKey = hexlify(key);\n                return new HDNodeVoidWallet(_guard, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);\n            }\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNodeWallet(_guard, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);\n        }\n        assertArgument(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\n    }\n    /**\n     *  Creates a new random HDNode.\n     */\n    static createRandom(password, path, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (path == null) {\n            path = defaultPath;\n        }\n        if (wordlist == null) {\n            wordlist = LangEn.wordlist();\n        }\n        const mnemonic = Mnemonic.fromEntropy(randomBytes(16), password, wordlist);\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Create an HD Node from %%mnemonic%%.\n     */\n    static fromMnemonic(mnemonic, path) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a mnemonic %%phrase%%.\n     */\n    static fromPhrase(phrase, password, path, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (path == null) {\n            path = defaultPath;\n        }\n        if (wordlist == null) {\n            wordlist = LangEn.wordlist();\n        }\n        const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist);\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a %%seed%%.\n     */\n    static fromSeed(seed) {\n        return HDNodeWallet.#fromSeed(seed, null);\n    }\n}\n/**\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\n *\n *  The can be created by using an extended ``xpub`` key to\n *  [[HDNodeWallet_fromExtendedKey]] or by\n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\n */\nexport class HDNodeVoidWallet extends VoidSigner {\n    /**\n     *  The compressed public key.\n     */\n    publicKey;\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    fingerprint;\n    /**\n     *  The parent node fingerprint.\n     */\n    parentFingerprint;\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    chainCode;\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    path;\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    index;\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    depth;\n    /**\n     *  @private\n     */\n    constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {\n        super(address, provider);\n        assertPrivate(guard, _guard, \"HDNodeVoidWallet\");\n        defineProperties(this, { publicKey });\n        const fingerprint = dataSlice(ripemd160(sha256(publicKey)), 0, 4);\n        defineProperties(this, {\n            publicKey, fingerprint, parentFingerprint, chainCode, path, index, depth\n        });\n    }\n    connect(provider) {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpub`` and can be used to\n     *  reconstruct this neutered key to derive its children addresses.\n     */\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\n        return encodeBase58Check(concat([\n            \"0x0488B21E\",\n            zpad(this.depth, 1),\n            this.parentFingerprint,\n            zpad(this.index, 4),\n            this.chainCode,\n            this.publicKey,\n        ]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n    hasPath() { return (this.path != null); }\n    /**\n     *  Return the child for %%index%%.\n     */\n    deriveChild(_index) {\n        const index = getNumber(_index, \"index\");\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) {\n                path += \"'\";\n            }\n        }\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);\n        const Ki = SigningKey.addPoints(IL, this.publicKey, true);\n        const address = computeAddress(Ki);\n        return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);\n    }\n    /**\n     *  Return the signer for %%path%% from this node.\n     */\n    derivePath(path) {\n        return derivePath(this, path);\n    }\n}\n/*\nexport class HDNodeWalletManager {\n    #root: HDNodeWallet;\n\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\n        if (locale == null) { locale = LangEn.wordlist(); }\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\n    }\n\n    getSigner(index?: number): HDNodeWallet {\n        return this.#root.deriveChild((index == null) ? 0: index);\n    }\n}\n*/\n/**\n *  Returns the [[link-bip-32]] path for the account at %%index%%.\n *\n *  This is the pattern used by wallets like Ledger.\n *\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\n *  some software.\n */\nexport function getAccountPath(_index) {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/${index}'/0/0`;\n}\n/**\n *  Returns the path using an alternative pattern for deriving accounts,\n *  at %%index%%.\n *\n *  This derivation path uses the //index// component rather than the\n *  //account// component to derive sequential accounts.\n *\n *  This is the pattern used by wallets like MetaMask.\n */\nexport function getIndexedAccountPath(_index) {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/0'/0/${index}`;\n}\n//# sourceMappingURL=hdwallet.js.map","/**\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CBC, pkcs7Strip } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { pbkdf2 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\nimport { getPassword, looseArrayify, spelunk } from \"./utils.js\";\n/**\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\n */\nexport function isCrowdsaleJson(json) {\n    try {\n        const data = JSON.parse(json);\n        if (data.encseed) {\n            return true;\n        }\n    }\n    catch (error) { }\n    return false;\n}\n// See: https://github.com/ethereum/pyethsaletool\n/**\n *  Before Ethereum launched, it was necessary to create a wallet\n *  format for backers to use, which would be used to receive ether\n *  as a reward for contributing to the project.\n *\n *  The [[link-crowdsale]] format is now obsolete, but it is still\n *  useful to support and the additional code is fairly trivial as\n *  all the primitives required are used through core portions of\n *  the library.\n */\nexport function decryptCrowdsaleJson(json, _password) {\n    const data = JSON.parse(json);\n    const password = getPassword(_password);\n    // Ethereum Address\n    const address = getAddress(spelunk(data, \"ethaddr:string!\"));\n    // Encrypted Seed\n    const encseed = looseArrayify(spelunk(data, \"encseed:string!\"));\n    assertArgument(encseed && (encseed.length % 16) === 0, \"invalid encseed\", \"json\", json);\n    const key = getBytes(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    const aesCbc = new CBC(key, iv);\n    const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    return { address, privateKey: id(seedHex) };\n}\n//# sourceMappingURL=json-crowdsale.js.map","export function pkcs7Pad(data) {\n    const padder = 16 - (data.length % 16);\n    const result = new Uint8Array(data.length + padder);\n    result.set(data);\n    for (let i = data.length; i < result.length; i++) {\n        result[i] = padder;\n    }\n    return result;\n}\nexport function pkcs7Strip(data) {\n    if (data.length < 16) {\n        throw new TypeError('PKCS#7 invalid length');\n    }\n    const padder = data[data.length - 1];\n    if (padder > 16) {\n        throw new TypeError('PKCS#7 padding byte out of range');\n    }\n    const length = data.length - padder;\n    for (let i = 0; i < padder; i++) {\n        if (data[length + i] !== padder) {\n            throw new TypeError('PKCS#7 invalid padding byte');\n        }\n    }\n    return new Uint8Array(data.subarray(0, length));\n}\n//# sourceMappingURL=padding.js.map","import { SigningKey } from \"../crypto/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { HDNodeWallet } from \"./hdwallet.js\";\nimport { decryptCrowdsaleJson, isCrowdsaleJson } from \"./json-crowdsale.js\";\nimport { decryptKeystoreJson, decryptKeystoreJsonSync, encryptKeystoreJson, encryptKeystoreJsonSync, isKeystoreJson } from \"./json-keystore.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nfunction stall(duration) {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nexport class Wallet extends BaseWallet {\n    /**\n     *  Create a new wallet for the private %%key%%, optionally connected\n     *  to %%provider%%.\n     */\n    constructor(key, provider) {\n        if (typeof (key) === \"string\" && !key.startsWith(\"0x\")) {\n            key = \"0x\" + key;\n        }\n        let signingKey = (typeof (key) === \"string\") ? new SigningKey(key) : key;\n        super(signingKey, provider);\n    }\n    connect(provider) {\n        return new Wallet(this.signingKey, provider);\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password, progressCallback) {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return await encryptKeystoreJson(account, password, { progressCallback });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password) {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return encryptKeystoreJsonSync(account, password);\n    }\n    static #fromAccount(account) {\n        assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n            const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\n            const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n                return wallet;\n            }\n            console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n        }\n        const wallet = new Wallet(account.privateKey);\n        assertArgument(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n        return wallet;\n    }\n    /**\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n     *  with %%password%%.\n     *\n     *  If %%progress%% is provided, it is called periodically during\n     *  decryption so that any UI can be updated.\n     */\n    static async fromEncryptedJson(json, password, progress) {\n        let account = null;\n        if (isKeystoreJson(json)) {\n            account = await decryptKeystoreJson(json, password, progress);\n        }\n        else if (isCrowdsaleJson(json)) {\n            if (progress) {\n                progress(0);\n                await stall(0);\n            }\n            account = decryptCrowdsaleJson(json, password);\n            if (progress) {\n                progress(1);\n                await stall(0);\n            }\n        }\n        return Wallet.#fromAccount(account);\n    }\n    /**\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n     *\n     *  The [[fromEncryptedJson]] method is preferred, as this method\n     *  will lock up and freeze the UI during decryption, which may take\n     *  some time.\n     */\n    static fromEncryptedJsonSync(json, password) {\n        let account = null;\n        if (isKeystoreJson(json)) {\n            account = decryptKeystoreJsonSync(json, password);\n        }\n        else if (isCrowdsaleJson(json)) {\n            account = decryptCrowdsaleJson(json, password);\n        }\n        else {\n            assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        }\n        return Wallet.#fromAccount(account);\n    }\n    /**\n     *  Creates a new random [[HDNodeWallet]] using the available\n     *  [cryptographic random source](randomBytes).\n     *\n     *  If there is no crytographic random source, this will throw.\n     */\n    static createRandom(provider) {\n        const wallet = HDNodeWallet.createRandom();\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n    /**\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\n     */\n    static fromPhrase(phrase, provider) {\n        const wallet = HDNodeWallet.fromPhrase(phrase);\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n}\n//# sourceMappingURL=wallet.js.map","let toSJISFunction\nconst CODEWORDS_COUNT = [\n  0, // Not used\n  26, 44, 70, 100, 134, 172, 196, 242, 292, 346,\n  404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,\n  1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,\n  2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706\n]\n\n/**\n * Returns the QR Code size for the specified version\n *\n * @param  {Number} version QR Code version\n * @return {Number}         size of QR code\n */\nexports.getSymbolSize = function getSymbolSize (version) {\n  if (!version) throw new Error('\"version\" cannot be null or undefined')\n  if (version < 1 || version > 40) throw new Error('\"version\" should be in range from 1 to 40')\n  return version * 4 + 17\n}\n\n/**\n * Returns the total number of codewords used to store data and EC information.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Data length in bits\n */\nexports.getSymbolTotalCodewords = function getSymbolTotalCodewords (version) {\n  return CODEWORDS_COUNT[version]\n}\n\n/**\n * Encode data with Bose-Chaudhuri-Hocquenghem\n *\n * @param  {Number} data Value to encode\n * @return {Number}      Encoded value\n */\nexports.getBCHDigit = function (data) {\n  let digit = 0\n\n  while (data !== 0) {\n    digit++\n    data >>>= 1\n  }\n\n  return digit\n}\n\nexports.setToSJISFunction = function setToSJISFunction (f) {\n  if (typeof f !== 'function') {\n    throw new Error('\"toSJISFunc\" is not a valid function.')\n  }\n\n  toSJISFunction = f\n}\n\nexports.isKanjiModeEnabled = function () {\n  return typeof toSJISFunction !== 'undefined'\n}\n\nexports.toSJIS = function toSJIS (kanji) {\n  return toSJISFunction(kanji)\n}\n","function BitBuffer () {\n  this.buffer = []\n  this.length = 0\n}\n\nBitBuffer.prototype = {\n\n  get: function (index) {\n    const bufIndex = Math.floor(index / 8)\n    return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1\n  },\n\n  put: function (num, length) {\n    for (let i = 0; i < length; i++) {\n      this.putBit(((num >>> (length - i - 1)) & 1) === 1)\n    }\n  },\n\n  getLengthInBits: function () {\n    return this.length\n  },\n\n  putBit: function (bit) {\n    const bufIndex = Math.floor(this.length / 8)\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0)\n    }\n\n    if (bit) {\n      this.buffer[bufIndex] |= (0x80 >>> (this.length % 8))\n    }\n\n    this.length++\n  }\n}\n\nmodule.exports = BitBuffer\n","exports.L = { bit: 1 }\nexports.M = { bit: 0 }\nexports.Q = { bit: 3 }\nexports.H = { bit: 2 }\n\nfunction fromString (string) {\n  if (typeof string !== 'string') {\n    throw new Error('Param is not a string')\n  }\n\n  const lcStr = string.toLowerCase()\n\n  switch (lcStr) {\n    case 'l':\n    case 'low':\n      return exports.L\n\n    case 'm':\n    case 'medium':\n      return exports.M\n\n    case 'q':\n    case 'quartile':\n      return exports.Q\n\n    case 'h':\n    case 'high':\n      return exports.H\n\n    default:\n      throw new Error('Unknown EC Level: ' + string)\n  }\n}\n\nexports.isValid = function isValid (level) {\n  return level && typeof level.bit !== 'undefined' &&\n    level.bit >= 0 && level.bit < 4\n}\n\nexports.from = function from (value, defaultValue) {\n  if (exports.isValid(value)) {\n    return value\n  }\n\n  try {\n    return fromString(value)\n  } catch (e) {\n    return defaultValue\n  }\n}\n","/**\n * Helper class to handle QR Code symbol modules\n *\n * @param {Number} size Symbol size\n */\nfunction BitMatrix (size) {\n  if (!size || size < 1) {\n    throw new Error('BitMatrix size must be defined and greater than 0')\n  }\n\n  this.size = size\n  this.data = new Uint8Array(size * size)\n  this.reservedBit = new Uint8Array(size * size)\n}\n\n/**\n * Set bit value at specified location\n * If reserved flag is set, this bit will be ignored during masking process\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n * @param {Boolean} reserved\n */\nBitMatrix.prototype.set = function (row, col, value, reserved) {\n  const index = row * this.size + col\n  this.data[index] = value\n  if (reserved) this.reservedBit[index] = true\n}\n\n/**\n * Returns bit value at specified location\n *\n * @param  {Number}  row\n * @param  {Number}  col\n * @return {Boolean}\n */\nBitMatrix.prototype.get = function (row, col) {\n  return this.data[row * this.size + col]\n}\n\n/**\n * Applies xor operator at specified location\n * (used during masking process)\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n */\nBitMatrix.prototype.xor = function (row, col, value) {\n  this.data[row * this.size + col] ^= value\n}\n\n/**\n * Check if bit at specified location is reserved\n *\n * @param {Number}   row\n * @param {Number}   col\n * @return {Boolean}\n */\nBitMatrix.prototype.isReserved = function (row, col) {\n  return this.reservedBit[row * this.size + col]\n}\n\nmodule.exports = BitMatrix\n","/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */\n\nconst getSymbolSize = require('./utils').getSymbolSize\n\n/**\n * Calculate the row/column coordinates of the center module of each alignment pattern\n * for the specified QR Code version.\n *\n * The alignment patterns are positioned symmetrically on either side of the diagonal\n * running from the top left corner of the symbol to the bottom right corner.\n *\n * Since positions are simmetrical only half of the coordinates are returned.\n * Each item of the array will represent in turn the x and y coordinate.\n * @see {@link getPositions}\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinate\n */\nexports.getRowColCoords = function getRowColCoords (version) {\n  if (version === 1) return []\n\n  const posCount = Math.floor(version / 7) + 2\n  const size = getSymbolSize(version)\n  const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2\n  const positions = [size - 7] // Last coord is always (size - 7)\n\n  for (let i = 1; i < posCount - 1; i++) {\n    positions[i] = positions[i - 1] - intervals\n  }\n\n  positions.push(6) // First coord is always 6\n\n  return positions.reverse()\n}\n\n/**\n * Returns an array containing the positions of each alignment pattern.\n * Each array's element represent the center point of the pattern as (x, y) coordinates\n *\n * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n * and filtering out the items that overlaps with finder pattern\n *\n * @example\n * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n * The alignment patterns, therefore, are to be centered on (row, column)\n * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n * and are not therefore used for alignment patterns.\n *\n * let pos = getPositions(7)\n * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\nexports.getPositions = function getPositions (version) {\n  const coords = []\n  const pos = exports.getRowColCoords(version)\n  const posLength = pos.length\n\n  for (let i = 0; i < posLength; i++) {\n    for (let j = 0; j < posLength; j++) {\n      // Skip if position is occupied by finder patterns\n      if ((i === 0 && j === 0) || // top-left\n          (i === 0 && j === posLength - 1) || // bottom-left\n          (i === posLength - 1 && j === 0)) { // top-right\n        continue\n      }\n\n      coords.push([pos[i], pos[j]])\n    }\n  }\n\n  return coords\n}\n","const getSymbolSize = require('./utils').getSymbolSize\nconst FINDER_PATTERN_SIZE = 7\n\n/**\n * Returns an array containing the positions of each finder pattern.\n * Each array's element represent the top-left point of the pattern as (x, y) coordinates\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\nexports.getPositions = function getPositions (version) {\n  const size = getSymbolSize(version)\n\n  return [\n    // top-left\n    [0, 0],\n    // top-right\n    [size - FINDER_PATTERN_SIZE, 0],\n    // bottom-left\n    [0, size - FINDER_PATTERN_SIZE]\n  ]\n}\n","/**\n * Data mask pattern reference\n * @type {Object}\n */\nexports.Patterns = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n}\n\n/**\n * Weighted penalty scores for the undesirable features\n * @type {Object}\n */\nconst PenaltyScores = {\n  N1: 3,\n  N2: 3,\n  N3: 40,\n  N4: 10\n}\n\n/**\n * Check if mask pattern value is valid\n *\n * @param  {Number}  mask    Mask pattern\n * @return {Boolean}         true if valid, false otherwise\n */\nexports.isValid = function isValid (mask) {\n  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7\n}\n\n/**\n * Returns mask pattern from a value.\n * If value is not valid, returns undefined\n *\n * @param  {Number|String} value        Mask pattern value\n * @return {Number}                     Valid mask pattern or undefined\n */\nexports.from = function from (value) {\n  return exports.isValid(value) ? parseInt(value, 10) : undefined\n}\n\n/**\n* Find adjacent modules in row/column with the same color\n* and assign a penalty value.\n*\n* Points: N1 + i\n* i is the amount by which the number of adjacent modules of the same color exceeds 5\n*/\nexports.getPenaltyN1 = function getPenaltyN1 (data) {\n  const size = data.size\n  let points = 0\n  let sameCountCol = 0\n  let sameCountRow = 0\n  let lastCol = null\n  let lastRow = null\n\n  for (let row = 0; row < size; row++) {\n    sameCountCol = sameCountRow = 0\n    lastCol = lastRow = null\n\n    for (let col = 0; col < size; col++) {\n      let module = data.get(row, col)\n      if (module === lastCol) {\n        sameCountCol++\n      } else {\n        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)\n        lastCol = module\n        sameCountCol = 1\n      }\n\n      module = data.get(col, row)\n      if (module === lastRow) {\n        sameCountRow++\n      } else {\n        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)\n        lastRow = module\n        sameCountRow = 1\n      }\n    }\n\n    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)\n    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)\n  }\n\n  return points\n}\n\n/**\n * Find 2x2 blocks with the same color and assign a penalty value\n *\n * Points: N2 * (m - 1) * (n - 1)\n */\nexports.getPenaltyN2 = function getPenaltyN2 (data) {\n  const size = data.size\n  let points = 0\n\n  for (let row = 0; row < size - 1; row++) {\n    for (let col = 0; col < size - 1; col++) {\n      const last = data.get(row, col) +\n        data.get(row, col + 1) +\n        data.get(row + 1, col) +\n        data.get(row + 1, col + 1)\n\n      if (last === 4 || last === 0) points++\n    }\n  }\n\n  return points * PenaltyScores.N2\n}\n\n/**\n * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n * preceded or followed by light area 4 modules wide\n *\n * Points: N3 * number of pattern found\n */\nexports.getPenaltyN3 = function getPenaltyN3 (data) {\n  const size = data.size\n  let points = 0\n  let bitsCol = 0\n  let bitsRow = 0\n\n  for (let row = 0; row < size; row++) {\n    bitsCol = bitsRow = 0\n    for (let col = 0; col < size; col++) {\n      bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col)\n      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++\n\n      bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row)\n      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++\n    }\n  }\n\n  return points * PenaltyScores.N3\n}\n\n/**\n * Calculate proportion of dark modules in entire symbol\n *\n * Points: N4 * k\n *\n * k is the rating of the deviation of the proportion of dark modules\n * in the symbol from 50% in steps of 5%\n */\nexports.getPenaltyN4 = function getPenaltyN4 (data) {\n  let darkCount = 0\n  const modulesCount = data.data.length\n\n  for (let i = 0; i < modulesCount; i++) darkCount += data.data[i]\n\n  const k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10)\n\n  return k * PenaltyScores.N4\n}\n\n/**\n * Return mask value at given position\n *\n * @param  {Number} maskPattern Pattern reference value\n * @param  {Number} i           Row\n * @param  {Number} j           Column\n * @return {Boolean}            Mask value\n */\nfunction getMaskAt (maskPattern, i, j) {\n  switch (maskPattern) {\n    case exports.Patterns.PATTERN000: return (i + j) % 2 === 0\n    case exports.Patterns.PATTERN001: return i % 2 === 0\n    case exports.Patterns.PATTERN010: return j % 3 === 0\n    case exports.Patterns.PATTERN011: return (i + j) % 3 === 0\n    case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0\n    case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0\n    case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0\n    case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0\n\n    default: throw new Error('bad maskPattern:' + maskPattern)\n  }\n}\n\n/**\n * Apply a mask pattern to a BitMatrix\n *\n * @param  {Number}    pattern Pattern reference number\n * @param  {BitMatrix} data    BitMatrix data\n */\nexports.applyMask = function applyMask (pattern, data) {\n  const size = data.size\n\n  for (let col = 0; col < size; col++) {\n    for (let row = 0; row < size; row++) {\n      if (data.isReserved(row, col)) continue\n      data.xor(row, col, getMaskAt(pattern, row, col))\n    }\n  }\n}\n\n/**\n * Returns the best mask pattern for data\n *\n * @param  {BitMatrix} data\n * @return {Number} Mask pattern reference number\n */\nexports.getBestMask = function getBestMask (data, setupFormatFunc) {\n  const numPatterns = Object.keys(exports.Patterns).length\n  let bestPattern = 0\n  let lowerPenalty = Infinity\n\n  for (let p = 0; p < numPatterns; p++) {\n    setupFormatFunc(p)\n    exports.applyMask(p, data)\n\n    // Calculate penalty\n    const penalty =\n      exports.getPenaltyN1(data) +\n      exports.getPenaltyN2(data) +\n      exports.getPenaltyN3(data) +\n      exports.getPenaltyN4(data)\n\n    // Undo previously applied mask\n    exports.applyMask(p, data)\n\n    if (penalty < lowerPenalty) {\n      lowerPenalty = penalty\n      bestPattern = p\n    }\n  }\n\n  return bestPattern\n}\n","const ECLevel = require('./error-correction-level')\r\n\r\nconst EC_BLOCKS_TABLE = [\r\n// L  M  Q  H\r\n  1, 1, 1, 1,\r\n  1, 1, 1, 1,\r\n  1, 1, 2, 2,\r\n  1, 2, 2, 4,\r\n  1, 2, 4, 4,\r\n  2, 4, 4, 4,\r\n  2, 4, 6, 5,\r\n  2, 4, 6, 6,\r\n  2, 5, 8, 8,\r\n  4, 5, 8, 8,\r\n  4, 5, 8, 11,\r\n  4, 8, 10, 11,\r\n  4, 9, 12, 16,\r\n  4, 9, 16, 16,\r\n  6, 10, 12, 18,\r\n  6, 10, 17, 16,\r\n  6, 11, 16, 19,\r\n  6, 13, 18, 21,\r\n  7, 14, 21, 25,\r\n  8, 16, 20, 25,\r\n  8, 17, 23, 25,\r\n  9, 17, 23, 34,\r\n  9, 18, 25, 30,\r\n  10, 20, 27, 32,\r\n  12, 21, 29, 35,\r\n  12, 23, 34, 37,\r\n  12, 25, 34, 40,\r\n  13, 26, 35, 42,\r\n  14, 28, 38, 45,\r\n  15, 29, 40, 48,\r\n  16, 31, 43, 51,\r\n  17, 33, 45, 54,\r\n  18, 35, 48, 57,\r\n  19, 37, 51, 60,\r\n  19, 38, 53, 63,\r\n  20, 40, 56, 66,\r\n  21, 43, 59, 70,\r\n  22, 45, 62, 74,\r\n  24, 47, 65, 77,\r\n  25, 49, 68, 81\r\n]\r\n\r\nconst EC_CODEWORDS_TABLE = [\r\n// L  M  Q  H\r\n  7, 10, 13, 17,\r\n  10, 16, 22, 28,\r\n  15, 26, 36, 44,\r\n  20, 36, 52, 64,\r\n  26, 48, 72, 88,\r\n  36, 64, 96, 112,\r\n  40, 72, 108, 130,\r\n  48, 88, 132, 156,\r\n  60, 110, 160, 192,\r\n  72, 130, 192, 224,\r\n  80, 150, 224, 264,\r\n  96, 176, 260, 308,\r\n  104, 198, 288, 352,\r\n  120, 216, 320, 384,\r\n  132, 240, 360, 432,\r\n  144, 280, 408, 480,\r\n  168, 308, 448, 532,\r\n  180, 338, 504, 588,\r\n  196, 364, 546, 650,\r\n  224, 416, 600, 700,\r\n  224, 442, 644, 750,\r\n  252, 476, 690, 816,\r\n  270, 504, 750, 900,\r\n  300, 560, 810, 960,\r\n  312, 588, 870, 1050,\r\n  336, 644, 952, 1110,\r\n  360, 700, 1020, 1200,\r\n  390, 728, 1050, 1260,\r\n  420, 784, 1140, 1350,\r\n  450, 812, 1200, 1440,\r\n  480, 868, 1290, 1530,\r\n  510, 924, 1350, 1620,\r\n  540, 980, 1440, 1710,\r\n  570, 1036, 1530, 1800,\r\n  570, 1064, 1590, 1890,\r\n  600, 1120, 1680, 1980,\r\n  630, 1204, 1770, 2100,\r\n  660, 1260, 1860, 2220,\r\n  720, 1316, 1950, 2310,\r\n  750, 1372, 2040, 2430\r\n]\r\n\r\n/**\r\n * Returns the number of error correction block that the QR Code should contain\r\n * for the specified version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction blocks\r\n */\r\nexports.getBlocksCount = function getBlocksCount (version, errorCorrectionLevel) {\r\n  switch (errorCorrectionLevel) {\r\n    case ECLevel.L:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]\r\n    case ECLevel.M:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]\r\n    case ECLevel.Q:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]\r\n    case ECLevel.H:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the number of error correction codewords to use for the specified\r\n * version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction codewords\r\n */\r\nexports.getTotalCodewordsCount = function getTotalCodewordsCount (version, errorCorrectionLevel) {\r\n  switch (errorCorrectionLevel) {\r\n    case ECLevel.L:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]\r\n    case ECLevel.M:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]\r\n    case ECLevel.Q:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]\r\n    case ECLevel.H:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n","const EXP_TABLE = new Uint8Array(512)\nconst LOG_TABLE = new Uint8Array(256)\n/**\n * Precompute the log and anti-log tables for faster computation later\n *\n * For each possible value in the galois field 2^8, we will pre-compute\n * the logarithm and anti-logarithm (exponential) of this value\n *\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\n */\n;(function initTables () {\n  let x = 1\n  for (let i = 0; i < 255; i++) {\n    EXP_TABLE[i] = x\n    LOG_TABLE[x] = i\n\n    x <<= 1 // multiply by 2\n\n    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n    // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n    if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)\n      x ^= 0x11D\n    }\n  }\n\n  // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n  // stay inside the bounds (because we will mainly use this table for the multiplication of\n  // two GF numbers, no more).\n  // @see {@link mul}\n  for (let i = 255; i < 512; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 255]\n  }\n}())\n\n/**\n * Returns log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\nexports.log = function log (n) {\n  if (n < 1) throw new Error('log(' + n + ')')\n  return LOG_TABLE[n]\n}\n\n/**\n * Returns anti-log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\nexports.exp = function exp (n) {\n  return EXP_TABLE[n]\n}\n\n/**\n * Multiplies two number inside Galois Field\n *\n * @param  {Number} x\n * @param  {Number} y\n * @return {Number}\n */\nexports.mul = function mul (x, y) {\n  if (x === 0 || y === 0) return 0\n\n  // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n  // @see {@link initTables}\n  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]\n}\n","const GF = require('./galois-field')\n\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Uint8Array} p1 Polynomial\n * @param  {Uint8Array} p2 Polynomial\n * @return {Uint8Array}    Product of p1 and p2\n */\nexports.mul = function mul (p1, p2) {\n  const coeff = new Uint8Array(p1.length + p2.length - 1)\n\n  for (let i = 0; i < p1.length; i++) {\n    for (let j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j])\n    }\n  }\n\n  return coeff\n}\n\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Uint8Array} divident Polynomial\n * @param  {Uint8Array} divisor  Polynomial\n * @return {Uint8Array}          Remainder\n */\nexports.mod = function mod (divident, divisor) {\n  let result = new Uint8Array(divident)\n\n  while ((result.length - divisor.length) >= 0) {\n    const coeff = result[0]\n\n    for (let i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff)\n    }\n\n    // remove all zeros from buffer head\n    let offset = 0\n    while (offset < result.length && result[offset] === 0) offset++\n    result = result.slice(offset)\n  }\n\n  return result\n}\n\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Uint8Array}    Buffer containing polynomial coefficients\n */\nexports.generateECPolynomial = function generateECPolynomial (degree) {\n  let poly = new Uint8Array([1])\n  for (let i = 0; i < degree; i++) {\n    poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]))\n  }\n\n  return poly\n}\n","const Polynomial = require('./polynomial')\n\nfunction ReedSolomonEncoder (degree) {\n  this.genPoly = undefined\n  this.degree = degree\n\n  if (this.degree) this.initialize(this.degree)\n}\n\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */\nReedSolomonEncoder.prototype.initialize = function initialize (degree) {\n  // create an irreducible generator polynomial\n  this.degree = degree\n  this.genPoly = Polynomial.generateECPolynomial(this.degree)\n}\n\n/**\n * Encodes a chunk of data\n *\n * @param  {Uint8Array} data Buffer containing input data\n * @return {Uint8Array}      Buffer containing encoded data\n */\nReedSolomonEncoder.prototype.encode = function encode (data) {\n  if (!this.genPoly) {\n    throw new Error('Encoder not initialized')\n  }\n\n  // Calculate EC for this data block\n  // extends data size to data+genPoly size\n  const paddedData = new Uint8Array(data.length + this.degree)\n  paddedData.set(data)\n\n  // The error correction codewords are the remainder after dividing the data codewords\n  // by a generator polynomial\n  const remainder = Polynomial.mod(paddedData, this.genPoly)\n\n  // return EC data blocks (last n byte, where n is the degree of genPoly)\n  // If coefficients number in remainder are less than genPoly degree,\n  // pad with 0s to the left to reach the needed number of coefficients\n  const start = this.degree - remainder.length\n  if (start > 0) {\n    const buff = new Uint8Array(this.degree)\n    buff.set(remainder, start)\n\n    return buff\n  }\n\n  return remainder\n}\n\nmodule.exports = ReedSolomonEncoder\n","/**\n * Check if QR Code version is valid\n *\n * @param  {Number}  version QR Code version\n * @return {Boolean}         true if valid version, false otherwise\n */\nexports.isValid = function isValid (version) {\n  return !isNaN(version) && version >= 1 && version <= 40\n}\n","const numeric = '[0-9]+'\nconst alphanumeric = '[A-Z $%*+\\\\-./:]+'\nlet kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +\n  '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +\n  '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +\n  '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+'\nkanji = kanji.replace(/u/g, '\\\\u')\n\nconst byte = '(?:(?![A-Z0-9 $%*+\\\\-./:]|' + kanji + ')(?:.|[\\r\\n]))+'\n\nexports.KANJI = new RegExp(kanji, 'g')\nexports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\\\-./:]+', 'g')\nexports.BYTE = new RegExp(byte, 'g')\nexports.NUMERIC = new RegExp(numeric, 'g')\nexports.ALPHANUMERIC = new RegExp(alphanumeric, 'g')\n\nconst TEST_KANJI = new RegExp('^' + kanji + '$')\nconst TEST_NUMERIC = new RegExp('^' + numeric + '$')\nconst TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\\\-./:]+$')\n\nexports.testKanji = function testKanji (str) {\n  return TEST_KANJI.test(str)\n}\n\nexports.testNumeric = function testNumeric (str) {\n  return TEST_NUMERIC.test(str)\n}\n\nexports.testAlphanumeric = function testAlphanumeric (str) {\n  return TEST_ALPHANUMERIC.test(str)\n}\n","const VersionCheck = require('./version-check')\nconst Regex = require('./regex')\n\n/**\n * Numeric mode encodes data from the decimal digit set (0 - 9)\n * (byte values 30HEX to 39HEX).\n * Normally, 3 data characters are represented by 10 bits.\n *\n * @type {Object}\n */\nexports.NUMERIC = {\n  id: 'Numeric',\n  bit: 1 << 0,\n  ccBits: [10, 12, 14]\n}\n\n/**\n * Alphanumeric mode encodes data from a set of 45 characters,\n * i.e. 10 numeric digits (0 - 9),\n *      26 alphabetic characters (A - Z),\n *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n * Normally, two input characters are represented by 11 bits.\n *\n * @type {Object}\n */\nexports.ALPHANUMERIC = {\n  id: 'Alphanumeric',\n  bit: 1 << 1,\n  ccBits: [9, 11, 13]\n}\n\n/**\n * In byte mode, data is encoded at 8 bits per character.\n *\n * @type {Object}\n */\nexports.BYTE = {\n  id: 'Byte',\n  bit: 1 << 2,\n  ccBits: [8, 16, 16]\n}\n\n/**\n * The Kanji mode efficiently encodes Kanji characters in accordance with\n * the Shift JIS system based on JIS X 0208.\n * The Shift JIS values are shifted from the JIS X 0208 values.\n * JIS X 0208 gives details of the shift coded representation.\n * Each two-byte character value is compacted to a 13-bit binary codeword.\n *\n * @type {Object}\n */\nexports.KANJI = {\n  id: 'Kanji',\n  bit: 1 << 3,\n  ccBits: [8, 10, 12]\n}\n\n/**\n * Mixed mode will contain a sequences of data in a combination of any of\n * the modes described above\n *\n * @type {Object}\n */\nexports.MIXED = {\n  bit: -1\n}\n\n/**\n * Returns the number of bits needed to store the data length\n * according to QR Code specifications.\n *\n * @param  {Mode}   mode    Data mode\n * @param  {Number} version QR Code version\n * @return {Number}         Number of bits\n */\nexports.getCharCountIndicator = function getCharCountIndicator (mode, version) {\n  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)\n\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid version: ' + version)\n  }\n\n  if (version >= 1 && version < 10) return mode.ccBits[0]\n  else if (version < 27) return mode.ccBits[1]\n  return mode.ccBits[2]\n}\n\n/**\n * Returns the most efficient mode to store the specified data\n *\n * @param  {String} dataStr Input data string\n * @return {Mode}           Best mode\n */\nexports.getBestModeForData = function getBestModeForData (dataStr) {\n  if (Regex.testNumeric(dataStr)) return exports.NUMERIC\n  else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC\n  else if (Regex.testKanji(dataStr)) return exports.KANJI\n  else return exports.BYTE\n}\n\n/**\n * Return mode name as string\n *\n * @param {Mode} mode Mode object\n * @returns {String}  Mode name\n */\nexports.toString = function toString (mode) {\n  if (mode && mode.id) return mode.id\n  throw new Error('Invalid mode')\n}\n\n/**\n * Check if input param is a valid mode object\n *\n * @param   {Mode}    mode Mode object\n * @returns {Boolean} True if valid mode, false otherwise\n */\nexports.isValid = function isValid (mode) {\n  return mode && mode.bit && mode.ccBits\n}\n\n/**\n * Get mode object from its name\n *\n * @param   {String} string Mode name\n * @returns {Mode}          Mode object\n */\nfunction fromString (string) {\n  if (typeof string !== 'string') {\n    throw new Error('Param is not a string')\n  }\n\n  const lcStr = string.toLowerCase()\n\n  switch (lcStr) {\n    case 'numeric':\n      return exports.NUMERIC\n    case 'alphanumeric':\n      return exports.ALPHANUMERIC\n    case 'kanji':\n      return exports.KANJI\n    case 'byte':\n      return exports.BYTE\n    default:\n      throw new Error('Unknown mode: ' + string)\n  }\n}\n\n/**\n * Returns mode from a value.\n * If value is not a valid mode, returns defaultValue\n *\n * @param  {Mode|String} value        Encoding mode\n * @param  {Mode}        defaultValue Fallback value\n * @return {Mode}                     Encoding mode\n */\nexports.from = function from (value, defaultValue) {\n  if (exports.isValid(value)) {\n    return value\n  }\n\n  try {\n    return fromString(value)\n  } catch (e) {\n    return defaultValue\n  }\n}\n","const Utils = require('./utils')\nconst ECCode = require('./error-correction-code')\nconst ECLevel = require('./error-correction-level')\nconst Mode = require('./mode')\nconst VersionCheck = require('./version-check')\n\n// Generator polynomial used to encode version information\nconst G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0)\nconst G18_BCH = Utils.getBCHDigit(G18)\n\nfunction getBestVersionForDataLength (mode, length, errorCorrectionLevel) {\n  for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\nfunction getReservedBitsCount (mode, version) {\n  // Character count indicator + mode indicator bits\n  return Mode.getCharCountIndicator(mode, version) + 4\n}\n\nfunction getTotalBitsFromDataArray (segments, version) {\n  let totalBits = 0\n\n  segments.forEach(function (data) {\n    const reservedBits = getReservedBitsCount(data.mode, version)\n    totalBits += reservedBits + data.getBitsLength()\n  })\n\n  return totalBits\n}\n\nfunction getBestVersionForMixedData (segments, errorCorrectionLevel) {\n  for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    const length = getTotalBitsFromDataArray(segments, currentVersion)\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */\nexports.from = function from (value, defaultValue) {\n  if (VersionCheck.isValid(value)) {\n    return parseInt(value, 10)\n  }\n\n  return defaultValue\n}\n\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */\nexports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode) {\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  // Use Byte mode as default\n  if (typeof mode === 'undefined') mode = Mode.BYTE\n\n  // Total codewords for this QR code version (Data + Error correction)\n  const totalCodewords = Utils.getSymbolTotalCodewords(version)\n\n  // Total number of error correction codewords\n  const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n\n  // Total number of data codewords\n  const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8\n\n  if (mode === Mode.MIXED) return dataTotalCodewordsBits\n\n  const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version)\n\n  // Return max number of storable codewords\n  switch (mode) {\n    case Mode.NUMERIC:\n      return Math.floor((usableBits / 10) * 3)\n\n    case Mode.ALPHANUMERIC:\n      return Math.floor((usableBits / 11) * 2)\n\n    case Mode.KANJI:\n      return Math.floor(usableBits / 13)\n\n    case Mode.BYTE:\n    default:\n      return Math.floor(usableBits / 8)\n  }\n}\n\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */\nexports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel) {\n  let seg\n\n  const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M)\n\n  if (Array.isArray(data)) {\n    if (data.length > 1) {\n      return getBestVersionForMixedData(data, ecl)\n    }\n\n    if (data.length === 0) {\n      return 1\n    }\n\n    seg = data[0]\n  } else {\n    seg = data\n  }\n\n  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)\n}\n\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */\nexports.getEncodedBits = function getEncodedBits (version) {\n  if (!VersionCheck.isValid(version) || version < 7) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  let d = version << 12\n\n  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n    d ^= (G18 << (Utils.getBCHDigit(d) - G18_BCH))\n  }\n\n  return (version << 12) | d\n}\n","const Utils = require('./utils')\n\nconst G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0)\nconst G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1)\nconst G15_BCH = Utils.getBCHDigit(G15)\n\n/**\n * Returns format information with relative error correction bits\n *\n * The format information is a 15-bit sequence containing 5 data bits,\n * with 10 error correction bits calculated using the (15, 5) BCH code.\n *\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Number} mask                 Mask pattern\n * @return {Number}                      Encoded format information bits\n */\nexports.getEncodedBits = function getEncodedBits (errorCorrectionLevel, mask) {\n  const data = ((errorCorrectionLevel.bit << 3) | mask)\n  let d = data << 10\n\n  while (Utils.getBCHDigit(d) - G15_BCH >= 0) {\n    d ^= (G15 << (Utils.getBCHDigit(d) - G15_BCH))\n  }\n\n  // xor final data with mask pattern in order to ensure that\n  // no combination of Error Correction Level and data mask pattern\n  // will result in an all-zero data string\n  return ((data << 10) | d) ^ G15_MASK\n}\n","const Mode = require('./mode')\n\nfunction NumericData (data) {\n  this.mode = Mode.NUMERIC\n  this.data = data.toString()\n}\n\nNumericData.getBitsLength = function getBitsLength (length) {\n  return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)\n}\n\nNumericData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nNumericData.prototype.getBitsLength = function getBitsLength () {\n  return NumericData.getBitsLength(this.data.length)\n}\n\nNumericData.prototype.write = function write (bitBuffer) {\n  let i, group, value\n\n  // The input data string is divided into groups of three digits,\n  // and each group is converted to its 10-bit binary equivalent.\n  for (i = 0; i + 3 <= this.data.length; i += 3) {\n    group = this.data.substr(i, 3)\n    value = parseInt(group, 10)\n\n    bitBuffer.put(value, 10)\n  }\n\n  // If the number of input digits is not an exact multiple of three,\n  // the final one or two digits are converted to 4 or 7 bits respectively.\n  const remainingNum = this.data.length - i\n  if (remainingNum > 0) {\n    group = this.data.substr(i)\n    value = parseInt(group, 10)\n\n    bitBuffer.put(value, remainingNum * 3 + 1)\n  }\n}\n\nmodule.exports = NumericData\n","const Mode = require('./mode')\n\n/**\n * Array of characters available in alphanumeric mode\n *\n * As per QR Code specification, to each character\n * is assigned a value from 0 to 44 which in this case coincides\n * with the array index\n *\n * @type {Array}\n */\nconst ALPHA_NUM_CHARS = [\n  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n  ' ', '$', '%', '*', '+', '-', '.', '/', ':'\n]\n\nfunction AlphanumericData (data) {\n  this.mode = Mode.ALPHANUMERIC\n  this.data = data\n}\n\nAlphanumericData.getBitsLength = function getBitsLength (length) {\n  return 11 * Math.floor(length / 2) + 6 * (length % 2)\n}\n\nAlphanumericData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nAlphanumericData.prototype.getBitsLength = function getBitsLength () {\n  return AlphanumericData.getBitsLength(this.data.length)\n}\n\nAlphanumericData.prototype.write = function write (bitBuffer) {\n  let i\n\n  // Input data characters are divided into groups of two characters\n  // and encoded as 11-bit binary codes.\n  for (i = 0; i + 2 <= this.data.length; i += 2) {\n    // The character value of the first character is multiplied by 45\n    let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45\n\n    // The character value of the second digit is added to the product\n    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1])\n\n    // The sum is then stored as 11-bit binary number\n    bitBuffer.put(value, 11)\n  }\n\n  // If the number of input data characters is not a multiple of two,\n  // the character value of the final character is encoded as a 6-bit binary number.\n  if (this.data.length % 2) {\n    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6)\n  }\n}\n\nmodule.exports = AlphanumericData\n","const encodeUtf8 = require('encode-utf8')\nconst Mode = require('./mode')\n\nfunction ByteData (data) {\n  this.mode = Mode.BYTE\n  if (typeof (data) === 'string') {\n    data = encodeUtf8(data)\n  }\n  this.data = new Uint8Array(data)\n}\n\nByteData.getBitsLength = function getBitsLength (length) {\n  return length * 8\n}\n\nByteData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nByteData.prototype.getBitsLength = function getBitsLength () {\n  return ByteData.getBitsLength(this.data.length)\n}\n\nByteData.prototype.write = function (bitBuffer) {\n  for (let i = 0, l = this.data.length; i < l; i++) {\n    bitBuffer.put(this.data[i], 8)\n  }\n}\n\nmodule.exports = ByteData\n","'use strict'\n\nmodule.exports = function encodeUtf8 (input) {\n  var result = []\n  var size = input.length\n\n  for (var index = 0; index < size; index++) {\n    var point = input.charCodeAt(index)\n\n    if (point >= 0xD800 && point <= 0xDBFF && size > index + 1) {\n      var second = input.charCodeAt(index + 1)\n\n      if (second >= 0xDC00 && second <= 0xDFFF) {\n        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        point = (point - 0xD800) * 0x400 + second - 0xDC00 + 0x10000\n        index += 1\n      }\n    }\n\n    // US-ASCII\n    if (point < 0x80) {\n      result.push(point)\n      continue\n    }\n\n    // 2-byte UTF-8\n    if (point < 0x800) {\n      result.push((point >> 6) | 192)\n      result.push((point & 63) | 128)\n      continue\n    }\n\n    // 3-byte UTF-8\n    if (point < 0xD800 || (point >= 0xE000 && point < 0x10000)) {\n      result.push((point >> 12) | 224)\n      result.push(((point >> 6) & 63) | 128)\n      result.push((point & 63) | 128)\n      continue\n    }\n\n    // 4-byte UTF-8\n    if (point >= 0x10000 && point <= 0x10FFFF) {\n      result.push((point >> 18) | 240)\n      result.push(((point >> 12) & 63) | 128)\n      result.push(((point >> 6) & 63) | 128)\n      result.push((point & 63) | 128)\n      continue\n    }\n\n    // Invalid character\n    result.push(0xEF, 0xBF, 0xBD)\n  }\n\n  return new Uint8Array(result).buffer\n}\n","const Mode = require('./mode')\nconst Utils = require('./utils')\n\nfunction KanjiData (data) {\n  this.mode = Mode.KANJI\n  this.data = data\n}\n\nKanjiData.getBitsLength = function getBitsLength (length) {\n  return length * 13\n}\n\nKanjiData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nKanjiData.prototype.getBitsLength = function getBitsLength () {\n  return KanjiData.getBitsLength(this.data.length)\n}\n\nKanjiData.prototype.write = function (bitBuffer) {\n  let i\n\n  // In the Shift JIS system, Kanji characters are represented by a two byte combination.\n  // These byte values are shifted from the JIS X 0208 values.\n  // JIS X 0208 gives details of the shift coded representation.\n  for (i = 0; i < this.data.length; i++) {\n    let value = Utils.toSJIS(this.data[i])\n\n    // For characters with Shift JIS values from 0x8140 to 0x9FFC:\n    if (value >= 0x8140 && value <= 0x9FFC) {\n      // Subtract 0x8140 from Shift JIS value\n      value -= 0x8140\n\n    // For characters with Shift JIS values from 0xE040 to 0xEBBF\n    } else if (value >= 0xE040 && value <= 0xEBBF) {\n      // Subtract 0xC140 from Shift JIS value\n      value -= 0xC140\n    } else {\n      throw new Error(\n        'Invalid SJIS character: ' + this.data[i] + '\\n' +\n        'Make sure your charset is UTF-8')\n    }\n\n    // Multiply most significant byte of result by 0xC0\n    // and add least significant byte to product\n    value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff)\n\n    // Convert result to a 13-bit binary string\n    bitBuffer.put(value, 13)\n  }\n}\n\nmodule.exports = KanjiData\n","'use strict';\n\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\nvar dijkstra = {\n  single_source_shortest_paths: function(graph, s, d) {\n    // Predecessor map for each node that has been encountered.\n    // node ID => predecessor node ID\n    var predecessors = {};\n\n    // Costs of shortest paths from s to all nodes encountered.\n    // node ID => cost\n    var costs = {};\n    costs[s] = 0;\n\n    // Costs of shortest paths from s to all nodes encountered; differs from\n    // `costs` in that it provides easy access to the node that currently has\n    // the known shortest path from s.\n    // XXX: Do we actually need both `costs` and `open`?\n    var open = dijkstra.PriorityQueue.make();\n    open.push(s, 0);\n\n    var closest,\n        u, v,\n        cost_of_s_to_u,\n        adjacent_nodes,\n        cost_of_e,\n        cost_of_s_to_u_plus_cost_of_e,\n        cost_of_s_to_v,\n        first_visit;\n    while (!open.empty()) {\n      // In the nodes remaining in graph that have a known cost from s,\n      // find the node, u, that currently has the shortest path from s.\n      closest = open.pop();\n      u = closest.value;\n      cost_of_s_to_u = closest.cost;\n\n      // Get nodes adjacent to u...\n      adjacent_nodes = graph[u] || {};\n\n      // ...and explore the edges that connect u to those nodes, updating\n      // the cost of the shortest paths to any or all of those nodes as\n      // necessary. v is the node across the current edge from u.\n      for (v in adjacent_nodes) {\n        if (adjacent_nodes.hasOwnProperty(v)) {\n          // Get the cost of the edge running from u to v.\n          cost_of_e = adjacent_nodes[v];\n\n          // Cost of s to u plus the cost of u to v across e--this is *a*\n          // cost from s to v that may or may not be less than the current\n          // known cost to v.\n          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n          // If we haven't visited v yet OR if the current known cost from s to\n          // v is greater than the new cost we just found (cost of s to u plus\n          // cost of u to v across e), update v's cost in the cost list and\n          // update v's predecessor in the predecessor list (it's now u).\n          cost_of_s_to_v = costs[v];\n          first_visit = (typeof costs[v] === 'undefined');\n          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n            costs[v] = cost_of_s_to_u_plus_cost_of_e;\n            open.push(v, cost_of_s_to_u_plus_cost_of_e);\n            predecessors[v] = u;\n          }\n        }\n      }\n    }\n\n    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n      throw new Error(msg);\n    }\n\n    return predecessors;\n  },\n\n  extract_shortest_path_from_predecessor_list: function(predecessors, d) {\n    var nodes = [];\n    var u = d;\n    var predecessor;\n    while (u) {\n      nodes.push(u);\n      predecessor = predecessors[u];\n      u = predecessors[u];\n    }\n    nodes.reverse();\n    return nodes;\n  },\n\n  find_path: function(graph, s, d) {\n    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n    return dijkstra.extract_shortest_path_from_predecessor_list(\n      predecessors, d);\n  },\n\n  /**\n   * A very naive priority queue implementation.\n   */\n  PriorityQueue: {\n    make: function (opts) {\n      var T = dijkstra.PriorityQueue,\n          t = {},\n          key;\n      opts = opts || {};\n      for (key in T) {\n        if (T.hasOwnProperty(key)) {\n          t[key] = T[key];\n        }\n      }\n      t.queue = [];\n      t.sorter = opts.sorter || T.default_sorter;\n      return t;\n    },\n\n    default_sorter: function (a, b) {\n      return a.cost - b.cost;\n    },\n\n    /**\n     * Add a new item to the queue and ensure the highest priority element\n     * is at the front of the queue.\n     */\n    push: function (value, cost) {\n      var item = {value: value, cost: cost};\n      this.queue.push(item);\n      this.queue.sort(this.sorter);\n    },\n\n    /**\n     * Return the highest priority element in the queue.\n     */\n    pop: function () {\n      return this.queue.shift();\n    },\n\n    empty: function () {\n      return this.queue.length === 0;\n    }\n  }\n};\n\n\n// node.js module exports\nif (typeof module !== 'undefined') {\n  module.exports = dijkstra;\n}\n","const Mode = require('./mode')\nconst NumericData = require('./numeric-data')\nconst AlphanumericData = require('./alphanumeric-data')\nconst ByteData = require('./byte-data')\nconst KanjiData = require('./kanji-data')\nconst Regex = require('./regex')\nconst Utils = require('./utils')\nconst dijkstra = require('dijkstrajs')\n\n/**\n * Returns UTF8 byte length\n *\n * @param  {String} str Input string\n * @return {Number}     Number of byte\n */\nfunction getStringByteLength (str) {\n  return unescape(encodeURIComponent(str)).length\n}\n\n/**\n * Get a list of segments of the specified mode\n * from a string\n *\n * @param  {Mode}   mode Segment mode\n * @param  {String} str  String to process\n * @return {Array}       Array of object with segments data\n */\nfunction getSegments (regex, mode, str) {\n  const segments = []\n  let result\n\n  while ((result = regex.exec(str)) !== null) {\n    segments.push({\n      data: result[0],\n      index: result.index,\n      mode: mode,\n      length: result[0].length\n    })\n  }\n\n  return segments\n}\n\n/**\n * Extracts a series of segments with the appropriate\n * modes from a string\n *\n * @param  {String} dataStr Input string\n * @return {Array}          Array of object with segments data\n */\nfunction getSegmentsFromString (dataStr) {\n  const numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr)\n  const alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr)\n  let byteSegs\n  let kanjiSegs\n\n  if (Utils.isKanjiModeEnabled()) {\n    byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr)\n    kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr)\n  } else {\n    byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr)\n    kanjiSegs = []\n  }\n\n  const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs)\n\n  return segs\n    .sort(function (s1, s2) {\n      return s1.index - s2.index\n    })\n    .map(function (obj) {\n      return {\n        data: obj.data,\n        mode: obj.mode,\n        length: obj.length\n      }\n    })\n}\n\n/**\n * Returns how many bits are needed to encode a string of\n * specified length with the specified mode\n *\n * @param  {Number} length String length\n * @param  {Mode} mode     Segment mode\n * @return {Number}        Bit length\n */\nfunction getSegmentBitsLength (length, mode) {\n  switch (mode) {\n    case Mode.NUMERIC:\n      return NumericData.getBitsLength(length)\n    case Mode.ALPHANUMERIC:\n      return AlphanumericData.getBitsLength(length)\n    case Mode.KANJI:\n      return KanjiData.getBitsLength(length)\n    case Mode.BYTE:\n      return ByteData.getBitsLength(length)\n  }\n}\n\n/**\n * Merges adjacent segments which have the same mode\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */\nfunction mergeSegments (segs) {\n  return segs.reduce(function (acc, curr) {\n    const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null\n    if (prevSeg && prevSeg.mode === curr.mode) {\n      acc[acc.length - 1].data += curr.data\n      return acc\n    }\n\n    acc.push(curr)\n    return acc\n  }, [])\n}\n\n/**\n * Generates a list of all possible nodes combination which\n * will be used to build a segments graph.\n *\n * Nodes are divided by groups. Each group will contain a list of all the modes\n * in which is possible to encode the given text.\n *\n * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.\n * The group for '12345' will contain then 3 objects, one for each\n * possible encoding mode.\n *\n * Each node represents a possible segment.\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */\nfunction buildNodes (segs) {\n  const nodes = []\n  for (let i = 0; i < segs.length; i++) {\n    const seg = segs[i]\n\n    switch (seg.mode) {\n      case Mode.NUMERIC:\n        nodes.push([seg,\n          { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },\n          { data: seg.data, mode: Mode.BYTE, length: seg.length }\n        ])\n        break\n      case Mode.ALPHANUMERIC:\n        nodes.push([seg,\n          { data: seg.data, mode: Mode.BYTE, length: seg.length }\n        ])\n        break\n      case Mode.KANJI:\n        nodes.push([seg,\n          { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }\n        ])\n        break\n      case Mode.BYTE:\n        nodes.push([\n          { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }\n        ])\n    }\n  }\n\n  return nodes\n}\n\n/**\n * Builds a graph from a list of nodes.\n * All segments in each node group will be connected with all the segments of\n * the next group and so on.\n *\n * At each connection will be assigned a weight depending on the\n * segment's byte length.\n *\n * @param  {Array} nodes    Array of object with segments data\n * @param  {Number} version QR Code version\n * @return {Object}         Graph of all possible segments\n */\nfunction buildGraph (nodes, version) {\n  const table = {}\n  const graph = { start: {} }\n  let prevNodeIds = ['start']\n\n  for (let i = 0; i < nodes.length; i++) {\n    const nodeGroup = nodes[i]\n    const currentNodeIds = []\n\n    for (let j = 0; j < nodeGroup.length; j++) {\n      const node = nodeGroup[j]\n      const key = '' + i + j\n\n      currentNodeIds.push(key)\n      table[key] = { node: node, lastCount: 0 }\n      graph[key] = {}\n\n      for (let n = 0; n < prevNodeIds.length; n++) {\n        const prevNodeId = prevNodeIds[n]\n\n        if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {\n          graph[prevNodeId][key] =\n            getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -\n            getSegmentBitsLength(table[prevNodeId].lastCount, node.mode)\n\n          table[prevNodeId].lastCount += node.length\n        } else {\n          if (table[prevNodeId]) table[prevNodeId].lastCount = node.length\n\n          graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +\n            4 + Mode.getCharCountIndicator(node.mode, version) // switch cost\n        }\n      }\n    }\n\n    prevNodeIds = currentNodeIds\n  }\n\n  for (let n = 0; n < prevNodeIds.length; n++) {\n    graph[prevNodeIds[n]].end = 0\n  }\n\n  return { map: graph, table: table }\n}\n\n/**\n * Builds a segment from a specified data and mode.\n * If a mode is not specified, the more suitable will be used.\n *\n * @param  {String} data             Input data\n * @param  {Mode | String} modesHint Data mode\n * @return {Segment}                 Segment\n */\nfunction buildSingleSegment (data, modesHint) {\n  let mode\n  const bestMode = Mode.getBestModeForData(data)\n\n  mode = Mode.from(modesHint, bestMode)\n\n  // Make sure data can be encoded\n  if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {\n    throw new Error('\"' + data + '\"' +\n      ' cannot be encoded with mode ' + Mode.toString(mode) +\n      '.\\n Suggested mode is: ' + Mode.toString(bestMode))\n  }\n\n  // Use Mode.BYTE if Kanji support is disabled\n  if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {\n    mode = Mode.BYTE\n  }\n\n  switch (mode) {\n    case Mode.NUMERIC:\n      return new NumericData(data)\n\n    case Mode.ALPHANUMERIC:\n      return new AlphanumericData(data)\n\n    case Mode.KANJI:\n      return new KanjiData(data)\n\n    case Mode.BYTE:\n      return new ByteData(data)\n  }\n}\n\n/**\n * Builds a list of segments from an array.\n * Array can contain Strings or Objects with segment's info.\n *\n * For each item which is a string, will be generated a segment with the given\n * string and the more appropriate encoding mode.\n *\n * For each item which is an object, will be generated a segment with the given\n * data and mode.\n * Objects must contain at least the property \"data\".\n * If property \"mode\" is not present, the more suitable mode will be used.\n *\n * @param  {Array} array Array of objects with segments data\n * @return {Array}       Array of Segments\n */\nexports.fromArray = function fromArray (array) {\n  return array.reduce(function (acc, seg) {\n    if (typeof seg === 'string') {\n      acc.push(buildSingleSegment(seg, null))\n    } else if (seg.data) {\n      acc.push(buildSingleSegment(seg.data, seg.mode))\n    }\n\n    return acc\n  }, [])\n}\n\n/**\n * Builds an optimized sequence of segments from a string,\n * which will produce the shortest possible bitstream.\n *\n * @param  {String} data    Input string\n * @param  {Number} version QR Code version\n * @return {Array}          Array of segments\n */\nexports.fromString = function fromString (data, version) {\n  const segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled())\n\n  const nodes = buildNodes(segs)\n  const graph = buildGraph(nodes, version)\n  const path = dijkstra.find_path(graph.map, 'start', 'end')\n\n  const optimizedSegs = []\n  for (let i = 1; i < path.length - 1; i++) {\n    optimizedSegs.push(graph.table[path[i]].node)\n  }\n\n  return exports.fromArray(mergeSegments(optimizedSegs))\n}\n\n/**\n * Splits a string in various segments with the modes which\n * best represent their content.\n * The produced segments are far from being optimized.\n * The output of this function is only used to estimate a QR Code version\n * which may contain the data.\n *\n * @param  {string} data Input string\n * @return {Array}       Array of segments\n */\nexports.rawSplit = function rawSplit (data) {\n  return exports.fromArray(\n    getSegmentsFromString(data, Utils.isKanjiModeEnabled())\n  )\n}\n","const Utils = require('./utils')\nconst ECLevel = require('./error-correction-level')\nconst BitBuffer = require('./bit-buffer')\nconst BitMatrix = require('./bit-matrix')\nconst AlignmentPattern = require('./alignment-pattern')\nconst FinderPattern = require('./finder-pattern')\nconst MaskPattern = require('./mask-pattern')\nconst ECCode = require('./error-correction-code')\nconst ReedSolomonEncoder = require('./reed-solomon-encoder')\nconst Version = require('./version')\nconst FormatInfo = require('./format-info')\nconst Mode = require('./mode')\nconst Segments = require('./segments')\n\n/**\n * QRCode for JavaScript\n *\n * modified by Ryan Day for nodejs support\n * Copyright (c) 2011 Ryan Day\n *\n * Licensed under the MIT license:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n//---------------------------------------------------------------------\n// QRCode for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//   http://www.opensource.org/licenses/mit-license.php\n//\n// The word \"QR Code\" is registered trademark of\n// DENSO WAVE INCORPORATED\n//   http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n*/\n\n/**\n * Add finder patterns bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\nfunction setupFinderPattern (matrix, version) {\n  const size = matrix.size\n  const pos = FinderPattern.getPositions(version)\n\n  for (let i = 0; i < pos.length; i++) {\n    const row = pos[i][0]\n    const col = pos[i][1]\n\n    for (let r = -1; r <= 7; r++) {\n      if (row + r <= -1 || size <= row + r) continue\n\n      for (let c = -1; c <= 7; c++) {\n        if (col + c <= -1 || size <= col + c) continue\n\n        if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||\n          (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||\n          (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {\n          matrix.set(row + r, col + c, true, true)\n        } else {\n          matrix.set(row + r, col + c, false, true)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Add timing pattern bits to matrix\n *\n * Note: this function must be called before {@link setupAlignmentPattern}\n *\n * @param  {BitMatrix} matrix Modules matrix\n */\nfunction setupTimingPattern (matrix) {\n  const size = matrix.size\n\n  for (let r = 8; r < size - 8; r++) {\n    const value = r % 2 === 0\n    matrix.set(r, 6, value, true)\n    matrix.set(6, r, value, true)\n  }\n}\n\n/**\n * Add alignment patterns bits to matrix\n *\n * Note: this function must be called after {@link setupTimingPattern}\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\nfunction setupAlignmentPattern (matrix, version) {\n  const pos = AlignmentPattern.getPositions(version)\n\n  for (let i = 0; i < pos.length; i++) {\n    const row = pos[i][0]\n    const col = pos[i][1]\n\n    for (let r = -2; r <= 2; r++) {\n      for (let c = -2; c <= 2; c++) {\n        if (r === -2 || r === 2 || c === -2 || c === 2 ||\n          (r === 0 && c === 0)) {\n          matrix.set(row + r, col + c, true, true)\n        } else {\n          matrix.set(row + r, col + c, false, true)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Add version info bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\nfunction setupVersionInfo (matrix, version) {\n  const size = matrix.size\n  const bits = Version.getEncodedBits(version)\n  let row, col, mod\n\n  for (let i = 0; i < 18; i++) {\n    row = Math.floor(i / 3)\n    col = i % 3 + size - 8 - 3\n    mod = ((bits >> i) & 1) === 1\n\n    matrix.set(row, col, mod, true)\n    matrix.set(col, row, mod, true)\n  }\n}\n\n/**\n * Add format info bits to matrix\n *\n * @param  {BitMatrix} matrix               Modules matrix\n * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level\n * @param  {Number}    maskPattern          Mask pattern reference value\n */\nfunction setupFormatInfo (matrix, errorCorrectionLevel, maskPattern) {\n  const size = matrix.size\n  const bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern)\n  let i, mod\n\n  for (i = 0; i < 15; i++) {\n    mod = ((bits >> i) & 1) === 1\n\n    // vertical\n    if (i < 6) {\n      matrix.set(i, 8, mod, true)\n    } else if (i < 8) {\n      matrix.set(i + 1, 8, mod, true)\n    } else {\n      matrix.set(size - 15 + i, 8, mod, true)\n    }\n\n    // horizontal\n    if (i < 8) {\n      matrix.set(8, size - i - 1, mod, true)\n    } else if (i < 9) {\n      matrix.set(8, 15 - i - 1 + 1, mod, true)\n    } else {\n      matrix.set(8, 15 - i - 1, mod, true)\n    }\n  }\n\n  // fixed module\n  matrix.set(size - 8, 8, 1, true)\n}\n\n/**\n * Add encoded data bits to matrix\n *\n * @param  {BitMatrix}  matrix Modules matrix\n * @param  {Uint8Array} data   Data codewords\n */\nfunction setupData (matrix, data) {\n  const size = matrix.size\n  let inc = -1\n  let row = size - 1\n  let bitIndex = 7\n  let byteIndex = 0\n\n  for (let col = size - 1; col > 0; col -= 2) {\n    if (col === 6) col--\n\n    while (true) {\n      for (let c = 0; c < 2; c++) {\n        if (!matrix.isReserved(row, col - c)) {\n          let dark = false\n\n          if (byteIndex < data.length) {\n            dark = (((data[byteIndex] >>> bitIndex) & 1) === 1)\n          }\n\n          matrix.set(row, col - c, dark)\n          bitIndex--\n\n          if (bitIndex === -1) {\n            byteIndex++\n            bitIndex = 7\n          }\n        }\n      }\n\n      row += inc\n\n      if (row < 0 || size <= row) {\n        row -= inc\n        inc = -inc\n        break\n      }\n    }\n  }\n}\n\n/**\n * Create encoded codewords from data input\n *\n * @param  {Number}   version              QR Code version\n * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level\n * @param  {ByteData} data                 Data input\n * @return {Uint8Array}                    Buffer containing encoded codewords\n */\nfunction createData (version, errorCorrectionLevel, segments) {\n  // Prepare data buffer\n  const buffer = new BitBuffer()\n\n  segments.forEach(function (data) {\n    // prefix data with mode indicator (4 bits)\n    buffer.put(data.mode.bit, 4)\n\n    // Prefix data with character count indicator.\n    // The character count indicator is a string of bits that represents the\n    // number of characters that are being encoded.\n    // The character count indicator must be placed after the mode indicator\n    // and must be a certain number of bits long, depending on the QR version\n    // and data mode\n    // @see {@link Mode.getCharCountIndicator}.\n    buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version))\n\n    // add binary data sequence to buffer\n    data.write(buffer)\n  })\n\n  // Calculate required number of bits\n  const totalCodewords = Utils.getSymbolTotalCodewords(version)\n  const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n  const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8\n\n  // Add a terminator.\n  // If the bit string is shorter than the total number of required bits,\n  // a terminator of up to four 0s must be added to the right side of the string.\n  // If the bit string is more than four bits shorter than the required number of bits,\n  // add four 0s to the end.\n  if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {\n    buffer.put(0, 4)\n  }\n\n  // If the bit string is fewer than four bits shorter, add only the number of 0s that\n  // are needed to reach the required number of bits.\n\n  // After adding the terminator, if the number of bits in the string is not a multiple of 8,\n  // pad the string on the right with 0s to make the string's length a multiple of 8.\n  while (buffer.getLengthInBits() % 8 !== 0) {\n    buffer.putBit(0)\n  }\n\n  // Add pad bytes if the string is still shorter than the total number of required bits.\n  // Extend the buffer to fill the data capacity of the symbol corresponding to\n  // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)\n  // and 00010001 (0x11) alternately.\n  const remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8\n  for (let i = 0; i < remainingByte; i++) {\n    buffer.put(i % 2 ? 0x11 : 0xEC, 8)\n  }\n\n  return createCodewords(buffer, version, errorCorrectionLevel)\n}\n\n/**\n * Encode input data with Reed-Solomon and return codewords with\n * relative error correction bits\n *\n * @param  {BitBuffer} bitBuffer            Data to encode\n * @param  {Number}    version              QR Code version\n * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level\n * @return {Uint8Array}                     Buffer containing encoded codewords\n */\nfunction createCodewords (bitBuffer, version, errorCorrectionLevel) {\n  // Total codewords for this QR code version (Data + Error correction)\n  const totalCodewords = Utils.getSymbolTotalCodewords(version)\n\n  // Total number of error correction codewords\n  const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n\n  // Total number of data codewords\n  const dataTotalCodewords = totalCodewords - ecTotalCodewords\n\n  // Total number of blocks\n  const ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel)\n\n  // Calculate how many blocks each group should contain\n  const blocksInGroup2 = totalCodewords % ecTotalBlocks\n  const blocksInGroup1 = ecTotalBlocks - blocksInGroup2\n\n  const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks)\n\n  const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks)\n  const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1\n\n  // Number of EC codewords is the same for both groups\n  const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1\n\n  // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount\n  const rs = new ReedSolomonEncoder(ecCount)\n\n  let offset = 0\n  const dcData = new Array(ecTotalBlocks)\n  const ecData = new Array(ecTotalBlocks)\n  let maxDataSize = 0\n  const buffer = new Uint8Array(bitBuffer.buffer)\n\n  // Divide the buffer into the required number of blocks\n  for (let b = 0; b < ecTotalBlocks; b++) {\n    const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2\n\n    // extract a block of data from buffer\n    dcData[b] = buffer.slice(offset, offset + dataSize)\n\n    // Calculate EC codewords for this data block\n    ecData[b] = rs.encode(dcData[b])\n\n    offset += dataSize\n    maxDataSize = Math.max(maxDataSize, dataSize)\n  }\n\n  // Create final data\n  // Interleave the data and error correction codewords from each block\n  const data = new Uint8Array(totalCodewords)\n  let index = 0\n  let i, r\n\n  // Add data codewords\n  for (i = 0; i < maxDataSize; i++) {\n    for (r = 0; r < ecTotalBlocks; r++) {\n      if (i < dcData[r].length) {\n        data[index++] = dcData[r][i]\n      }\n    }\n  }\n\n  // Apped EC codewords\n  for (i = 0; i < ecCount; i++) {\n    for (r = 0; r < ecTotalBlocks; r++) {\n      data[index++] = ecData[r][i]\n    }\n  }\n\n  return data\n}\n\n/**\n * Build QR Code symbol\n *\n * @param  {String} data                 Input string\n * @param  {Number} version              QR Code version\n * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level\n * @param  {MaskPattern} maskPattern     Mask pattern\n * @return {Object}                      Object containing symbol data\n */\nfunction createSymbol (data, version, errorCorrectionLevel, maskPattern) {\n  let segments\n\n  if (Array.isArray(data)) {\n    segments = Segments.fromArray(data)\n  } else if (typeof data === 'string') {\n    let estimatedVersion = version\n\n    if (!estimatedVersion) {\n      const rawSegments = Segments.rawSplit(data)\n\n      // Estimate best version that can contain raw splitted segments\n      estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel)\n    }\n\n    // Build optimized segments\n    // If estimated version is undefined, try with the highest version\n    segments = Segments.fromString(data, estimatedVersion || 40)\n  } else {\n    throw new Error('Invalid data')\n  }\n\n  // Get the min version that can contain data\n  const bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel)\n\n  // If no version is found, data cannot be stored\n  if (!bestVersion) {\n    throw new Error('The amount of data is too big to be stored in a QR Code')\n  }\n\n  // If not specified, use min version as default\n  if (!version) {\n    version = bestVersion\n\n  // Check if the specified version can contain the data\n  } else if (version < bestVersion) {\n    throw new Error('\\n' +\n      'The chosen QR Code version cannot contain this amount of data.\\n' +\n      'Minimum version required to store current data is: ' + bestVersion + '.\\n'\n    )\n  }\n\n  const dataBits = createData(version, errorCorrectionLevel, segments)\n\n  // Allocate matrix buffer\n  const moduleCount = Utils.getSymbolSize(version)\n  const modules = new BitMatrix(moduleCount)\n\n  // Add function modules\n  setupFinderPattern(modules, version)\n  setupTimingPattern(modules)\n  setupAlignmentPattern(modules, version)\n\n  // Add temporary dummy bits for format info just to set them as reserved.\n  // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}\n  // since the masking operation must be performed only on the encoding region.\n  // These blocks will be replaced with correct values later in code.\n  setupFormatInfo(modules, errorCorrectionLevel, 0)\n\n  if (version >= 7) {\n    setupVersionInfo(modules, version)\n  }\n\n  // Add data codewords\n  setupData(modules, dataBits)\n\n  if (isNaN(maskPattern)) {\n    // Find best mask pattern\n    maskPattern = MaskPattern.getBestMask(modules,\n      setupFormatInfo.bind(null, modules, errorCorrectionLevel))\n  }\n\n  // Apply mask pattern\n  MaskPattern.applyMask(maskPattern, modules)\n\n  // Replace format info bits with correct values\n  setupFormatInfo(modules, errorCorrectionLevel, maskPattern)\n\n  return {\n    modules: modules,\n    version: version,\n    errorCorrectionLevel: errorCorrectionLevel,\n    maskPattern: maskPattern,\n    segments: segments\n  }\n}\n\n/**\n * QR Code\n *\n * @param {String | Array} data                 Input data\n * @param {Object} options                      Optional configurations\n * @param {Number} options.version              QR Code version\n * @param {String} options.errorCorrectionLevel Error correction level\n * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis\n */\nexports.create = function create (data, options) {\n  if (typeof data === 'undefined' || data === '') {\n    throw new Error('No input text')\n  }\n\n  let errorCorrectionLevel = ECLevel.M\n  let version\n  let mask\n\n  if (typeof options !== 'undefined') {\n    // Use higher error correction level as default\n    errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M)\n    version = Version.from(options.version)\n    mask = MaskPattern.from(options.maskPattern)\n\n    if (options.toSJISFunc) {\n      Utils.setToSJISFunction(options.toSJISFunc)\n    }\n  }\n\n  return createSymbol(data, version, errorCorrectionLevel, mask)\n}\n","function hex2rgba (hex) {\n  if (typeof hex === 'number') {\n    hex = hex.toString()\n  }\n\n  if (typeof hex !== 'string') {\n    throw new Error('Color should be defined as hex string')\n  }\n\n  let hexCode = hex.slice().replace('#', '').split('')\n  if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {\n    throw new Error('Invalid hex color: ' + hex)\n  }\n\n  // Convert from short to long form (fff -> ffffff)\n  if (hexCode.length === 3 || hexCode.length === 4) {\n    hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {\n      return [c, c]\n    }))\n  }\n\n  // Add default alpha value\n  if (hexCode.length === 6) hexCode.push('F', 'F')\n\n  const hexValue = parseInt(hexCode.join(''), 16)\n\n  return {\n    r: (hexValue >> 24) & 255,\n    g: (hexValue >> 16) & 255,\n    b: (hexValue >> 8) & 255,\n    a: hexValue & 255,\n    hex: '#' + hexCode.slice(0, 6).join('')\n  }\n}\n\nexports.getOptions = function getOptions (options) {\n  if (!options) options = {}\n  if (!options.color) options.color = {}\n\n  const margin = typeof options.margin === 'undefined' ||\n    options.margin === null ||\n    options.margin < 0\n    ? 4\n    : options.margin\n\n  const width = options.width && options.width >= 21 ? options.width : undefined\n  const scale = options.scale || 4\n\n  return {\n    width: width,\n    scale: width ? 4 : scale,\n    margin: margin,\n    color: {\n      dark: hex2rgba(options.color.dark || '#000000ff'),\n      light: hex2rgba(options.color.light || '#ffffffff')\n    },\n    type: options.type,\n    rendererOpts: options.rendererOpts || {}\n  }\n}\n\nexports.getScale = function getScale (qrSize, opts) {\n  return opts.width && opts.width >= qrSize + opts.margin * 2\n    ? opts.width / (qrSize + opts.margin * 2)\n    : opts.scale\n}\n\nexports.getImageWidth = function getImageWidth (qrSize, opts) {\n  const scale = exports.getScale(qrSize, opts)\n  return Math.floor((qrSize + opts.margin * 2) * scale)\n}\n\nexports.qrToImageData = function qrToImageData (imgData, qr, opts) {\n  const size = qr.modules.size\n  const data = qr.modules.data\n  const scale = exports.getScale(size, opts)\n  const symbolSize = Math.floor((size + opts.margin * 2) * scale)\n  const scaledMargin = opts.margin * scale\n  const palette = [opts.color.light, opts.color.dark]\n\n  for (let i = 0; i < symbolSize; i++) {\n    for (let j = 0; j < symbolSize; j++) {\n      let posDst = (i * symbolSize + j) * 4\n      let pxColor = opts.color.light\n\n      if (i >= scaledMargin && j >= scaledMargin &&\n        i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {\n        const iSrc = Math.floor((i - scaledMargin) / scale)\n        const jSrc = Math.floor((j - scaledMargin) / scale)\n        pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0]\n      }\n\n      imgData[posDst++] = pxColor.r\n      imgData[posDst++] = pxColor.g\n      imgData[posDst++] = pxColor.b\n      imgData[posDst] = pxColor.a\n    }\n  }\n}\n","const Utils = require('./utils')\n\nfunction clearCanvas (ctx, canvas, size) {\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n  if (!canvas.style) canvas.style = {}\n  canvas.height = size\n  canvas.width = size\n  canvas.style.height = size + 'px'\n  canvas.style.width = size + 'px'\n}\n\nfunction getCanvasElement () {\n  try {\n    return document.createElement('canvas')\n  } catch (e) {\n    throw new Error('You need to specify a canvas element')\n  }\n}\n\nexports.render = function render (qrData, canvas, options) {\n  let opts = options\n  let canvasEl = canvas\n\n  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {\n    opts = canvas\n    canvas = undefined\n  }\n\n  if (!canvas) {\n    canvasEl = getCanvasElement()\n  }\n\n  opts = Utils.getOptions(opts)\n  const size = Utils.getImageWidth(qrData.modules.size, opts)\n\n  const ctx = canvasEl.getContext('2d')\n  const image = ctx.createImageData(size, size)\n  Utils.qrToImageData(image.data, qrData, opts)\n\n  clearCanvas(ctx, canvasEl, size)\n  ctx.putImageData(image, 0, 0)\n\n  return canvasEl\n}\n\nexports.renderToDataURL = function renderToDataURL (qrData, canvas, options) {\n  let opts = options\n\n  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {\n    opts = canvas\n    canvas = undefined\n  }\n\n  if (!opts) opts = {}\n\n  const canvasEl = exports.render(qrData, canvas, opts)\n\n  const type = opts.type || 'image/png'\n  const rendererOpts = opts.rendererOpts || {}\n\n  return canvasEl.toDataURL(type, rendererOpts.quality)\n}\n","const Utils = require('./utils')\n\nfunction getColorAttrib (color, attrib) {\n  const alpha = color.a / 255\n  const str = attrib + '=\"' + color.hex + '\"'\n\n  return alpha < 1\n    ? str + ' ' + attrib + '-opacity=\"' + alpha.toFixed(2).slice(1) + '\"'\n    : str\n}\n\nfunction svgCmd (cmd, x, y) {\n  let str = cmd + x\n  if (typeof y !== 'undefined') str += ' ' + y\n\n  return str\n}\n\nfunction qrToPath (data, size, margin) {\n  let path = ''\n  let moveBy = 0\n  let newRow = false\n  let lineLength = 0\n\n  for (let i = 0; i < data.length; i++) {\n    const col = Math.floor(i % size)\n    const row = Math.floor(i / size)\n\n    if (!col && !newRow) newRow = true\n\n    if (data[i]) {\n      lineLength++\n\n      if (!(i > 0 && col > 0 && data[i - 1])) {\n        path += newRow\n          ? svgCmd('M', col + margin, 0.5 + row + margin)\n          : svgCmd('m', moveBy, 0)\n\n        moveBy = 0\n        newRow = false\n      }\n\n      if (!(col + 1 < size && data[i + 1])) {\n        path += svgCmd('h', lineLength)\n        lineLength = 0\n      }\n    } else {\n      moveBy++\n    }\n  }\n\n  return path\n}\n\nexports.render = function render (qrData, options, cb) {\n  const opts = Utils.getOptions(options)\n  const size = qrData.modules.size\n  const data = qrData.modules.data\n  const qrcodesize = size + opts.margin * 2\n\n  const bg = !opts.color.light.a\n    ? ''\n    : '<path ' + getColorAttrib(opts.color.light, 'fill') +\n      ' d=\"M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z\"/>'\n\n  const path =\n    '<path ' + getColorAttrib(opts.color.dark, 'stroke') +\n    ' d=\"' + qrToPath(data, size, opts.margin) + '\"/>'\n\n  const viewBox = 'viewBox=\"' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '\"'\n\n  const width = !opts.width ? '' : 'width=\"' + opts.width + '\" height=\"' + opts.width + '\" '\n\n  const svgTag = '<svg xmlns=\"http://www.w3.org/2000/svg\" ' + width + viewBox + ' shape-rendering=\"crispEdges\">' + bg + path + '</svg>\\n'\n\n  if (typeof cb === 'function') {\n    cb(null, svgTag)\n  }\n\n  return svgTag\n}\n","\nconst canPromise = require('./can-promise')\n\nconst QRCode = require('./core/qrcode')\nconst CanvasRenderer = require('./renderer/canvas')\nconst SvgRenderer = require('./renderer/svg-tag.js')\n\nfunction renderCanvas (renderFunc, canvas, text, opts, cb) {\n  const args = [].slice.call(arguments, 1)\n  const argsNum = args.length\n  const isLastArgCb = typeof args[argsNum - 1] === 'function'\n\n  if (!isLastArgCb && !canPromise()) {\n    throw new Error('Callback required as last argument')\n  }\n\n  if (isLastArgCb) {\n    if (argsNum < 2) {\n      throw new Error('Too few arguments provided')\n    }\n\n    if (argsNum === 2) {\n      cb = text\n      text = canvas\n      canvas = opts = undefined\n    } else if (argsNum === 3) {\n      if (canvas.getContext && typeof cb === 'undefined') {\n        cb = opts\n        opts = undefined\n      } else {\n        cb = opts\n        opts = text\n        text = canvas\n        canvas = undefined\n      }\n    }\n  } else {\n    if (argsNum < 1) {\n      throw new Error('Too few arguments provided')\n    }\n\n    if (argsNum === 1) {\n      text = canvas\n      canvas = opts = undefined\n    } else if (argsNum === 2 && !canvas.getContext) {\n      opts = text\n      text = canvas\n      canvas = undefined\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        const data = QRCode.create(text, opts)\n        resolve(renderFunc(data, canvas, opts))\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n\n  try {\n    const data = QRCode.create(text, opts)\n    cb(null, renderFunc(data, canvas, opts))\n  } catch (e) {\n    cb(e)\n  }\n}\n\nexports.create = QRCode.create\nexports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render)\nexports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL)\n\n// only svg for now.\nexports.toString = renderCanvas.bind(null, function (data, _, opts) {\n  return SvgRenderer.render(data, opts)\n})\n","// can-promise has a crash in some versions of react native that dont have\n// standard global objects\n// https://github.com/soldair/node-qrcode/issues/157\n\nmodule.exports = function () {\n  return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then\n}\n","export const getTexts = () => {\n    var userLang = navigator.language || navigator.userLanguage;\n    switch (userLang) {\n        case \"de\": return germanTexts\n        case \"ru\": return russianTexts\n        case \"es\": return spanishTexts\n        case \"it\": return italianTexts\n        case \"fr\": return frenchTexts\n        default: return englishTexts\n    }\n}\n\n\nconst germanTexts = {\n    howMany: \"Wieviele Geldbörsen möchtest Du generieren?\",\n    includingQRCodes: \"QRCodes Erwünscht\",\n    congrats: \"Glückwunsch. Du hast einen Schatz gefunden.\",\n    generate: \"Generiere\",\n    print: \"Drucken\",\n    reload: \"Seite Neu Laden\"\n}\nconst frenchTexts = {\n    howMany: \"Combien de Portefeuilles de terre voulez-vous générer ?\",\n    includingQRCodes: \"Codes QR souhaités\",\n    congrats: \"Toutes nos félicitations. Vous avez trouvé un trésor.\",\n    generate: \"Générer\",\n    print: \"Imprimer\",\n    reload: \"Rafraîchir la page\"\n}\nconst spanishTexts = {\n    howMany: \"¿Cuantas Carteras quieres generar?\",\n    includingQRCodes: \"Códigos QR deseados\",\n    congrats: \"Felicidades. Has encontrado un tesoro.\",\n    generate: \"Generar\",\n    print: \"Imprimir\",\n    reload: \"Recargar página\"\n}\nconst italianTexts = {\n    howMany: \"Quante Portafogli vuoi generare?\",\n    includingQRCodes: \"Codici QR desiderati\",\n    congrats: \"Congratulazioni. Hai trovato un tesoro.\",\n    generate: \"Creare\",\n    print: \"Stampa\",\n    reload: \"Ricarica la pagina\"\n}\nconst russianTexts = {\n    howMany: \"Сколько Kошельков вы хотите произвести?\",\n    includingQRCodes: \"QR-коды желательны\",\n    congrats: \"Поздравляю. Вы нашли сокровище.\",\n    generate: \"Генерировать\",\n    print: \"Распечатать\",\n    reload: \"Перезагрузить страницу\"\n}\nconst englishTexts = {\n    howMany: \"How many wallets do you want to generate?\",\n    includingQRCodes: \"QR codes desired\",\n    congrats: \"Congratulations. You have found a treasure.\",\n    generate: \"Generate\",\n    print: \"Print\",\n    reload: \"Reload Page\"\n}","<script>\n\timport { ethers } from \"ethers\";\n\timport QRCode from \"qrcode\";\n\timport { onMount } from \"svelte\";\n\timport { getTexts } from \"./helpers.js\";\n\n\tlet walletInfos = [];\n\tlet amountOfWallets = 9;\n\tlet counter = 0;\n\tlet generationCompleted = false;\n\tlet resultOfCreateRandom;\n\tlet walletFromPrivateKey;\n\tlet texts = {};\n\tlet ready = false;\n\tlet showQRCodesAlso = false;\n\n\tonMount(async () => {\n\t\ttexts = getTexts();\n\t\tready = true;\n\t});\n\n\tasync function generateOne() {\n\t\tlet walletInfo = {};\n\t\tresultOfCreateRandom = ethers.Wallet.createRandom();\n\t\twalletFromPrivateKey = new ethers.Wallet(\n\t\t\tresultOfCreateRandom.chainCode,\n\t\t);\n\n\t\twalletInfo.address = walletFromPrivateKey.address;\n\t\twalletInfo.privateKey = walletFromPrivateKey.privateKey;\n\t\twalletInfo.mnemonic = resultOfCreateRandom.mnemonic.phrase;\n\t\twalletInfo.canvasIDAddress = `canvasAddress${counter}`;\n\t\twalletInfo.canvasIDPrivateKey = \"canvasPrivateKey\" + counter;\n\n\t\treturn walletInfo;\n\t}\n\n\tfunction prepareQRCodes(data) {\n\t\tfor (const walletInfo of data) {\n\t\t\tQRCode.toCanvas(\n\t\t\t\tdocument.getElementById(walletInfo.canvasIDAddress),\n\t\t\t\twalletInfo.address,\n\t\t\t\t{ errorCorrectionLevel: \"M\", version: 4 },\n\t\t\t\tfunction (error) {\n\t\t\t\t\tif (error) console.error(error);\n\t\t\t\t\tconsole.log(\"qr code addresssuccess!\");\n\t\t\t\t},\n\t\t\t);\n\t\t\tQRCode.toCanvas(\n\t\t\t\tdocument.getElementById(walletInfo.canvasIDPrivateKey),\n\t\t\t\twalletInfo.privateKey,\n\t\t\t\t{ errorCorrectionLevel: \"M\", version: 5 },\n\t\t\t\tfunction (error) {\n\t\t\t\t\tif (error) console.error(error);\n\t\t\t\t\tconsole.log(\"qr code private key success!\");\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\tasync function generateAll() {\n\t\twalletInfos = [];\n\n\t\twhile (counter < amountOfWallets) {\n\t\t\tcounter++;\n\t\t\tlet walletInfo = await generateOne();\n\t\t\twalletInfos.push(walletInfo);\n\t\t}\n\t\tgenerationCompleted = true;\n\n\t\tif (showQRCodesAlso) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tprepareQRCodes(walletInfos);\n\t\t\t}, 1 * 200);\n\t\t}\n\t}\n</script>\n\n<main>\n\t{#if ready}\n\t\t{#if !generationCompleted}\n\t\t\t<div class=\"noprint\">\n\t\t\t\t<h3>Paperwallet Generator</h3>\n\n\t\t\t\t<p />\n\t\t\t\t<div class=\"center\">\n\t\t\t\t\t<label class=\"checkerContainer\">\n\t\t\t\t\t\t<input type=\"checkbox\" bind:value={showQRCodesAlso} />\n\t\t\t\t\t\t<!-- <span class=\"checkmark\"></span> -->\n\t\t\t\t\t\t{texts.includingQRCodes}\n\t\t\t\t\t</label>\n\t\t\t\t\t<br />\n\t\t\t\t\t<input type=\"number\" bind:value={amountOfWallets} />\n\t\t\t\t\t<button on:click={generateAll}>{texts.generate}</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<div class=\"center\">\n\t\t\t{#if generationCompleted}\n\t\t\t\t{#each walletInfos as wi, index}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass={(showQRCodesAlso && index % 2 === 0) || (!showQRCodesAlso && index % 9 === 0) && index > 1\n\t\t\t\t\t\t\t? \"pageBreak\"\n\t\t\t\t\t\t\t: \"relax\"}\n\t\t\t\t\t>\n\t\t\t\t\t\t<a href=\"https://FreedomCash.org\" target=\"_blank\">\n\t\t\t\t\t\t\t<h4>FreedomCash.org</h4>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<div class=\"small\">\n\t\t\t\t\t\t\t<!-- {texts.congrats} -->\n\t\t\t\t\t\t\t<p></p>\n\t\t\t\t\t\t\t<b> Freedom Wallet Address (Share): </b>\n\t\t\t\t\t\t\t{wi.address} <br />\n\t\t\t\t\t\t\t{#if showQRCodesAlso}\n\t\t\t\t\t\t\t\t<canvas id={wi.canvasIDAddress} />\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t<p></p>\n\t\t\t\t\t\t\t<b> Private Key (do not share): </b>\n\t\t\t\t\t\t\t{wi.privateKey} <br />\n\t\t\t\t\t\t\t<p></p>\n\t\t\t\t\t\t\t<b> Mnemonic Phrase (do not share): </b>\n\t\t\t\t\t\t\t{wi.mnemonic} <br />\n\n\t\t\t\t\t\t\t{#if showQRCodesAlso}\n\t\t\t\t\t\t\t\t<canvas id={wi.canvasIDPrivateKey} />\n\t\t\t\t\t\t\t{/if}\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\t\t\t{/if}\n\t\t\t<div class=\"noprint\">\n\t\t\t\t{#if walletInfos.length === amountOfWallets}\n\t\t\t\t\t<div class=\"noprint\">\n\t\t\t\t\t\t<p></p>\n\t\t\t\t\t\t<button class=\"b1\" onclick=\"window.print()\"\n\t\t\t\t\t\t\t>{texts.print}</button\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<p />\n\t\t\t\t\t\t<button class=\"b1\" onclick=\"window.location.reload()\"\n\t\t\t\t\t\t\t>{texts.reload}</button\n\t\t\t\t\t\t>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<p><br /></p>\n\t\t\t\t\tGenerated public wallet addresses:\n\t\t\t\t\t<p />\n\t\t\t\t\t{#each walletInfos as wiForList}\n\t\t\t\t\t\t{wiForList.address} <br />\n\t\t\t\t\t{/each}\n\t\t\t\t{/if}\n\t\t\t\t<p><br /></p>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\tpadding: 0em;\n\t}\n\n\th3 {\n\t\tcolor: rgb(1, 111, 1);\n\t\ttext-transform: uppercase;\n\t\tfont-size: 2em;\n\t\tfont-weight: 100;\n\t}\n\n\t.small {\n\t\tmargin-left: 0;\n\t\tpadding-left: 0;\n\t\tfont-size: 9px;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n\n\t@media print {\n\t\t.noprint {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.pageBreak {\n\t\t\tpage-break-before: always;\n\t\t}\n\t}\n</style>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","to_number","set_data","set_input_value","input","current_component","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","e","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","destroy_component","filtered","targets","c","indexOf","flush_render_callbacks","on_destroy","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","block","delete","local","customElement","m","new_on_destroy","map","filter","mount_component","SvelteComponent","$destroy","this","$on","type","index","splice","$set","$$props","obj","$$set","keys","version","checkType","types","split","t","trim","error","code","argument","async","resolveProperties","all","k","reduce","accum","v","defineProperties","values","key","defineProperty","enumerable","writable","stringify","isArray","join","Uint8Array","HEX","result","toJSON","toString","BigInt","JSON","sort","assert","check","message","info","shortMessage","details","TypeError","RangeError","assign","makeError","assertArgument","_normalizeForms","form","normalize","String","fromCharCode","assertNormalize","operation","assertPrivate","givenGuard","guard","className","method","_getBytes","copy","match","offset","parseInt","substring","getBytes","getBytesCopy","isHexString","isBytesLike","HexCharacters","hexlify","bytes","concat","datas","dataLength","dataSlice","start","end","buffer","slice","zeroPadValue","left","set","zeroPad","BN_0","BN_1","maxValue","getBigInt","Number","isInteger","getUint","fault","Nibbles","toBigInt","getNumber","toBeHex","_value","_width","width","toBeArray","hex","Alphabet","Lookup","getAlpha","letter","BN_58","toUtf8Bytes","str","charCodeAt","c2","pair","hexlifyByte","unarrayifyInteger","_decodeChildren","childOffset","decoded","_decode","consumed","checkOffset","lengthLength","decodeRlp","_data","arrayifyInteger","unshift","_encode","object","payload","child","prototype","call","nibbles","encodeRlp","uuidV4","randomBytes","number","n","isSafeInteger","lengths","includes","hash","outputLen","blockLen","exists","checkFinished","destroyed","finished","output","out","min","crypto","globalThis","undefined","u8a","u32","arr","Uint32Array","byteOffset","Math","floor","byteLength","createView","DataView","rotr","word","shift","nextTick","asyncLoop","iters","tick","cb","ts","Date","now","diff","toBytes","TextEncoder","encode","utf8ToBytes","Hash","clone","_cloneInto","toStr","checkOpts","defaults","opts","wrapConstructor","hashCons","hashC","msg","digest","tmp","bytesLength","getRandomValues","HMAC","constructor","_key","super","assertHash","iHash","pad","oHash","buf","assertExists","digestInto","assertBytes","destroy","to","getPrototypeOf","hmac","pbkdf2Init","_password","_salt","_opts","dkLen","asyncTick","assertNumber","password","salt","DK","PRF","PRFSalt","pbkdf2","prfW","view","u","ti","pos","Ti","subarray","setInt32","ui","pbkdf2Output","SHA2","padOffset","isLE","len","take","process","dataView","roundClean","setBigUint64","_32n","_u32_max","wh","wl","h","setUint32","oview","outLen","state","get","res","Maj","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","getUint32","W15","W2","s0","s1","T1","T2","sha256","U32_MASK64","fromBig","le","lst","Ah","Al","rotlSH","s","rotlSL","rotlBH","rotlBL","u64$1","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","anyGlobal","self","window","global","getGlobal","msCrypto","locked","_computeHmac","algorithm","_algo","algo","createHmac","__computeHmac","computeHmac","_","lock","register","func","freeze","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","keccak_256","gen","_keccak256","__keccak256","keccak256","Rho","Id","idxL","idxR","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","f","group","z","BUF","RIPEMD160","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","ripemd160","_ripemd160","noble_ripemd160","__ripemd160","_pbkdf2","keylen","pbkdf2Sync","__pbkdf2","_randomBytes","crypto_random","__randomBytes","XorAndSalsa","prev","pi","ii","oi","y00","y01","y02","y03","y04","y05","y06","y07","y08","y09","y10","y11","y12","y13","y14","y15","x00","x01","x02","x03","x04","x05","x06","x07","x08","x09","x10","x11","x12","x13","x14","x15","BlockMix","r","head","tail","scryptInit","maxmem","N","onProgress","blockSize","blockSize32","memUsed","B32","V","blockMixCb","totalBlockMix","callbackPer","max","blockMixCnt","scryptOutput","lockedSync","lockedAsync","_scryptAsync","passwd","Pi","_nobleAsync","_scryptSync","_nobleSync","__scryptAsync","__scryptSync","scrypt","_passwd","progress","scryptSync","_sha256","createHash","__sha256","locked256","hexes","padStart","bytesToHex","numberToHexUnpadded","num","hexToNumber","hexToBytes","array","hexByte","byte","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","concatBytes","arrays","sum","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","reset","reseed","seed","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","field","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","isOptional","checkVal","entries","b1","b2","_3n","_4n","_5n","_8n","mod","pow","power","modulo","pow2","invert","FpSqrt","P","p1div4","eql","sqr","c1","n2","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","validateBasic","curve","ORDER","MASK","BYTES","BITS","Gx","Gy","b2n","h2b","ut","DER","Err","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","sig","shl","rhl","weierstrassPoints","CURVE","ut.validateObject","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","ut.concatBytes","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","ut.bytesToHex","ut.bytesToNumberBE","mod.mod","pointPrecomputes","assertPrjPoint","other","Point","px","py","pz","fromAffine","is0","normalizeZ","points","toInv","invertBatch","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","iz","inv","ax","ay","zz","cofactor","toRawBytes","isCompressed","toHex","_bits","bits","condition","item","W","windows","elm","precomputeWindow","base","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","mod.invert","cat","y2","sqrt","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","ut.hexToBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","mod.getMinHashLength","fieldLen","minLen","reduced","mod.mapHashToField","precompute","isProbPub","delta","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","some","prehash","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","q","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","ut.createHmacDrbg","drbg","verify","signature","publicKey","sg","_sig","derError","is","getHash","msgs","secp256k1P","secp256k1N","divNearest","bitLen","redef","sqrtP","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","nums","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","Field","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","a2","POW_2_128","ZeroHash","BN_2","BN_27","BN_28","BN_35","_guard","toUint256","networkV","legacyChainId","getChainId","yParity","yParityAndS","compactSerialized","serialized","Symbol","for","_type","bv","getChainIdV","chainId","getNormalizedV","assertError","_r","_v","SigningKey","computePublicKey","compressedPublicKey","computeSharedSecret","pubKey","compressed","pub","secpSig","addPoints","p0","p1","pub0","pub1","BN_36","getChecksumAddress","address","chars","toLowerCase","expanded","hashed","toUpperCase","ibanLookup","safeDigits","Base36","getAddress","startsWith","checksum","ibanChecksum","fromBase36","checkAddress","promise","resolveAddress","resolver","resolveName","id","accessSetify","addr","storageKeys","storageKey","accessListify","localeCompare","computeAddress","pubkey","BN_MAX_UINT","handleAddress","handleAccessList","param","handleNumber","handleUint","formatNumber","formatAccessList","_serializeLegacy","tx","fields","nonce","gasPrice","gasLimit","legacy","_parseEipSignature","_serializeEip1559","maxPriorityFeePerGas","maxFeePerGas","accessList","_serializeEip2930","Transaction","typeName","unsignedHash","unsignedSerialized","fromPublicKey","isSigned","inferType","inferTypes","hasGasPrice","hasFee","hasAccessList","isLegacy","isBerlin","isLondon","_parseLegacy","_parseEip2930","_parseEip1559","padding","BN__1","BN_MAX_UINT256","hexTrue","hexFalse","domainFieldTypes","verifyingContract","domainFieldNames","checkString","domainChecks","toQuantity","getBaseEncoder","signed","boundsUpper","boundsLower","limit","toTwos","hexPadRight","encodeType","TypedDataEncoder","primaryType","parse","fullTypes","encoderCache","links","parents","subtypes","uniqueNames","baseType","primaryTypes","checkCircular","found","subtype","st","getEncoder","encoder","subEncoder","encodedType","encodeData","hashStruct","_visit","visit","getPrimaryType","hashDomain","domain","domainFields","EIP712Domain","resolveNames","ensCache","getPayload","domainValues","domainTypes","typesWithDomain","checkProvider","signer","provider","populate","req","bigIntKeys","numberKeys","blockTag","enableCcipRead","customData","copyRequest","AbstractSigner","getNonce","getTransactionCount","populateCall","populateTransaction","estimateGas","network","getNetwork","hasEip1559","feeData","getFeeData","sendTransaction","txObj","broadcastTransaction","signTransaction","VoidSigner","connect","throwUnsupported","signMessage","signTypedData","BaseWallet","signingKey","btx","signMessageSync","hashMessage","populated","subsChrs","Word","unfold","words","sep","initial","decodeOwl","subs","clumps","leftover","replace","semi","decode","Wordlist","locale","phrase","WordlistOwl","_decodeWords","loadWords","getWord","getWordIndex","wordlist","LangEn","getUpperMask","mnemonicToEntropy","mnemonic","entropy","bit","entropyBits","checksumMask","entropyToMnemonic","indices","remainingBits","checksumBits","Mnemonic","computeSeed","fromPhrase","fromEntropy","_entropy","entropyToPhrase","phraseToEntropy","isValidMnemonic","_AES_key","_AES_Kd","_AES_Ke","__classPrivateFieldGet","receiver","kind","__classPrivateFieldSet","numberOfRounds","rcon","Si","T3","T4","T5","T6","T7","T8","U3","U4","convertToInt32","AES","roundKeyCount","KC","tk","tt","rconpointer","encrypt","plaintext","decrypt","ciphertext","WeakMap","ModeOfOperation","cls","aes","_CBC_iv","_CBC_lastBlock","CBC","iv","_CTR_remaining","_CTR_remainingIndex","_CTR_counter","CTR","initialValue","setCounterValue","setCounterBytes","counter","MAX_SAFE_INTEGER","increment","_a","_b","crypttext","looseArrayify","hexString","zpad","getPassword","spelunk","_path","path","reqd","cur","parseFloat","defaultPath","isKeystoreJson","json","getAccount","account","mnemonicKey","mnemonicCiphertext","mnemonicIv","mnemonicAesCtr","getDecryptKdfParams","kdf","prf","count","stall","duration","setTimeout","getEncryptKdfParams","_encryptKeystore","uuidRandom","uuid","derivedKey","macPrefix","mac","Crypto","cipher","cipherparams","kdfparams","dklen","client","gethFilename","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","mnemonicCounter","encryptKeystoreJsonSync","passwordBytes","encryptKeystoreJson","progressCallback","MasterSecret","HardenedBit","trunc","encodeBase58Check","encodeBase58","ser_I","chainCode","IL","IR","derivePath","components","depth","deriveChild","HDNodeWallet","fingerprint","parentFingerprint","encryptSync","extendedKey","hasPath","neuter","HDNodeVoidWallet","_index","ki","fromSeed","_seed","fromExtendedKey","decodeBase58","createRandom","fromMnemonic","Ki","isCrowdsaleJson","encseed","decryptCrowdsaleJson","encryptedSeed","padder","pkcs7Strip","seedHex","Wallet","fromAccount","wallet","console","log","fromEncryptedJson","params","decryptKeystoreJson","fromEncryptedJsonSync","decryptKeystoreJsonSync","toSJISFunction","CODEWORDS_COUNT","getSymbolSize","getSymbolTotalCodewords","getBCHDigit","digit","setToSJISFunction","utils$1","isKanjiModeEnabled","toSJIS","kanji","BitBuffer","L","exports","M","level","defaultValue","fromString","BitBuffer$1","bufIndex","put","putBit","getLengthInBits","bitBuffer","BitMatrix","size","reservedBit","row","col","reserved","BitMatrix$1","xor","isReserved","bitMatrix","require$$0","getRowColCoords","posCount","intervals","positions","getPositions","coords","posLength","finderPattern","Patterns","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","PenaltyScores","getMaskAt","maskPattern","getPenaltyN1","sameCountCol","sameCountRow","lastCol","lastRow","module","getPenaltyN2","last","getPenaltyN3","bitsCol","bitsRow","getPenaltyN4","darkCount","modulesCount","applyMask","pattern","getBestMask","setupFormatFunc","numPatterns","bestPattern","lowerPenalty","Infinity","penalty","ECLevel","EC_BLOCKS_TABLE","EC_CODEWORDS_TABLE","errorCorrectionCode","getBlocksCount","errorCorrectionLevel","getTotalCodewordsCount","EXP_TABLE","LOG_TABLE","galoisField","exp","GF","p2","coeff","divident","divisor","generateECPolynomial","degree","poly","Polynomial","ReedSolomonEncoder","genPoly","initialize","ReedSolomonEncoder$1","paddedData","remainder","buff","reedSolomonEncoder","versionCheck","numeric","regex","KANJI","RegExp","BYTE_KANJI","BYTE","NUMERIC","ALPHANUMERIC","TEST_KANJI","TEST_NUMERIC","TEST_ALPHANUMERIC","testKanji","test","testNumeric","testAlphanumeric","VersionCheck","Regex","require$$1","ccBits","MIXED","getCharCountIndicator","mode","getBestModeForData","dataStr","Utils","ECCode","require$$2","Mode","require$$3","require$$4","G18_BCH","getReservedBitsCount","getTotalBitsFromDataArray","segments","totalBits","reservedBits","getBitsLength","getCapacity","dataTotalCodewordsBits","usableBits","getBestVersionForData","seg","ecl","currentVersion","getBestVersionForMixedData","getBestVersionForDataLength","getLength","getEncodedBits","G15_BCH","formatInfo","NumericData","write","substr","remainingNum","numericData","ALPHA_NUM_CHARS","AlphanumericData","alphanumericData","encodeUtf8","second","ByteData","byteData","KanjiData","kanjiData","dijkstra","single_source_shortest_paths","graph","predecessors","costs","closest","cost_of_s_to_u","adjacent_nodes","cost_of_s_to_u_plus_cost_of_e","cost_of_s_to_v","open","PriorityQueue","make","cost","hasOwnProperty","extract_shortest_path_from_predecessor_list","find_path","T","queue","sorter","default_sorter","require$$5","require$$6","require$$7","getStringByteLength","unescape","encodeURIComponent","getSegments","exec","getSegmentsFromString","numSegs","alphaNumSegs","byteSegs","kanjiSegs","s2","getSegmentBitsLength","buildSingleSegment","modesHint","bestMode","fromArray","segs","buildNodes","table","prevNodeIds","nodeGroup","currentNodeIds","lastCount","prevNodeId","buildGraph","optimizedSegs","curr","prevSeg","mergeSegments","rawSplit","AlignmentPattern","FinderPattern","MaskPattern","require$$8","Version","require$$9","FormatInfo","require$$10","require$$11","Segments","require$$12","setupFormatInfo","matrix","createData","remainingByte","totalCodewords","ecTotalCodewords","dataTotalCodewords","ecTotalBlocks","blocksInGroup2","blocksInGroup1","totalCodewordsInGroup1","dataCodewordsInGroup1","dataCodewordsInGroup2","ecCount","rs","dcData","ecData","maxDataSize","dataSize","createCodewords","createSymbol","estimatedVersion","rawSegments","bestVersion","dataBits","moduleCount","modules","setupFinderPattern","setupTimingPattern","setupAlignmentPattern","setupVersionInfo","inc","bitIndex","byteIndex","dark","setupData","bind","qrcode","toSJISFunc","hex2rgba","hexCode","apply","hexValue","getOptions","color","margin","scale","light","rendererOpts","getScale","qrSize","getImageWidth","qrToImageData","imgData","qr","symbolSize","scaledMargin","palette","posDst","pxColor","render","qrData","canvas","canvasEl","getContext","getCanvasElement","image","createImageData","clearRect","height","style","clearCanvas","putImageData","renderToDataURL","toDataURL","quality","getColorAttrib","attrib","alpha","toFixed","svgCmd","cmd","svgTag","qrcodesize","bg","moveBy","newRow","lineLength","qrToPath","viewBox","canPromise","QRCode","CanvasRenderer","SvgRenderer","renderCanvas","renderFunc","args","arguments","argsNum","isLastArgCb","reject","browser","toCanvas","germanTexts","howMany","includingQRCodes","congrats","generate","print","reload","frenchTexts","spanishTexts","italianTexts","russianTexts","englishTexts","create_if_block_5","create_if_block_2","create_if_block_1","div1","div0","t4_value","t8_value","label","input0","input1","button","t8","canvas_id_value","canvasIDAddress","canvasIDPrivateKey","t5_value","t12_value","t18_value","create_if_block_4","create_if_block_3","div1_class_value","b0","br0","br1","br2","t12","t18","t1_value","button0","button1","p3","t0_value","create_if_block","main","resultOfCreateRandom","walletFromPrivateKey","walletInfos","amountOfWallets","generationCompleted","texts","showQRCodesAlso","generateOne","walletInfo","ethers.Wallet","$$invalidate","navigator","language","userLanguage","getTexts","getElementById","prepareQRCodes","body"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95]}